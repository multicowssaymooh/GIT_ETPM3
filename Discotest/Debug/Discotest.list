
Discotest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a280  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002ba8  0800a430  0800a430  0001a430  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cfd8  0800cfd8  000201ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800cfd8  0800cfd8  0001cfd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cfe0  0800cfe0  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cfe0  0800cfe0  0001cfe0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cfe4  0800cfe4  0001cfe4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0800cfe8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000618  200001ec  0800d1d4  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000804  0800d1d4  00020804  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022429  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004b55  00000000  00000000  00042645  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001d60  00000000  00000000  000471a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001af0  00000000  00000000  00048f00  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00029fe1  00000000  00000000  0004a9f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001bb84  00000000  00000000  000749d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ed386  00000000  00000000  00090555  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0017d8db  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007c58  00000000  00000000  0017d958  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800a418 	.word	0x0800a418

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001f0 	.word	0x200001f0
 80001ec:	0800a418 	.word	0x0800a418

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b972 	b.w	800058c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	4688      	mov	r8, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14b      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4615      	mov	r5, r2
 80002d2:	d967      	bls.n	80003a4 <__udivmoddi4+0xe4>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0720 	rsb	r7, r2, #32
 80002de:	fa01 f302 	lsl.w	r3, r1, r2
 80002e2:	fa20 f707 	lsr.w	r7, r0, r7
 80002e6:	4095      	lsls	r5, r2
 80002e8:	ea47 0803 	orr.w	r8, r7, r3
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002f8:	fa1f fc85 	uxth.w	ip, r5
 80002fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000300:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000304:	fb07 f10c 	mul.w	r1, r7, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000312:	f080 811b 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8118 	bls.w	800054c <__udivmoddi4+0x28c>
 800031c:	3f02      	subs	r7, #2
 800031e:	442b      	add	r3, r5
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0fe 	udiv	r0, r3, lr
 8000328:	fb0e 3310 	mls	r3, lr, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fc0c 	mul.w	ip, r0, ip
 8000334:	45a4      	cmp	ip, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	192c      	adds	r4, r5, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8107 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000342:	45a4      	cmp	ip, r4
 8000344:	f240 8104 	bls.w	8000550 <__udivmoddi4+0x290>
 8000348:	3802      	subs	r0, #2
 800034a:	442c      	add	r4, r5
 800034c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000350:	eba4 040c 	sub.w	r4, r4, ip
 8000354:	2700      	movs	r7, #0
 8000356:	b11e      	cbz	r6, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c6 4300 	strd	r4, r3, [r6]
 8000360:	4639      	mov	r1, r7
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0xbe>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80eb 	beq.w	8000546 <__udivmoddi4+0x286>
 8000370:	2700      	movs	r7, #0
 8000372:	e9c6 0100 	strd	r0, r1, [r6]
 8000376:	4638      	mov	r0, r7
 8000378:	4639      	mov	r1, r7
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	fab3 f783 	clz	r7, r3
 8000382:	2f00      	cmp	r7, #0
 8000384:	d147      	bne.n	8000416 <__udivmoddi4+0x156>
 8000386:	428b      	cmp	r3, r1
 8000388:	d302      	bcc.n	8000390 <__udivmoddi4+0xd0>
 800038a:	4282      	cmp	r2, r0
 800038c:	f200 80fa 	bhi.w	8000584 <__udivmoddi4+0x2c4>
 8000390:	1a84      	subs	r4, r0, r2
 8000392:	eb61 0303 	sbc.w	r3, r1, r3
 8000396:	2001      	movs	r0, #1
 8000398:	4698      	mov	r8, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d0e0      	beq.n	8000360 <__udivmoddi4+0xa0>
 800039e:	e9c6 4800 	strd	r4, r8, [r6]
 80003a2:	e7dd      	b.n	8000360 <__udivmoddi4+0xa0>
 80003a4:	b902      	cbnz	r2, 80003a8 <__udivmoddi4+0xe8>
 80003a6:	deff      	udf	#255	; 0xff
 80003a8:	fab2 f282 	clz	r2, r2
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f040 808f 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b2:	1b49      	subs	r1, r1, r5
 80003b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003b8:	fa1f f885 	uxth.w	r8, r5
 80003bc:	2701      	movs	r7, #1
 80003be:	fbb1 fcfe 	udiv	ip, r1, lr
 80003c2:	0c23      	lsrs	r3, r4, #16
 80003c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003cc:	fb08 f10c 	mul.w	r1, r8, ip
 80003d0:	4299      	cmp	r1, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d4:	18eb      	adds	r3, r5, r3
 80003d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4299      	cmp	r1, r3
 80003de:	f200 80cd 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003e2:	4684      	mov	ip, r0
 80003e4:	1a59      	subs	r1, r3, r1
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80003f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003f4:	fb08 f800 	mul.w	r8, r8, r0
 80003f8:	45a0      	cmp	r8, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x14c>
 80003fc:	192c      	adds	r4, r5, r4
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x14a>
 8000404:	45a0      	cmp	r8, r4
 8000406:	f200 80b6 	bhi.w	8000576 <__udivmoddi4+0x2b6>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 0408 	sub.w	r4, r4, r8
 8000410:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000414:	e79f      	b.n	8000356 <__udivmoddi4+0x96>
 8000416:	f1c7 0c20 	rsb	ip, r7, #32
 800041a:	40bb      	lsls	r3, r7
 800041c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000420:	ea4e 0e03 	orr.w	lr, lr, r3
 8000424:	fa01 f407 	lsl.w	r4, r1, r7
 8000428:	fa20 f50c 	lsr.w	r5, r0, ip
 800042c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000430:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000434:	4325      	orrs	r5, r4
 8000436:	fbb3 f9f8 	udiv	r9, r3, r8
 800043a:	0c2c      	lsrs	r4, r5, #16
 800043c:	fb08 3319 	mls	r3, r8, r9, r3
 8000440:	fa1f fa8e 	uxth.w	sl, lr
 8000444:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000448:	fb09 f40a 	mul.w	r4, r9, sl
 800044c:	429c      	cmp	r4, r3
 800044e:	fa02 f207 	lsl.w	r2, r2, r7
 8000452:	fa00 f107 	lsl.w	r1, r0, r7
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1e 0303 	adds.w	r3, lr, r3
 800045c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000460:	f080 8087 	bcs.w	8000572 <__udivmoddi4+0x2b2>
 8000464:	429c      	cmp	r4, r3
 8000466:	f240 8084 	bls.w	8000572 <__udivmoddi4+0x2b2>
 800046a:	f1a9 0902 	sub.w	r9, r9, #2
 800046e:	4473      	add	r3, lr
 8000470:	1b1b      	subs	r3, r3, r4
 8000472:	b2ad      	uxth	r5, r5
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3310 	mls	r3, r8, r0, r3
 800047c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000480:	fb00 fa0a 	mul.w	sl, r0, sl
 8000484:	45a2      	cmp	sl, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1e 0404 	adds.w	r4, lr, r4
 800048c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000490:	d26b      	bcs.n	800056a <__udivmoddi4+0x2aa>
 8000492:	45a2      	cmp	sl, r4
 8000494:	d969      	bls.n	800056a <__udivmoddi4+0x2aa>
 8000496:	3802      	subs	r0, #2
 8000498:	4474      	add	r4, lr
 800049a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800049e:	fba0 8902 	umull	r8, r9, r0, r2
 80004a2:	eba4 040a 	sub.w	r4, r4, sl
 80004a6:	454c      	cmp	r4, r9
 80004a8:	46c2      	mov	sl, r8
 80004aa:	464b      	mov	r3, r9
 80004ac:	d354      	bcc.n	8000558 <__udivmoddi4+0x298>
 80004ae:	d051      	beq.n	8000554 <__udivmoddi4+0x294>
 80004b0:	2e00      	cmp	r6, #0
 80004b2:	d069      	beq.n	8000588 <__udivmoddi4+0x2c8>
 80004b4:	ebb1 050a 	subs.w	r5, r1, sl
 80004b8:	eb64 0403 	sbc.w	r4, r4, r3
 80004bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004c0:	40fd      	lsrs	r5, r7
 80004c2:	40fc      	lsrs	r4, r7
 80004c4:	ea4c 0505 	orr.w	r5, ip, r5
 80004c8:	e9c6 5400 	strd	r5, r4, [r6]
 80004cc:	2700      	movs	r7, #0
 80004ce:	e747      	b.n	8000360 <__udivmoddi4+0xa0>
 80004d0:	f1c2 0320 	rsb	r3, r2, #32
 80004d4:	fa20 f703 	lsr.w	r7, r0, r3
 80004d8:	4095      	lsls	r5, r2
 80004da:	fa01 f002 	lsl.w	r0, r1, r2
 80004de:	fa21 f303 	lsr.w	r3, r1, r3
 80004e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004e6:	4338      	orrs	r0, r7
 80004e8:	0c01      	lsrs	r1, r0, #16
 80004ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ee:	fa1f f885 	uxth.w	r8, r5
 80004f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb07 f308 	mul.w	r3, r7, r8
 80004fe:	428b      	cmp	r3, r1
 8000500:	fa04 f402 	lsl.w	r4, r4, r2
 8000504:	d907      	bls.n	8000516 <__udivmoddi4+0x256>
 8000506:	1869      	adds	r1, r5, r1
 8000508:	f107 3cff 	add.w	ip, r7, #4294967295
 800050c:	d22f      	bcs.n	800056e <__udivmoddi4+0x2ae>
 800050e:	428b      	cmp	r3, r1
 8000510:	d92d      	bls.n	800056e <__udivmoddi4+0x2ae>
 8000512:	3f02      	subs	r7, #2
 8000514:	4429      	add	r1, r5
 8000516:	1acb      	subs	r3, r1, r3
 8000518:	b281      	uxth	r1, r0
 800051a:	fbb3 f0fe 	udiv	r0, r3, lr
 800051e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000522:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000526:	fb00 f308 	mul.w	r3, r0, r8
 800052a:	428b      	cmp	r3, r1
 800052c:	d907      	bls.n	800053e <__udivmoddi4+0x27e>
 800052e:	1869      	adds	r1, r5, r1
 8000530:	f100 3cff 	add.w	ip, r0, #4294967295
 8000534:	d217      	bcs.n	8000566 <__udivmoddi4+0x2a6>
 8000536:	428b      	cmp	r3, r1
 8000538:	d915      	bls.n	8000566 <__udivmoddi4+0x2a6>
 800053a:	3802      	subs	r0, #2
 800053c:	4429      	add	r1, r5
 800053e:	1ac9      	subs	r1, r1, r3
 8000540:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000544:	e73b      	b.n	80003be <__udivmoddi4+0xfe>
 8000546:	4637      	mov	r7, r6
 8000548:	4630      	mov	r0, r6
 800054a:	e709      	b.n	8000360 <__udivmoddi4+0xa0>
 800054c:	4607      	mov	r7, r0
 800054e:	e6e7      	b.n	8000320 <__udivmoddi4+0x60>
 8000550:	4618      	mov	r0, r3
 8000552:	e6fb      	b.n	800034c <__udivmoddi4+0x8c>
 8000554:	4541      	cmp	r1, r8
 8000556:	d2ab      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 8000558:	ebb8 0a02 	subs.w	sl, r8, r2
 800055c:	eb69 020e 	sbc.w	r2, r9, lr
 8000560:	3801      	subs	r0, #1
 8000562:	4613      	mov	r3, r2
 8000564:	e7a4      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000566:	4660      	mov	r0, ip
 8000568:	e7e9      	b.n	800053e <__udivmoddi4+0x27e>
 800056a:	4618      	mov	r0, r3
 800056c:	e795      	b.n	800049a <__udivmoddi4+0x1da>
 800056e:	4667      	mov	r7, ip
 8000570:	e7d1      	b.n	8000516 <__udivmoddi4+0x256>
 8000572:	4681      	mov	r9, r0
 8000574:	e77c      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000576:	3802      	subs	r0, #2
 8000578:	442c      	add	r4, r5
 800057a:	e747      	b.n	800040c <__udivmoddi4+0x14c>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	442b      	add	r3, r5
 8000582:	e72f      	b.n	80003e4 <__udivmoddi4+0x124>
 8000584:	4638      	mov	r0, r7
 8000586:	e708      	b.n	800039a <__udivmoddi4+0xda>
 8000588:	4637      	mov	r7, r6
 800058a:	e6e9      	b.n	8000360 <__udivmoddi4+0xa0>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b084      	sub	sp, #16
 8000594:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000596:	463b      	mov	r3, r7
 8000598:	2200      	movs	r2, #0
 800059a:	601a      	str	r2, [r3, #0]
 800059c:	605a      	str	r2, [r3, #4]
 800059e:	609a      	str	r2, [r3, #8]
 80005a0:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005a2:	4b2f      	ldr	r3, [pc, #188]	; (8000660 <MX_ADC1_Init+0xd0>)
 80005a4:	4a2f      	ldr	r2, [pc, #188]	; (8000664 <MX_ADC1_Init+0xd4>)
 80005a6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80005a8:	4b2d      	ldr	r3, [pc, #180]	; (8000660 <MX_ADC1_Init+0xd0>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005ae:	4b2c      	ldr	r3, [pc, #176]	; (8000660 <MX_ADC1_Init+0xd0>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80005b4:	4b2a      	ldr	r3, [pc, #168]	; (8000660 <MX_ADC1_Init+0xd0>)
 80005b6:	2201      	movs	r2, #1
 80005b8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80005ba:	4b29      	ldr	r3, [pc, #164]	; (8000660 <MX_ADC1_Init+0xd0>)
 80005bc:	2201      	movs	r2, #1
 80005be:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005c0:	4b27      	ldr	r3, [pc, #156]	; (8000660 <MX_ADC1_Init+0xd0>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005c8:	4b25      	ldr	r3, [pc, #148]	; (8000660 <MX_ADC1_Init+0xd0>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005ce:	4b24      	ldr	r3, [pc, #144]	; (8000660 <MX_ADC1_Init+0xd0>)
 80005d0:	4a25      	ldr	r2, [pc, #148]	; (8000668 <MX_ADC1_Init+0xd8>)
 80005d2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005d4:	4b22      	ldr	r3, [pc, #136]	; (8000660 <MX_ADC1_Init+0xd0>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 80005da:	4b21      	ldr	r3, [pc, #132]	; (8000660 <MX_ADC1_Init+0xd0>)
 80005dc:	2203      	movs	r2, #3
 80005de:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80005e0:	4b1f      	ldr	r3, [pc, #124]	; (8000660 <MX_ADC1_Init+0xd0>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80005e8:	4b1d      	ldr	r3, [pc, #116]	; (8000660 <MX_ADC1_Init+0xd0>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005ee:	481c      	ldr	r0, [pc, #112]	; (8000660 <MX_ADC1_Init+0xd0>)
 80005f0:	f003 fc06 	bl	8003e00 <HAL_ADC_Init>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d001      	beq.n	80005fe <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80005fa:	f001 f825 	bl	8001648 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80005fe:	230b      	movs	r3, #11
 8000600:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000602:	2301      	movs	r3, #1
 8000604:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8000606:	2301      	movs	r3, #1
 8000608:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800060a:	463b      	mov	r3, r7
 800060c:	4619      	mov	r1, r3
 800060e:	4814      	ldr	r0, [pc, #80]	; (8000660 <MX_ADC1_Init+0xd0>)
 8000610:	f003 fdc4 	bl	800419c <HAL_ADC_ConfigChannel>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d001      	beq.n	800061e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800061a:	f001 f815 	bl	8001648 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800061e:	2305      	movs	r3, #5
 8000620:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000622:	2302      	movs	r3, #2
 8000624:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000626:	463b      	mov	r3, r7
 8000628:	4619      	mov	r1, r3
 800062a:	480d      	ldr	r0, [pc, #52]	; (8000660 <MX_ADC1_Init+0xd0>)
 800062c:	f003 fdb6 	bl	800419c <HAL_ADC_ConfigChannel>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000636:	f001 f807 	bl	8001648 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 800063a:	230d      	movs	r3, #13
 800063c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 800063e:	2303      	movs	r3, #3
 8000640:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000642:	463b      	mov	r3, r7
 8000644:	4619      	mov	r1, r3
 8000646:	4806      	ldr	r0, [pc, #24]	; (8000660 <MX_ADC1_Init+0xd0>)
 8000648:	f003 fda8 	bl	800419c <HAL_ADC_ConfigChannel>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d001      	beq.n	8000656 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8000652:	f000 fff9 	bl	8001648 <Error_Handler>
  }

}
 8000656:	bf00      	nop
 8000658:	3710      	adds	r7, #16
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	200003dc 	.word	0x200003dc
 8000664:	40012000 	.word	0x40012000
 8000668:	0f000001 	.word	0x0f000001

0800066c <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b084      	sub	sp, #16
 8000670:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000672:	463b      	mov	r3, r7
 8000674:	2200      	movs	r2, #0
 8000676:	601a      	str	r2, [r3, #0]
 8000678:	605a      	str	r2, [r3, #4]
 800067a:	609a      	str	r2, [r3, #8]
 800067c:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 800067e:	4b28      	ldr	r3, [pc, #160]	; (8000720 <MX_ADC3_Init+0xb4>)
 8000680:	4a28      	ldr	r2, [pc, #160]	; (8000724 <MX_ADC3_Init+0xb8>)
 8000682:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000684:	4b26      	ldr	r3, [pc, #152]	; (8000720 <MX_ADC3_Init+0xb4>)
 8000686:	2200      	movs	r2, #0
 8000688:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800068a:	4b25      	ldr	r3, [pc, #148]	; (8000720 <MX_ADC3_Init+0xb4>)
 800068c:	2200      	movs	r2, #0
 800068e:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ENABLE;
 8000690:	4b23      	ldr	r3, [pc, #140]	; (8000720 <MX_ADC3_Init+0xb4>)
 8000692:	2201      	movs	r2, #1
 8000694:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000696:	4b22      	ldr	r3, [pc, #136]	; (8000720 <MX_ADC3_Init+0xb4>)
 8000698:	2200      	movs	r2, #0
 800069a:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800069c:	4b20      	ldr	r3, [pc, #128]	; (8000720 <MX_ADC3_Init+0xb4>)
 800069e:	2200      	movs	r2, #0
 80006a0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006a4:	4b1e      	ldr	r3, [pc, #120]	; (8000720 <MX_ADC3_Init+0xb4>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006aa:	4b1d      	ldr	r3, [pc, #116]	; (8000720 <MX_ADC3_Init+0xb4>)
 80006ac:	4a1e      	ldr	r2, [pc, #120]	; (8000728 <MX_ADC3_Init+0xbc>)
 80006ae:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006b0:	4b1b      	ldr	r3, [pc, #108]	; (8000720 <MX_ADC3_Init+0xb4>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 2;
 80006b6:	4b1a      	ldr	r3, [pc, #104]	; (8000720 <MX_ADC3_Init+0xb4>)
 80006b8:	2202      	movs	r2, #2
 80006ba:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80006bc:	4b18      	ldr	r3, [pc, #96]	; (8000720 <MX_ADC3_Init+0xb4>)
 80006be:	2200      	movs	r2, #0
 80006c0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80006c4:	4b16      	ldr	r3, [pc, #88]	; (8000720 <MX_ADC3_Init+0xb4>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80006ca:	4815      	ldr	r0, [pc, #84]	; (8000720 <MX_ADC3_Init+0xb4>)
 80006cc:	f003 fb98 	bl	8003e00 <HAL_ADC_Init>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <MX_ADC3_Init+0x6e>
  {
    Error_Handler();
 80006d6:	f000 ffb7 	bl	8001648 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80006da:	2306      	movs	r3, #6
 80006dc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80006de:	2301      	movs	r3, #1
 80006e0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80006e2:	2300      	movs	r3, #0
 80006e4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80006e6:	463b      	mov	r3, r7
 80006e8:	4619      	mov	r1, r3
 80006ea:	480d      	ldr	r0, [pc, #52]	; (8000720 <MX_ADC3_Init+0xb4>)
 80006ec:	f003 fd56 	bl	800419c <HAL_ADC_ConfigChannel>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <MX_ADC3_Init+0x8e>
  {
    Error_Handler();
 80006f6:	f000 ffa7 	bl	8001648 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80006fa:	2304      	movs	r3, #4
 80006fc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80006fe:	2302      	movs	r3, #2
 8000700:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000702:	463b      	mov	r3, r7
 8000704:	4619      	mov	r1, r3
 8000706:	4806      	ldr	r0, [pc, #24]	; (8000720 <MX_ADC3_Init+0xb4>)
 8000708:	f003 fd48 	bl	800419c <HAL_ADC_ConfigChannel>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <MX_ADC3_Init+0xaa>
  {
    Error_Handler();
 8000712:	f000 ff99 	bl	8001648 <Error_Handler>
  }

}
 8000716:	bf00      	nop
 8000718:	3710      	adds	r7, #16
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	20000424 	.word	0x20000424
 8000724:	40012200 	.word	0x40012200
 8000728:	0f000001 	.word	0x0f000001

0800072c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b08c      	sub	sp, #48	; 0x30
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000734:	f107 031c 	add.w	r3, r7, #28
 8000738:	2200      	movs	r2, #0
 800073a:	601a      	str	r2, [r3, #0]
 800073c:	605a      	str	r2, [r3, #4]
 800073e:	609a      	str	r2, [r3, #8]
 8000740:	60da      	str	r2, [r3, #12]
 8000742:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	4a3b      	ldr	r2, [pc, #236]	; (8000838 <HAL_ADC_MspInit+0x10c>)
 800074a:	4293      	cmp	r3, r2
 800074c:	d142      	bne.n	80007d4 <HAL_ADC_MspInit+0xa8>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800074e:	2300      	movs	r3, #0
 8000750:	61bb      	str	r3, [r7, #24]
 8000752:	4b3a      	ldr	r3, [pc, #232]	; (800083c <HAL_ADC_MspInit+0x110>)
 8000754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000756:	4a39      	ldr	r2, [pc, #228]	; (800083c <HAL_ADC_MspInit+0x110>)
 8000758:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800075c:	6453      	str	r3, [r2, #68]	; 0x44
 800075e:	4b37      	ldr	r3, [pc, #220]	; (800083c <HAL_ADC_MspInit+0x110>)
 8000760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000762:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000766:	61bb      	str	r3, [r7, #24]
 8000768:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800076a:	2300      	movs	r3, #0
 800076c:	617b      	str	r3, [r7, #20]
 800076e:	4b33      	ldr	r3, [pc, #204]	; (800083c <HAL_ADC_MspInit+0x110>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	4a32      	ldr	r2, [pc, #200]	; (800083c <HAL_ADC_MspInit+0x110>)
 8000774:	f043 0304 	orr.w	r3, r3, #4
 8000778:	6313      	str	r3, [r2, #48]	; 0x30
 800077a:	4b30      	ldr	r3, [pc, #192]	; (800083c <HAL_ADC_MspInit+0x110>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	f003 0304 	and.w	r3, r3, #4
 8000782:	617b      	str	r3, [r7, #20]
 8000784:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000786:	2300      	movs	r3, #0
 8000788:	613b      	str	r3, [r7, #16]
 800078a:	4b2c      	ldr	r3, [pc, #176]	; (800083c <HAL_ADC_MspInit+0x110>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	4a2b      	ldr	r2, [pc, #172]	; (800083c <HAL_ADC_MspInit+0x110>)
 8000790:	f043 0301 	orr.w	r3, r3, #1
 8000794:	6313      	str	r3, [r2, #48]	; 0x30
 8000796:	4b29      	ldr	r3, [pc, #164]	; (800083c <HAL_ADC_MspInit+0x110>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	f003 0301 	and.w	r3, r3, #1
 800079e:	613b      	str	r3, [r7, #16]
 80007a0:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    PC3     ------> ADC1_IN13
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 80007a2:	230a      	movs	r3, #10
 80007a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007a6:	2303      	movs	r3, #3
 80007a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007aa:	2300      	movs	r3, #0
 80007ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007ae:	f107 031c 	add.w	r3, r7, #28
 80007b2:	4619      	mov	r1, r3
 80007b4:	4822      	ldr	r0, [pc, #136]	; (8000840 <HAL_ADC_MspInit+0x114>)
 80007b6:	f004 fd75 	bl	80052a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80007ba:	2320      	movs	r3, #32
 80007bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007be:	2303      	movs	r3, #3
 80007c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c2:	2300      	movs	r3, #0
 80007c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007c6:	f107 031c 	add.w	r3, r7, #28
 80007ca:	4619      	mov	r1, r3
 80007cc:	481d      	ldr	r0, [pc, #116]	; (8000844 <HAL_ADC_MspInit+0x118>)
 80007ce:	f004 fd69 	bl	80052a4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 80007d2:	e02d      	b.n	8000830 <HAL_ADC_MspInit+0x104>
  else if(adcHandle->Instance==ADC3)
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	4a1b      	ldr	r2, [pc, #108]	; (8000848 <HAL_ADC_MspInit+0x11c>)
 80007da:	4293      	cmp	r3, r2
 80007dc:	d128      	bne.n	8000830 <HAL_ADC_MspInit+0x104>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	60fb      	str	r3, [r7, #12]
 80007e2:	4b16      	ldr	r3, [pc, #88]	; (800083c <HAL_ADC_MspInit+0x110>)
 80007e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007e6:	4a15      	ldr	r2, [pc, #84]	; (800083c <HAL_ADC_MspInit+0x110>)
 80007e8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80007ec:	6453      	str	r3, [r2, #68]	; 0x44
 80007ee:	4b13      	ldr	r3, [pc, #76]	; (800083c <HAL_ADC_MspInit+0x110>)
 80007f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80007f6:	60fb      	str	r3, [r7, #12]
 80007f8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80007fa:	2300      	movs	r3, #0
 80007fc:	60bb      	str	r3, [r7, #8]
 80007fe:	4b0f      	ldr	r3, [pc, #60]	; (800083c <HAL_ADC_MspInit+0x110>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	4a0e      	ldr	r2, [pc, #56]	; (800083c <HAL_ADC_MspInit+0x110>)
 8000804:	f043 0320 	orr.w	r3, r3, #32
 8000808:	6313      	str	r3, [r2, #48]	; 0x30
 800080a:	4b0c      	ldr	r3, [pc, #48]	; (800083c <HAL_ADC_MspInit+0x110>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	f003 0320 	and.w	r3, r3, #32
 8000812:	60bb      	str	r3, [r7, #8]
 8000814:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8;
 8000816:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800081a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800081c:	2303      	movs	r3, #3
 800081e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000820:	2300      	movs	r3, #0
 8000822:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000824:	f107 031c 	add.w	r3, r7, #28
 8000828:	4619      	mov	r1, r3
 800082a:	4808      	ldr	r0, [pc, #32]	; (800084c <HAL_ADC_MspInit+0x120>)
 800082c:	f004 fd3a 	bl	80052a4 <HAL_GPIO_Init>
}
 8000830:	bf00      	nop
 8000832:	3730      	adds	r7, #48	; 0x30
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	40012000 	.word	0x40012000
 800083c:	40023800 	.word	0x40023800
 8000840:	40020800 	.word	0x40020800
 8000844:	40020000 	.word	0x40020000
 8000848:	40012200 	.word	0x40012200
 800084c:	40021400 	.word	0x40021400

08000850 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0

  hcrc.Instance = CRC;
 8000854:	4b06      	ldr	r3, [pc, #24]	; (8000870 <MX_CRC_Init+0x20>)
 8000856:	4a07      	ldr	r2, [pc, #28]	; (8000874 <MX_CRC_Init+0x24>)
 8000858:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800085a:	4805      	ldr	r0, [pc, #20]	; (8000870 <MX_CRC_Init+0x20>)
 800085c:	f003 ffae 	bl	80047bc <HAL_CRC_Init>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d001      	beq.n	800086a <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000866:	f000 feef 	bl	8001648 <Error_Handler>
  }

}
 800086a:	bf00      	nop
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	2000046c 	.word	0x2000046c
 8000874:	40023000 	.word	0x40023000

08000878 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000878:	b480      	push	{r7}
 800087a:	b085      	sub	sp, #20
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	4a0b      	ldr	r2, [pc, #44]	; (80008b4 <HAL_CRC_MspInit+0x3c>)
 8000886:	4293      	cmp	r3, r2
 8000888:	d10d      	bne.n	80008a6 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800088a:	2300      	movs	r3, #0
 800088c:	60fb      	str	r3, [r7, #12]
 800088e:	4b0a      	ldr	r3, [pc, #40]	; (80008b8 <HAL_CRC_MspInit+0x40>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	4a09      	ldr	r2, [pc, #36]	; (80008b8 <HAL_CRC_MspInit+0x40>)
 8000894:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000898:	6313      	str	r3, [r2, #48]	; 0x30
 800089a:	4b07      	ldr	r3, [pc, #28]	; (80008b8 <HAL_CRC_MspInit+0x40>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80008a2:	60fb      	str	r3, [r7, #12]
 80008a4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80008a6:	bf00      	nop
 80008a8:	3714      	adds	r7, #20
 80008aa:	46bd      	mov	sp, r7
 80008ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b0:	4770      	bx	lr
 80008b2:	bf00      	nop
 80008b4:	40023000 	.word	0x40023000
 80008b8:	40023800 	.word	0x40023800

080008bc <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0

  hdma2d.Instance = DMA2D;
 80008c0:	4b15      	ldr	r3, [pc, #84]	; (8000918 <MX_DMA2D_Init+0x5c>)
 80008c2:	4a16      	ldr	r2, [pc, #88]	; (800091c <MX_DMA2D_Init+0x60>)
 80008c4:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80008c6:	4b14      	ldr	r3, [pc, #80]	; (8000918 <MX_DMA2D_Init+0x5c>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 80008cc:	4b12      	ldr	r3, [pc, #72]	; (8000918 <MX_DMA2D_Init+0x5c>)
 80008ce:	2202      	movs	r2, #2
 80008d0:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80008d2:	4b11      	ldr	r3, [pc, #68]	; (8000918 <MX_DMA2D_Init+0x5c>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80008d8:	4b0f      	ldr	r3, [pc, #60]	; (8000918 <MX_DMA2D_Init+0x5c>)
 80008da:	2200      	movs	r2, #0
 80008dc:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 80008de:	4b0e      	ldr	r3, [pc, #56]	; (8000918 <MX_DMA2D_Init+0x5c>)
 80008e0:	2202      	movs	r2, #2
 80008e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80008e4:	4b0c      	ldr	r3, [pc, #48]	; (8000918 <MX_DMA2D_Init+0x5c>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80008ea:	4b0b      	ldr	r3, [pc, #44]	; (8000918 <MX_DMA2D_Init+0x5c>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80008f0:	4809      	ldr	r0, [pc, #36]	; (8000918 <MX_DMA2D_Init+0x5c>)
 80008f2:	f004 f93b 	bl	8004b6c <HAL_DMA2D_Init>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d001      	beq.n	8000900 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 80008fc:	f000 fea4 	bl	8001648 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000900:	2101      	movs	r1, #1
 8000902:	4805      	ldr	r0, [pc, #20]	; (8000918 <MX_DMA2D_Init+0x5c>)
 8000904:	f004 fba0 	bl	8005048 <HAL_DMA2D_ConfigLayer>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 800090e:	f000 fe9b 	bl	8001648 <Error_Handler>
  }

}
 8000912:	bf00      	nop
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	20000474 	.word	0x20000474
 800091c:	4002b000 	.word	0x4002b000

08000920 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b084      	sub	sp, #16
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	4a0e      	ldr	r2, [pc, #56]	; (8000968 <HAL_DMA2D_MspInit+0x48>)
 800092e:	4293      	cmp	r3, r2
 8000930:	d115      	bne.n	800095e <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000932:	2300      	movs	r3, #0
 8000934:	60fb      	str	r3, [r7, #12]
 8000936:	4b0d      	ldr	r3, [pc, #52]	; (800096c <HAL_DMA2D_MspInit+0x4c>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093a:	4a0c      	ldr	r2, [pc, #48]	; (800096c <HAL_DMA2D_MspInit+0x4c>)
 800093c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000940:	6313      	str	r3, [r2, #48]	; 0x30
 8000942:	4b0a      	ldr	r3, [pc, #40]	; (800096c <HAL_DMA2D_MspInit+0x4c>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000946:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800094a:	60fb      	str	r3, [r7, #12]
 800094c:	68fb      	ldr	r3, [r7, #12]

    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 800094e:	2200      	movs	r2, #0
 8000950:	2105      	movs	r1, #5
 8000952:	205a      	movs	r0, #90	; 0x5a
 8000954:	f003 ff08 	bl	8004768 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000958:	205a      	movs	r0, #90	; 0x5a
 800095a:	f003 ff21 	bl	80047a0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 800095e:	bf00      	nop
 8000960:	3710      	adds	r7, #16
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	4002b000 	.word	0x4002b000
 800096c:	40023800 	.word	0x40023800

08000970 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b088      	sub	sp, #32
 8000974:	af00      	add	r7, sp, #0
  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000976:	1d3b      	adds	r3, r7, #4
 8000978:	2200      	movs	r2, #0
 800097a:	601a      	str	r2, [r3, #0]
 800097c:	605a      	str	r2, [r3, #4]
 800097e:	609a      	str	r2, [r3, #8]
 8000980:	60da      	str	r2, [r3, #12]
 8000982:	611a      	str	r2, [r3, #16]
 8000984:	615a      	str	r2, [r3, #20]
 8000986:	619a      	str	r2, [r3, #24]

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000988:	4b1f      	ldr	r3, [pc, #124]	; (8000a08 <MX_FMC_Init+0x98>)
 800098a:	4a20      	ldr	r2, [pc, #128]	; (8000a0c <MX_FMC_Init+0x9c>)
 800098c:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 800098e:	4b1e      	ldr	r3, [pc, #120]	; (8000a08 <MX_FMC_Init+0x98>)
 8000990:	2201      	movs	r2, #1
 8000992:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000994:	4b1c      	ldr	r3, [pc, #112]	; (8000a08 <MX_FMC_Init+0x98>)
 8000996:	2200      	movs	r2, #0
 8000998:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800099a:	4b1b      	ldr	r3, [pc, #108]	; (8000a08 <MX_FMC_Init+0x98>)
 800099c:	2204      	movs	r2, #4
 800099e:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80009a0:	4b19      	ldr	r3, [pc, #100]	; (8000a08 <MX_FMC_Init+0x98>)
 80009a2:	2210      	movs	r2, #16
 80009a4:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80009a6:	4b18      	ldr	r3, [pc, #96]	; (8000a08 <MX_FMC_Init+0x98>)
 80009a8:	2240      	movs	r2, #64	; 0x40
 80009aa:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 80009ac:	4b16      	ldr	r3, [pc, #88]	; (8000a08 <MX_FMC_Init+0x98>)
 80009ae:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80009b2:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80009b4:	4b14      	ldr	r3, [pc, #80]	; (8000a08 <MX_FMC_Init+0x98>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 80009ba:	4b13      	ldr	r3, [pc, #76]	; (8000a08 <MX_FMC_Init+0x98>)
 80009bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80009c0:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 80009c2:	4b11      	ldr	r3, [pc, #68]	; (8000a08 <MX_FMC_Init+0x98>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 80009c8:	4b0f      	ldr	r3, [pc, #60]	; (8000a08 <MX_FMC_Init+0x98>)
 80009ca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80009ce:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 80009d0:	2302      	movs	r3, #2
 80009d2:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 80009d4:	2307      	movs	r3, #7
 80009d6:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 80009d8:	2304      	movs	r3, #4
 80009da:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 80009dc:	2307      	movs	r3, #7
 80009de:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 80009e0:	2303      	movs	r3, #3
 80009e2:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 80009e4:	2302      	movs	r3, #2
 80009e6:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 80009e8:	2302      	movs	r3, #2
 80009ea:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80009ec:	1d3b      	adds	r3, r7, #4
 80009ee:	4619      	mov	r1, r3
 80009f0:	4805      	ldr	r0, [pc, #20]	; (8000a08 <MX_FMC_Init+0x98>)
 80009f2:	f007 f8cd 	bl	8007b90 <HAL_SDRAM_Init>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 80009fc:	f000 fe24 	bl	8001648 <Error_Handler>
  }

}
 8000a00:	bf00      	nop
 8000a02:	3720      	adds	r7, #32
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	200004b4 	.word	0x200004b4
 8000a0c:	a0000140 	.word	0xa0000140

08000a10 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b086      	sub	sp, #24
 8000a14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a16:	1d3b      	adds	r3, r7, #4
 8000a18:	2200      	movs	r2, #0
 8000a1a:	601a      	str	r2, [r3, #0]
 8000a1c:	605a      	str	r2, [r3, #4]
 8000a1e:	609a      	str	r2, [r3, #8]
 8000a20:	60da      	str	r2, [r3, #12]
 8000a22:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8000a24:	4b3b      	ldr	r3, [pc, #236]	; (8000b14 <HAL_FMC_MspInit+0x104>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d16f      	bne.n	8000b0c <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8000a2c:	4b39      	ldr	r3, [pc, #228]	; (8000b14 <HAL_FMC_MspInit+0x104>)
 8000a2e:	2201      	movs	r2, #1
 8000a30:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8000a32:	2300      	movs	r3, #0
 8000a34:	603b      	str	r3, [r7, #0]
 8000a36:	4b38      	ldr	r3, [pc, #224]	; (8000b18 <HAL_FMC_MspInit+0x108>)
 8000a38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000a3a:	4a37      	ldr	r2, [pc, #220]	; (8000b18 <HAL_FMC_MspInit+0x108>)
 8000a3c:	f043 0301 	orr.w	r3, r3, #1
 8000a40:	6393      	str	r3, [r2, #56]	; 0x38
 8000a42:	4b35      	ldr	r3, [pc, #212]	; (8000b18 <HAL_FMC_MspInit+0x108>)
 8000a44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000a46:	f003 0301 	and.w	r3, r3, #1
 8000a4a:	603b      	str	r3, [r7, #0]
 8000a4c:	683b      	ldr	r3, [r7, #0]
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8000a4e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8000a52:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a54:	2302      	movs	r3, #2
 8000a56:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a5c:	2303      	movs	r3, #3
 8000a5e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a60:	230c      	movs	r3, #12
 8000a62:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000a64:	1d3b      	adds	r3, r7, #4
 8000a66:	4619      	mov	r1, r3
 8000a68:	482c      	ldr	r0, [pc, #176]	; (8000b1c <HAL_FMC_MspInit+0x10c>)
 8000a6a:	f004 fc1b 	bl	80052a4 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 8000a6e:	2301      	movs	r3, #1
 8000a70:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a72:	2302      	movs	r3, #2
 8000a74:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a76:	2300      	movs	r3, #0
 8000a78:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a7a:	2303      	movs	r3, #3
 8000a7c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a7e:	230c      	movs	r3, #12
 8000a80:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8000a82:	1d3b      	adds	r3, r7, #4
 8000a84:	4619      	mov	r1, r3
 8000a86:	4826      	ldr	r0, [pc, #152]	; (8000b20 <HAL_FMC_MspInit+0x110>)
 8000a88:	f004 fc0c 	bl	80052a4 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8000a8c:	f248 1333 	movw	r3, #33075	; 0x8133
 8000a90:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a92:	2302      	movs	r3, #2
 8000a94:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a96:	2300      	movs	r3, #0
 8000a98:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a9a:	2303      	movs	r3, #3
 8000a9c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a9e:	230c      	movs	r3, #12
 8000aa0:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000aa2:	1d3b      	adds	r3, r7, #4
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	481f      	ldr	r0, [pc, #124]	; (8000b24 <HAL_FMC_MspInit+0x114>)
 8000aa8:	f004 fbfc 	bl	80052a4 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8000aac:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000ab0:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab2:	2302      	movs	r3, #2
 8000ab4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aba:	2303      	movs	r3, #3
 8000abc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000abe:	230c      	movs	r3, #12
 8000ac0:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ac2:	1d3b      	adds	r3, r7, #4
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	4818      	ldr	r0, [pc, #96]	; (8000b28 <HAL_FMC_MspInit+0x118>)
 8000ac8:	f004 fbec 	bl	80052a4 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8000acc:	f24c 7303 	movw	r3, #50947	; 0xc703
 8000ad0:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad2:	2302      	movs	r3, #2
 8000ad4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ada:	2303      	movs	r3, #3
 8000adc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000ade:	230c      	movs	r3, #12
 8000ae0:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ae2:	1d3b      	adds	r3, r7, #4
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	4811      	ldr	r0, [pc, #68]	; (8000b2c <HAL_FMC_MspInit+0x11c>)
 8000ae8:	f004 fbdc 	bl	80052a4 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8000aec:	2360      	movs	r3, #96	; 0x60
 8000aee:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af0:	2302      	movs	r3, #2
 8000af2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af4:	2300      	movs	r3, #0
 8000af6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000af8:	2303      	movs	r3, #3
 8000afa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000afc:	230c      	movs	r3, #12
 8000afe:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b00:	1d3b      	adds	r3, r7, #4
 8000b02:	4619      	mov	r1, r3
 8000b04:	480a      	ldr	r0, [pc, #40]	; (8000b30 <HAL_FMC_MspInit+0x120>)
 8000b06:	f004 fbcd 	bl	80052a4 <HAL_GPIO_Init>
 8000b0a:	e000      	b.n	8000b0e <HAL_FMC_MspInit+0xfe>
    return;
 8000b0c:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8000b0e:	3718      	adds	r7, #24
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	20000208 	.word	0x20000208
 8000b18:	40023800 	.word	0x40023800
 8000b1c:	40021400 	.word	0x40021400
 8000b20:	40020800 	.word	0x40020800
 8000b24:	40021800 	.word	0x40021800
 8000b28:	40021000 	.word	0x40021000
 8000b2c:	40020c00 	.word	0x40020c00
 8000b30:	40020400 	.word	0x40020400

08000b34 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b082      	sub	sp, #8
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8000b3c:	f7ff ff68 	bl	8000a10 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8000b40:	bf00      	nop
 8000b42:	3708      	adds	r7, #8
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}

08000b48 <MX_GPIO_Init>:
     PB13   ------> USB_OTG_HS_VBUS
     PB14   ------> USB_OTG_HS_DM
     PB15   ------> USB_OTG_HS_DP
*/
void MX_GPIO_Init(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b08e      	sub	sp, #56	; 0x38
 8000b4c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b52:	2200      	movs	r2, #0
 8000b54:	601a      	str	r2, [r3, #0]
 8000b56:	605a      	str	r2, [r3, #4]
 8000b58:	609a      	str	r2, [r3, #8]
 8000b5a:	60da      	str	r2, [r3, #12]
 8000b5c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b5e:	2300      	movs	r3, #0
 8000b60:	623b      	str	r3, [r7, #32]
 8000b62:	4b89      	ldr	r3, [pc, #548]	; (8000d88 <MX_GPIO_Init+0x240>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b66:	4a88      	ldr	r2, [pc, #544]	; (8000d88 <MX_GPIO_Init+0x240>)
 8000b68:	f043 0304 	orr.w	r3, r3, #4
 8000b6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b6e:	4b86      	ldr	r3, [pc, #536]	; (8000d88 <MX_GPIO_Init+0x240>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b72:	f003 0304 	and.w	r3, r3, #4
 8000b76:	623b      	str	r3, [r7, #32]
 8000b78:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	61fb      	str	r3, [r7, #28]
 8000b7e:	4b82      	ldr	r3, [pc, #520]	; (8000d88 <MX_GPIO_Init+0x240>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b82:	4a81      	ldr	r2, [pc, #516]	; (8000d88 <MX_GPIO_Init+0x240>)
 8000b84:	f043 0320 	orr.w	r3, r3, #32
 8000b88:	6313      	str	r3, [r2, #48]	; 0x30
 8000b8a:	4b7f      	ldr	r3, [pc, #508]	; (8000d88 <MX_GPIO_Init+0x240>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8e:	f003 0320 	and.w	r3, r3, #32
 8000b92:	61fb      	str	r3, [r7, #28]
 8000b94:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b96:	2300      	movs	r3, #0
 8000b98:	61bb      	str	r3, [r7, #24]
 8000b9a:	4b7b      	ldr	r3, [pc, #492]	; (8000d88 <MX_GPIO_Init+0x240>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9e:	4a7a      	ldr	r2, [pc, #488]	; (8000d88 <MX_GPIO_Init+0x240>)
 8000ba0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ba4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba6:	4b78      	ldr	r3, [pc, #480]	; (8000d88 <MX_GPIO_Init+0x240>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000baa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bae:	61bb      	str	r3, [r7, #24]
 8000bb0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	617b      	str	r3, [r7, #20]
 8000bb6:	4b74      	ldr	r3, [pc, #464]	; (8000d88 <MX_GPIO_Init+0x240>)
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bba:	4a73      	ldr	r2, [pc, #460]	; (8000d88 <MX_GPIO_Init+0x240>)
 8000bbc:	f043 0301 	orr.w	r3, r3, #1
 8000bc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bc2:	4b71      	ldr	r3, [pc, #452]	; (8000d88 <MX_GPIO_Init+0x240>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc6:	f003 0301 	and.w	r3, r3, #1
 8000bca:	617b      	str	r3, [r7, #20]
 8000bcc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bce:	2300      	movs	r3, #0
 8000bd0:	613b      	str	r3, [r7, #16]
 8000bd2:	4b6d      	ldr	r3, [pc, #436]	; (8000d88 <MX_GPIO_Init+0x240>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd6:	4a6c      	ldr	r2, [pc, #432]	; (8000d88 <MX_GPIO_Init+0x240>)
 8000bd8:	f043 0302 	orr.w	r3, r3, #2
 8000bdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bde:	4b6a      	ldr	r3, [pc, #424]	; (8000d88 <MX_GPIO_Init+0x240>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be2:	f003 0302 	and.w	r3, r3, #2
 8000be6:	613b      	str	r3, [r7, #16]
 8000be8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bea:	2300      	movs	r3, #0
 8000bec:	60fb      	str	r3, [r7, #12]
 8000bee:	4b66      	ldr	r3, [pc, #408]	; (8000d88 <MX_GPIO_Init+0x240>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf2:	4a65      	ldr	r2, [pc, #404]	; (8000d88 <MX_GPIO_Init+0x240>)
 8000bf4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bf8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bfa:	4b63      	ldr	r3, [pc, #396]	; (8000d88 <MX_GPIO_Init+0x240>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c02:	60fb      	str	r3, [r7, #12]
 8000c04:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c06:	2300      	movs	r3, #0
 8000c08:	60bb      	str	r3, [r7, #8]
 8000c0a:	4b5f      	ldr	r3, [pc, #380]	; (8000d88 <MX_GPIO_Init+0x240>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0e:	4a5e      	ldr	r2, [pc, #376]	; (8000d88 <MX_GPIO_Init+0x240>)
 8000c10:	f043 0310 	orr.w	r3, r3, #16
 8000c14:	6313      	str	r3, [r2, #48]	; 0x30
 8000c16:	4b5c      	ldr	r3, [pc, #368]	; (8000d88 <MX_GPIO_Init+0x240>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1a:	f003 0310 	and.w	r3, r3, #16
 8000c1e:	60bb      	str	r3, [r7, #8]
 8000c20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c22:	2300      	movs	r3, #0
 8000c24:	607b      	str	r3, [r7, #4]
 8000c26:	4b58      	ldr	r3, [pc, #352]	; (8000d88 <MX_GPIO_Init+0x240>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2a:	4a57      	ldr	r2, [pc, #348]	; (8000d88 <MX_GPIO_Init+0x240>)
 8000c2c:	f043 0308 	orr.w	r3, r3, #8
 8000c30:	6313      	str	r3, [r2, #48]	; 0x30
 8000c32:	4b55      	ldr	r3, [pc, #340]	; (8000d88 <MX_GPIO_Init+0x240>)
 8000c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c36:	f003 0308 	and.w	r3, r3, #8
 8000c3a:	607b      	str	r3, [r7, #4]
 8000c3c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8000c3e:	2200      	movs	r2, #0
 8000c40:	2114      	movs	r1, #20
 8000c42:	4852      	ldr	r0, [pc, #328]	; (8000d8c <MX_GPIO_Init+0x244>)
 8000c44:	f004 fde2 	bl	800580c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8000c48:	2200      	movs	r2, #0
 8000c4a:	2180      	movs	r1, #128	; 0x80
 8000c4c:	4850      	ldr	r0, [pc, #320]	; (8000d90 <MX_GPIO_Init+0x248>)
 8000c4e:	f004 fddd 	bl	800580c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8000c52:	2200      	movs	r2, #0
 8000c54:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000c58:	484e      	ldr	r0, [pc, #312]	; (8000d94 <MX_GPIO_Init+0x24c>)
 8000c5a:	f004 fdd7 	bl	800580c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8000c5e:	2200      	movs	r2, #0
 8000c60:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000c64:	484c      	ldr	r0, [pc, #304]	; (8000d98 <MX_GPIO_Init+0x250>)
 8000c66:	f004 fdd1 	bl	800580c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = CSX_Pin|OTG_FS_PSO_Pin;
 8000c6a:	2314      	movs	r3, #20
 8000c6c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c6e:	2301      	movs	r3, #1
 8000c70:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c72:	2300      	movs	r3, #0
 8000c74:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c76:	2300      	movs	r3, #0
 8000c78:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c7e:	4619      	mov	r1, r3
 8000c80:	4842      	ldr	r0, [pc, #264]	; (8000d8c <MX_GPIO_Init+0x244>)
 8000c82:	f004 fb0f 	bl	80052a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8000c86:	f248 0307 	movw	r3, #32775	; 0x8007
 8000c8a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000c8c:	4b43      	ldr	r3, [pc, #268]	; (8000d9c <MX_GPIO_Init+0x254>)
 8000c8e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c90:	2300      	movs	r3, #0
 8000c92:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c98:	4619      	mov	r1, r3
 8000c9a:	483d      	ldr	r0, [pc, #244]	; (8000d90 <MX_GPIO_Init+0x248>)
 8000c9c:	f004 fb02 	bl	80052a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8000ca0:	2380      	movs	r3, #128	; 0x80
 8000ca2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cac:	2300      	movs	r3, #0
 8000cae:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8000cb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	4836      	ldr	r0, [pc, #216]	; (8000d90 <MX_GPIO_Init+0x248>)
 8000cb8:	f004 faf4 	bl	80052a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8000cbc:	2320      	movs	r3, #32
 8000cbe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000cc0:	4b36      	ldr	r3, [pc, #216]	; (8000d9c <MX_GPIO_Init+0x254>)
 8000cc2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8000cc8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ccc:	4619      	mov	r1, r3
 8000cce:	482f      	ldr	r0, [pc, #188]	; (8000d8c <MX_GPIO_Init+0x244>)
 8000cd0:	f004 fae8 	bl	80052a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000cd4:	2304      	movs	r3, #4
 8000cd6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000ce0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	482e      	ldr	r0, [pc, #184]	; (8000da0 <MX_GPIO_Init+0x258>)
 8000ce8:	f004 fadc 	bl	80052a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8000cec:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 8000cf0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf2:	2302      	movs	r3, #2
 8000cf4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8000cfe:	230c      	movs	r3, #12
 8000d00:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d06:	4619      	mov	r1, r3
 8000d08:	4825      	ldr	r0, [pc, #148]	; (8000da0 <MX_GPIO_Init+0x258>)
 8000d0a:	f004 facb 	bl	80052a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8000d0e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d12:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d14:	2300      	movs	r3, #0
 8000d16:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8000d1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d20:	4619      	mov	r1, r3
 8000d22:	481f      	ldr	r0, [pc, #124]	; (8000da0 <MX_GPIO_Init+0x258>)
 8000d24:	f004 fabe 	bl	80052a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TE_Pin;
 8000d28:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000d2c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d32:	2300      	movs	r3, #0
 8000d34:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8000d36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	4815      	ldr	r0, [pc, #84]	; (8000d94 <MX_GPIO_Init+0x24c>)
 8000d3e:	f004 fab1 	bl	80052a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8000d42:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000d46:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d48:	2301      	movs	r3, #1
 8000d4a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d50:	2300      	movs	r3, #0
 8000d52:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d58:	4619      	mov	r1, r3
 8000d5a:	480e      	ldr	r0, [pc, #56]	; (8000d94 <MX_GPIO_Init+0x24c>)
 8000d5c:	f004 faa2 	bl	80052a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8000d60:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000d64:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d66:	2301      	movs	r3, #1
 8000d68:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d76:	4619      	mov	r1, r3
 8000d78:	4807      	ldr	r0, [pc, #28]	; (8000d98 <MX_GPIO_Init+0x250>)
 8000d7a:	f004 fa93 	bl	80052a4 <HAL_GPIO_Init>

}
 8000d7e:	bf00      	nop
 8000d80:	3738      	adds	r7, #56	; 0x38
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	40023800 	.word	0x40023800
 8000d8c:	40020800 	.word	0x40020800
 8000d90:	40020000 	.word	0x40020000
 8000d94:	40020c00 	.word	0x40020c00
 8000d98:	40021800 	.word	0x40021800
 8000d9c:	10120000 	.word	0x10120000
 8000da0:	40020400 	.word	0x40020400

08000da4 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	af00      	add	r7, sp, #0

  hi2c3.Instance = I2C3;
 8000da8:	4b1b      	ldr	r3, [pc, #108]	; (8000e18 <MX_I2C3_Init+0x74>)
 8000daa:	4a1c      	ldr	r2, [pc, #112]	; (8000e1c <MX_I2C3_Init+0x78>)
 8000dac:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8000dae:	4b1a      	ldr	r3, [pc, #104]	; (8000e18 <MX_I2C3_Init+0x74>)
 8000db0:	4a1b      	ldr	r2, [pc, #108]	; (8000e20 <MX_I2C3_Init+0x7c>)
 8000db2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000db4:	4b18      	ldr	r3, [pc, #96]	; (8000e18 <MX_I2C3_Init+0x74>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000dba:	4b17      	ldr	r3, [pc, #92]	; (8000e18 <MX_I2C3_Init+0x74>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000dc0:	4b15      	ldr	r3, [pc, #84]	; (8000e18 <MX_I2C3_Init+0x74>)
 8000dc2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000dc6:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000dc8:	4b13      	ldr	r3, [pc, #76]	; (8000e18 <MX_I2C3_Init+0x74>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000dce:	4b12      	ldr	r3, [pc, #72]	; (8000e18 <MX_I2C3_Init+0x74>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000dd4:	4b10      	ldr	r3, [pc, #64]	; (8000e18 <MX_I2C3_Init+0x74>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000dda:	4b0f      	ldr	r3, [pc, #60]	; (8000e18 <MX_I2C3_Init+0x74>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000de0:	480d      	ldr	r0, [pc, #52]	; (8000e18 <MX_I2C3_Init+0x74>)
 8000de2:	f004 fd47 	bl	8005874 <HAL_I2C_Init>
 8000de6:	4603      	mov	r3, r0
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d001      	beq.n	8000df0 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000dec:	f000 fc2c 	bl	8001648 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000df0:	2100      	movs	r1, #0
 8000df2:	4809      	ldr	r0, [pc, #36]	; (8000e18 <MX_I2C3_Init+0x74>)
 8000df4:	f005 fd2f 	bl	8006856 <HAL_I2CEx_ConfigAnalogFilter>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d001      	beq.n	8000e02 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8000dfe:	f000 fc23 	bl	8001648 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000e02:	2100      	movs	r1, #0
 8000e04:	4804      	ldr	r0, [pc, #16]	; (8000e18 <MX_I2C3_Init+0x74>)
 8000e06:	f005 fd62 	bl	80068ce <HAL_I2CEx_ConfigDigitalFilter>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d001      	beq.n	8000e14 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8000e10:	f000 fc1a 	bl	8001648 <Error_Handler>
  }

}
 8000e14:	bf00      	nop
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	200004e8 	.word	0x200004e8
 8000e1c:	40005c00 	.word	0x40005c00
 8000e20:	000186a0 	.word	0x000186a0

08000e24 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b08a      	sub	sp, #40	; 0x28
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e2c:	f107 0314 	add.w	r3, r7, #20
 8000e30:	2200      	movs	r2, #0
 8000e32:	601a      	str	r2, [r3, #0]
 8000e34:	605a      	str	r2, [r3, #4]
 8000e36:	609a      	str	r2, [r3, #8]
 8000e38:	60da      	str	r2, [r3, #12]
 8000e3a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C3)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4a29      	ldr	r2, [pc, #164]	; (8000ee8 <HAL_I2C_MspInit+0xc4>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d14b      	bne.n	8000ede <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e46:	2300      	movs	r3, #0
 8000e48:	613b      	str	r3, [r7, #16]
 8000e4a:	4b28      	ldr	r3, [pc, #160]	; (8000eec <HAL_I2C_MspInit+0xc8>)
 8000e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4e:	4a27      	ldr	r2, [pc, #156]	; (8000eec <HAL_I2C_MspInit+0xc8>)
 8000e50:	f043 0304 	orr.w	r3, r3, #4
 8000e54:	6313      	str	r3, [r2, #48]	; 0x30
 8000e56:	4b25      	ldr	r3, [pc, #148]	; (8000eec <HAL_I2C_MspInit+0xc8>)
 8000e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5a:	f003 0304 	and.w	r3, r3, #4
 8000e5e:	613b      	str	r3, [r7, #16]
 8000e60:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e62:	2300      	movs	r3, #0
 8000e64:	60fb      	str	r3, [r7, #12]
 8000e66:	4b21      	ldr	r3, [pc, #132]	; (8000eec <HAL_I2C_MspInit+0xc8>)
 8000e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6a:	4a20      	ldr	r2, [pc, #128]	; (8000eec <HAL_I2C_MspInit+0xc8>)
 8000e6c:	f043 0301 	orr.w	r3, r3, #1
 8000e70:	6313      	str	r3, [r2, #48]	; 0x30
 8000e72:	4b1e      	ldr	r3, [pc, #120]	; (8000eec <HAL_I2C_MspInit+0xc8>)
 8000e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e76:	f003 0301 	and.w	r3, r3, #1
 8000e7a:	60fb      	str	r3, [r7, #12]
 8000e7c:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8000e7e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e84:	2312      	movs	r3, #18
 8000e86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e88:	2301      	movs	r3, #1
 8000e8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000e90:	2304      	movs	r3, #4
 8000e92:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8000e94:	f107 0314 	add.w	r3, r7, #20
 8000e98:	4619      	mov	r1, r3
 8000e9a:	4815      	ldr	r0, [pc, #84]	; (8000ef0 <HAL_I2C_MspInit+0xcc>)
 8000e9c:	f004 fa02 	bl	80052a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8000ea0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ea4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ea6:	2312      	movs	r3, #18
 8000ea8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000eaa:	2301      	movs	r3, #1
 8000eac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000eb2:	2304      	movs	r3, #4
 8000eb4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8000eb6:	f107 0314 	add.w	r3, r7, #20
 8000eba:	4619      	mov	r1, r3
 8000ebc:	480d      	ldr	r0, [pc, #52]	; (8000ef4 <HAL_I2C_MspInit+0xd0>)
 8000ebe:	f004 f9f1 	bl	80052a4 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	60bb      	str	r3, [r7, #8]
 8000ec6:	4b09      	ldr	r3, [pc, #36]	; (8000eec <HAL_I2C_MspInit+0xc8>)
 8000ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eca:	4a08      	ldr	r2, [pc, #32]	; (8000eec <HAL_I2C_MspInit+0xc8>)
 8000ecc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000ed0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ed2:	4b06      	ldr	r3, [pc, #24]	; (8000eec <HAL_I2C_MspInit+0xc8>)
 8000ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000eda:	60bb      	str	r3, [r7, #8]
 8000edc:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8000ede:	bf00      	nop
 8000ee0:	3728      	adds	r7, #40	; 0x28
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	40005c00 	.word	0x40005c00
 8000eec:	40023800 	.word	0x40023800
 8000ef0:	40020800 	.word	0x40020800
 8000ef4:	40020000 	.word	0x40020000

08000ef8 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C3)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4a0b      	ldr	r2, [pc, #44]	; (8000f34 <HAL_I2C_MspDeInit+0x3c>)
 8000f06:	4293      	cmp	r3, r2
 8000f08:	d10f      	bne.n	8000f2a <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C3_MspDeInit 0 */

  /* USER CODE END I2C3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C3_CLK_DISABLE();
 8000f0a:	4b0b      	ldr	r3, [pc, #44]	; (8000f38 <HAL_I2C_MspDeInit+0x40>)
 8000f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f0e:	4a0a      	ldr	r2, [pc, #40]	; (8000f38 <HAL_I2C_MspDeInit+0x40>)
 8000f10:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000f14:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    HAL_GPIO_DeInit(I2C3_SDA_GPIO_Port, I2C3_SDA_Pin);
 8000f16:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f1a:	4808      	ldr	r0, [pc, #32]	; (8000f3c <HAL_I2C_MspDeInit+0x44>)
 8000f1c:	f004 fb6c 	bl	80055f8 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(I2C3_SCL_GPIO_Port, I2C3_SCL_Pin);
 8000f20:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f24:	4806      	ldr	r0, [pc, #24]	; (8000f40 <HAL_I2C_MspDeInit+0x48>)
 8000f26:	f004 fb67 	bl	80055f8 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }
}
 8000f2a:	bf00      	nop
 8000f2c:	3708      	adds	r7, #8
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	40005c00 	.word	0x40005c00
 8000f38:	40023800 	.word	0x40023800
 8000f3c:	40020800 	.word	0x40020800
 8000f40:	40020000 	.word	0x40020000

08000f44 <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b09a      	sub	sp, #104	; 0x68
 8000f48:	af00      	add	r7, sp, #0
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000f4a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000f4e:	2234      	movs	r2, #52	; 0x34
 8000f50:	2100      	movs	r1, #0
 8000f52:	4618      	mov	r0, r3
 8000f54:	f008 fe3e 	bl	8009bd4 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8000f58:	463b      	mov	r3, r7
 8000f5a:	2234      	movs	r2, #52	; 0x34
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f008 fe38 	bl	8009bd4 <memset>

  hltdc.Instance = LTDC;
 8000f64:	4b4d      	ldr	r3, [pc, #308]	; (800109c <MX_LTDC_Init+0x158>)
 8000f66:	4a4e      	ldr	r2, [pc, #312]	; (80010a0 <MX_LTDC_Init+0x15c>)
 8000f68:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000f6a:	4b4c      	ldr	r3, [pc, #304]	; (800109c <MX_LTDC_Init+0x158>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000f70:	4b4a      	ldr	r3, [pc, #296]	; (800109c <MX_LTDC_Init+0x158>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000f76:	4b49      	ldr	r3, [pc, #292]	; (800109c <MX_LTDC_Init+0x158>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000f7c:	4b47      	ldr	r3, [pc, #284]	; (800109c <MX_LTDC_Init+0x158>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 8000f82:	4b46      	ldr	r3, [pc, #280]	; (800109c <MX_LTDC_Init+0x158>)
 8000f84:	2207      	movs	r2, #7
 8000f86:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 8000f88:	4b44      	ldr	r3, [pc, #272]	; (800109c <MX_LTDC_Init+0x158>)
 8000f8a:	2203      	movs	r2, #3
 8000f8c:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 8000f8e:	4b43      	ldr	r3, [pc, #268]	; (800109c <MX_LTDC_Init+0x158>)
 8000f90:	220e      	movs	r2, #14
 8000f92:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 8000f94:	4b41      	ldr	r3, [pc, #260]	; (800109c <MX_LTDC_Init+0x158>)
 8000f96:	2205      	movs	r2, #5
 8000f98:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 334;
 8000f9a:	4b40      	ldr	r3, [pc, #256]	; (800109c <MX_LTDC_Init+0x158>)
 8000f9c:	f44f 72a7 	mov.w	r2, #334	; 0x14e
 8000fa0:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 245;
 8000fa2:	4b3e      	ldr	r3, [pc, #248]	; (800109c <MX_LTDC_Init+0x158>)
 8000fa4:	22f5      	movs	r2, #245	; 0xf5
 8000fa6:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 340;
 8000fa8:	4b3c      	ldr	r3, [pc, #240]	; (800109c <MX_LTDC_Init+0x158>)
 8000faa:	f44f 72aa 	mov.w	r2, #340	; 0x154
 8000fae:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 247;
 8000fb0:	4b3a      	ldr	r3, [pc, #232]	; (800109c <MX_LTDC_Init+0x158>)
 8000fb2:	22f7      	movs	r2, #247	; 0xf7
 8000fb4:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000fb6:	4b39      	ldr	r3, [pc, #228]	; (800109c <MX_LTDC_Init+0x158>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000fbe:	4b37      	ldr	r3, [pc, #220]	; (800109c <MX_LTDC_Init+0x158>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000fc6:	4b35      	ldr	r3, [pc, #212]	; (800109c <MX_LTDC_Init+0x158>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000fce:	4833      	ldr	r0, [pc, #204]	; (800109c <MX_LTDC_Init+0x158>)
 8000fd0:	f005 fcbc 	bl	800694c <HAL_LTDC_Init>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d001      	beq.n	8000fde <MX_LTDC_Init+0x9a>
  {
    Error_Handler();
 8000fda:	f000 fb35 	bl	8001648 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 0;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 0;
 8000fea:	2300      	movs	r3, #0
 8000fec:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 0;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000ffa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ffe:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001000:	2305      	movs	r3, #5
 8001002:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0;
 8001004:	2300      	movs	r3, #0
 8001006:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 0;
 8001008:	2300      	movs	r3, #0
 800100a:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 0;
 800100c:	2300      	movs	r3, #0
 800100e:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8001010:	2300      	movs	r3, #0
 8001012:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 8001016:	2300      	movs	r3, #0
 8001018:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 800101c:	2300      	movs	r3, #0
 800101e:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001022:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001026:	2200      	movs	r2, #0
 8001028:	4619      	mov	r1, r3
 800102a:	481c      	ldr	r0, [pc, #112]	; (800109c <MX_LTDC_Init+0x158>)
 800102c:	f005 fd5e 	bl	8006aec <HAL_LTDC_ConfigLayer>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <MX_LTDC_Init+0xf6>
  {
    Error_Handler();
 8001036:	f000 fb07 	bl	8001648 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 800103a:	2300      	movs	r3, #0
 800103c:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 800103e:	2300      	movs	r3, #0
 8001040:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8001042:	2300      	movs	r3, #0
 8001044:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 8001046:	2300      	movs	r3, #0
 8001048:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800104a:	2300      	movs	r3, #0
 800104c:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 800104e:	2300      	movs	r3, #0
 8001050:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 8001052:	2300      	movs	r3, #0
 8001054:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001056:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800105a:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 800105c:	2305      	movs	r3, #5
 800105e:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8001060:	2300      	movs	r3, #0
 8001062:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 8001064:	2300      	movs	r3, #0
 8001066:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 8001068:	2300      	movs	r3, #0
 800106a:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 800106c:	2300      	movs	r3, #0
 800106e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 8001072:	2300      	movs	r3, #0
 8001074:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8001078:	2300      	movs	r3, #0
 800107a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 800107e:	463b      	mov	r3, r7
 8001080:	2201      	movs	r2, #1
 8001082:	4619      	mov	r1, r3
 8001084:	4805      	ldr	r0, [pc, #20]	; (800109c <MX_LTDC_Init+0x158>)
 8001086:	f005 fd31 	bl	8006aec <HAL_LTDC_ConfigLayer>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d001      	beq.n	8001094 <MX_LTDC_Init+0x150>
  {
    Error_Handler();
 8001090:	f000 fada 	bl	8001648 <Error_Handler>
  }

}
 8001094:	bf00      	nop
 8001096:	3768      	adds	r7, #104	; 0x68
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	2000053c 	.word	0x2000053c
 80010a0:	40016800 	.word	0x40016800

080010a4 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b08e      	sub	sp, #56	; 0x38
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010b0:	2200      	movs	r2, #0
 80010b2:	601a      	str	r2, [r3, #0]
 80010b4:	605a      	str	r2, [r3, #4]
 80010b6:	609a      	str	r2, [r3, #8]
 80010b8:	60da      	str	r2, [r3, #12]
 80010ba:	611a      	str	r2, [r3, #16]
  if(ltdcHandle->Instance==LTDC)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a77      	ldr	r2, [pc, #476]	; (80012a0 <HAL_LTDC_MspInit+0x1fc>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	f040 80e8 	bne.w	8001298 <HAL_LTDC_MspInit+0x1f4>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80010c8:	2300      	movs	r3, #0
 80010ca:	623b      	str	r3, [r7, #32]
 80010cc:	4b75      	ldr	r3, [pc, #468]	; (80012a4 <HAL_LTDC_MspInit+0x200>)
 80010ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010d0:	4a74      	ldr	r2, [pc, #464]	; (80012a4 <HAL_LTDC_MspInit+0x200>)
 80010d2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80010d6:	6453      	str	r3, [r2, #68]	; 0x44
 80010d8:	4b72      	ldr	r3, [pc, #456]	; (80012a4 <HAL_LTDC_MspInit+0x200>)
 80010da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010dc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80010e0:	623b      	str	r3, [r7, #32]
 80010e2:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80010e4:	2300      	movs	r3, #0
 80010e6:	61fb      	str	r3, [r7, #28]
 80010e8:	4b6e      	ldr	r3, [pc, #440]	; (80012a4 <HAL_LTDC_MspInit+0x200>)
 80010ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ec:	4a6d      	ldr	r2, [pc, #436]	; (80012a4 <HAL_LTDC_MspInit+0x200>)
 80010ee:	f043 0320 	orr.w	r3, r3, #32
 80010f2:	6313      	str	r3, [r2, #48]	; 0x30
 80010f4:	4b6b      	ldr	r3, [pc, #428]	; (80012a4 <HAL_LTDC_MspInit+0x200>)
 80010f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f8:	f003 0320 	and.w	r3, r3, #32
 80010fc:	61fb      	str	r3, [r7, #28]
 80010fe:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001100:	2300      	movs	r3, #0
 8001102:	61bb      	str	r3, [r7, #24]
 8001104:	4b67      	ldr	r3, [pc, #412]	; (80012a4 <HAL_LTDC_MspInit+0x200>)
 8001106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001108:	4a66      	ldr	r2, [pc, #408]	; (80012a4 <HAL_LTDC_MspInit+0x200>)
 800110a:	f043 0301 	orr.w	r3, r3, #1
 800110e:	6313      	str	r3, [r2, #48]	; 0x30
 8001110:	4b64      	ldr	r3, [pc, #400]	; (80012a4 <HAL_LTDC_MspInit+0x200>)
 8001112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001114:	f003 0301 	and.w	r3, r3, #1
 8001118:	61bb      	str	r3, [r7, #24]
 800111a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800111c:	2300      	movs	r3, #0
 800111e:	617b      	str	r3, [r7, #20]
 8001120:	4b60      	ldr	r3, [pc, #384]	; (80012a4 <HAL_LTDC_MspInit+0x200>)
 8001122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001124:	4a5f      	ldr	r2, [pc, #380]	; (80012a4 <HAL_LTDC_MspInit+0x200>)
 8001126:	f043 0302 	orr.w	r3, r3, #2
 800112a:	6313      	str	r3, [r2, #48]	; 0x30
 800112c:	4b5d      	ldr	r3, [pc, #372]	; (80012a4 <HAL_LTDC_MspInit+0x200>)
 800112e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001130:	f003 0302 	and.w	r3, r3, #2
 8001134:	617b      	str	r3, [r7, #20]
 8001136:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001138:	2300      	movs	r3, #0
 800113a:	613b      	str	r3, [r7, #16]
 800113c:	4b59      	ldr	r3, [pc, #356]	; (80012a4 <HAL_LTDC_MspInit+0x200>)
 800113e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001140:	4a58      	ldr	r2, [pc, #352]	; (80012a4 <HAL_LTDC_MspInit+0x200>)
 8001142:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001146:	6313      	str	r3, [r2, #48]	; 0x30
 8001148:	4b56      	ldr	r3, [pc, #344]	; (80012a4 <HAL_LTDC_MspInit+0x200>)
 800114a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001150:	613b      	str	r3, [r7, #16]
 8001152:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001154:	2300      	movs	r3, #0
 8001156:	60fb      	str	r3, [r7, #12]
 8001158:	4b52      	ldr	r3, [pc, #328]	; (80012a4 <HAL_LTDC_MspInit+0x200>)
 800115a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115c:	4a51      	ldr	r2, [pc, #324]	; (80012a4 <HAL_LTDC_MspInit+0x200>)
 800115e:	f043 0304 	orr.w	r3, r3, #4
 8001162:	6313      	str	r3, [r2, #48]	; 0x30
 8001164:	4b4f      	ldr	r3, [pc, #316]	; (80012a4 <HAL_LTDC_MspInit+0x200>)
 8001166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001168:	f003 0304 	and.w	r3, r3, #4
 800116c:	60fb      	str	r3, [r7, #12]
 800116e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001170:	2300      	movs	r3, #0
 8001172:	60bb      	str	r3, [r7, #8]
 8001174:	4b4b      	ldr	r3, [pc, #300]	; (80012a4 <HAL_LTDC_MspInit+0x200>)
 8001176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001178:	4a4a      	ldr	r2, [pc, #296]	; (80012a4 <HAL_LTDC_MspInit+0x200>)
 800117a:	f043 0308 	orr.w	r3, r3, #8
 800117e:	6313      	str	r3, [r2, #48]	; 0x30
 8001180:	4b48      	ldr	r3, [pc, #288]	; (80012a4 <HAL_LTDC_MspInit+0x200>)
 8001182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001184:	f003 0308 	and.w	r3, r3, #8
 8001188:	60bb      	str	r3, [r7, #8]
 800118a:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 800118c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001190:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001192:	2302      	movs	r3, #2
 8001194:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001196:	2300      	movs	r3, #0
 8001198:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800119a:	2300      	movs	r3, #0
 800119c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800119e:	230e      	movs	r3, #14
 80011a0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 80011a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011a6:	4619      	mov	r1, r3
 80011a8:	483f      	ldr	r0, [pc, #252]	; (80012a8 <HAL_LTDC_MspInit+0x204>)
 80011aa:	f004 f87b 	bl	80052a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 80011ae:	f641 0358 	movw	r3, #6232	; 0x1858
 80011b2:	627b      	str	r3, [r7, #36]	; 0x24
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b4:	2302      	movs	r3, #2
 80011b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b8:	2300      	movs	r3, #0
 80011ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011bc:	2300      	movs	r3, #0
 80011be:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80011c0:	230e      	movs	r3, #14
 80011c2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011c8:	4619      	mov	r1, r3
 80011ca:	4838      	ldr	r0, [pc, #224]	; (80012ac <HAL_LTDC_MspInit+0x208>)
 80011cc:	f004 f86a 	bl	80052a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 80011d0:	2303      	movs	r3, #3
 80011d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d4:	2302      	movs	r3, #2
 80011d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d8:	2300      	movs	r3, #0
 80011da:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011dc:	2300      	movs	r3, #0
 80011de:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80011e0:	2309      	movs	r3, #9
 80011e2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011e8:	4619      	mov	r1, r3
 80011ea:	4831      	ldr	r0, [pc, #196]	; (80012b0 <HAL_LTDC_MspInit+0x20c>)
 80011ec:	f004 f85a 	bl	80052a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 80011f0:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80011f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f6:	2302      	movs	r3, #2
 80011f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fa:	2300      	movs	r3, #0
 80011fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011fe:	2300      	movs	r3, #0
 8001200:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001202:	230e      	movs	r3, #14
 8001204:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001206:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800120a:	4619      	mov	r1, r3
 800120c:	4828      	ldr	r0, [pc, #160]	; (80012b0 <HAL_LTDC_MspInit+0x20c>)
 800120e:	f004 f849 	bl	80052a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8001212:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8001216:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001218:	2302      	movs	r3, #2
 800121a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121c:	2300      	movs	r3, #0
 800121e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001220:	2300      	movs	r3, #0
 8001222:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001224:	230e      	movs	r3, #14
 8001226:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001228:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800122c:	4619      	mov	r1, r3
 800122e:	4821      	ldr	r0, [pc, #132]	; (80012b4 <HAL_LTDC_MspInit+0x210>)
 8001230:	f004 f838 	bl	80052a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8001234:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8001238:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800123a:	2302      	movs	r3, #2
 800123c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123e:	2300      	movs	r3, #0
 8001240:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001242:	2300      	movs	r3, #0
 8001244:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001246:	230e      	movs	r3, #14
 8001248:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800124a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800124e:	4619      	mov	r1, r3
 8001250:	4819      	ldr	r0, [pc, #100]	; (80012b8 <HAL_LTDC_MspInit+0x214>)
 8001252:	f004 f827 	bl	80052a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8001256:	2348      	movs	r3, #72	; 0x48
 8001258:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800125a:	2302      	movs	r3, #2
 800125c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125e:	2300      	movs	r3, #0
 8001260:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001262:	2300      	movs	r3, #0
 8001264:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001266:	230e      	movs	r3, #14
 8001268:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800126a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800126e:	4619      	mov	r1, r3
 8001270:	4812      	ldr	r0, [pc, #72]	; (80012bc <HAL_LTDC_MspInit+0x218>)
 8001272:	f004 f817 	bl	80052a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8001276:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800127a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800127c:	2302      	movs	r3, #2
 800127e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001280:	2300      	movs	r3, #0
 8001282:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001284:	2300      	movs	r3, #0
 8001286:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001288:	2309      	movs	r3, #9
 800128a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800128c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001290:	4619      	mov	r1, r3
 8001292:	4808      	ldr	r0, [pc, #32]	; (80012b4 <HAL_LTDC_MspInit+0x210>)
 8001294:	f004 f806 	bl	80052a4 <HAL_GPIO_Init>

  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 8001298:	bf00      	nop
 800129a:	3738      	adds	r7, #56	; 0x38
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	40016800 	.word	0x40016800
 80012a4:	40023800 	.word	0x40023800
 80012a8:	40021400 	.word	0x40021400
 80012ac:	40020000 	.word	0x40020000
 80012b0:	40020400 	.word	0x40020400
 80012b4:	40021800 	.word	0x40021800
 80012b8:	40020800 	.word	0x40020800
 80012bc:	40020c00 	.word	0x40020c00

080012c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012c0:	b590      	push	{r4, r7, lr}
 80012c2:	b089      	sub	sp, #36	; 0x24
 80012c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	uint32_t	adc_PC1=0,adc_PA5=0,adc_PC3=0;
 80012c6:	2300      	movs	r3, #0
 80012c8:	61fb      	str	r3, [r7, #28]
 80012ca:	2300      	movs	r3, #0
 80012cc:	61bb      	str	r3, [r7, #24]
 80012ce:	2300      	movs	r3, #0
 80012d0:	617b      	str	r3, [r7, #20]
	uint32_t	adc_PF8=0, adc_PF6=0;
 80012d2:	2300      	movs	r3, #0
 80012d4:	613b      	str	r3, [r7, #16]
 80012d6:	2300      	movs	r3, #0
 80012d8:	60fb      	str	r3, [r7, #12]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012da:	f002 fd2d 	bl	8003d38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012de:	f000 f8bd 	bl	800145c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012e2:	f7ff fc31 	bl	8000b48 <MX_GPIO_Init>
  MX_CRC_Init();
 80012e6:	f7ff fab3 	bl	8000850 <MX_CRC_Init>
  MX_DMA2D_Init();
 80012ea:	f7ff fae7 	bl	80008bc <MX_DMA2D_Init>
  MX_FMC_Init();
 80012ee:	f7ff fb3f 	bl	8000970 <MX_FMC_Init>
  MX_I2C3_Init();
 80012f2:	f7ff fd57 	bl	8000da4 <MX_I2C3_Init>
  MX_LTDC_Init();
 80012f6:	f7ff fe25 	bl	8000f44 <MX_LTDC_Init>
  MX_TIM1_Init();
 80012fa:	f000 fce5 	bl	8001cc8 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80012fe:	f000 fd55 	bl	8001dac <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8001302:	f7ff f945 	bl	8000590 <MX_ADC1_Init>
  MX_ADC3_Init();
 8001306:	f7ff f9b1 	bl	800066c <MX_ADC3_Init>
  MX_SPI3_Init();
 800130a:	f000 fb05 	bl	8001918 <MX_SPI3_Init>
  /* USER CODE BEGIN WHILE */
  //BSP_LCD_Init();

  // -----------

  BSP_LCD_Init();						// Initialize the LCD display
 800130e:	f001 fd85 	bl	8002e1c <BSP_LCD_Init>
  BSP_LCD_LayerDefaultInit(LCD_FOREGROUND_LAYER, LCD_FRAME_BUFFER);
 8001312:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 8001316:	2001      	movs	r0, #1
 8001318:	f001 fe02 	bl	8002f20 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_SelectLayer(LCD_FOREGROUND_LAYER);
 800131c:	2001      	movs	r0, #1
 800131e:	f001 fe63 	bl	8002fe8 <BSP_LCD_SelectLayer>
  BSP_LCD_DisplayOn();
 8001322:	f002 f83d 	bl	80033a0 <BSP_LCD_DisplayOn>
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 8001326:	f04f 30ff 	mov.w	r0, #4294967295
 800132a:	f001 feb9 	bl	80030a0 <BSP_LCD_Clear>

  BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 800132e:	f001 fddf 	bl	8002ef0 <BSP_LCD_GetXSize>
 8001332:	4603      	mov	r3, r0
 8001334:	b29c      	uxth	r4, r3
 8001336:	f001 fde7 	bl	8002f08 <BSP_LCD_GetYSize>
 800133a:	4603      	mov	r3, r0
 800133c:	b29b      	uxth	r3, r3
 800133e:	4619      	mov	r1, r3
 8001340:	4620      	mov	r0, r4
 8001342:	f002 fbf5 	bl	8003b30 <BSP_TS_Init>

  MENU_draw();
 8001346:	f000 f987 	bl	8001658 <MENU_draw>

  MENU_hint();
 800134a:	f000 fa33 	bl	80017b4 <MENU_hint>

  gyro_disable();
 800134e:	f000 f909 	bl	8001564 <gyro_disable>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8001352:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001356:	483b      	ldr	r0, [pc, #236]	; (8001444 <main+0x184>)
 8001358:	f004 fa71 	bl	800583e <HAL_GPIO_TogglePin>
	  //HAL_UART_Transmit(&huart1, "Hello world\n", 12, 500);
	  HAL_Delay(200);
 800135c:	20c8      	movs	r0, #200	; 0xc8
 800135e:	f002 fd2d 	bl	8003dbc <HAL_Delay>

	  //ADC1
	    HAL_ADC_Start(&hadc1);
 8001362:	4839      	ldr	r0, [pc, #228]	; (8001448 <main+0x188>)
 8001364:	f002 fd90 	bl	8003e88 <HAL_ADC_Start>
	    HAL_ADC_PollForConversion(&hadc1, 5);
 8001368:	2105      	movs	r1, #5
 800136a:	4837      	ldr	r0, [pc, #220]	; (8001448 <main+0x188>)
 800136c:	f002 fe85 	bl	800407a <HAL_ADC_PollForConversion>
	    adc_PC1 = HAL_ADC_GetValue(&hadc1);
 8001370:	4835      	ldr	r0, [pc, #212]	; (8001448 <main+0x188>)
 8001372:	f002 ff06 	bl	8004182 <HAL_ADC_GetValue>
 8001376:	61f8      	str	r0, [r7, #28]
	    adc_PA5 = HAL_ADC_GetValue(&hadc1);
 8001378:	4833      	ldr	r0, [pc, #204]	; (8001448 <main+0x188>)
 800137a:	f002 ff02 	bl	8004182 <HAL_ADC_GetValue>
 800137e:	61b8      	str	r0, [r7, #24]
	    adc_PC3 = HAL_ADC_GetValue(&hadc1);
 8001380:	4831      	ldr	r0, [pc, #196]	; (8001448 <main+0x188>)
 8001382:	f002 fefe 	bl	8004182 <HAL_ADC_GetValue>
 8001386:	6178      	str	r0, [r7, #20]
	    HAL_ADC_Stop(&hadc1);
 8001388:	482f      	ldr	r0, [pc, #188]	; (8001448 <main+0x188>)
 800138a:	f002 fe43 	bl	8004014 <HAL_ADC_Stop>
	    HAL_UART_Transmit(&huart1, text, 9, 500);
	    snprintf(text, 10, "PC3=%4d\n", (int)(adc_PC3 & 0xffff));
	    HAL_UART_Transmit(&huart1, text, 9, 500);

*/
	    HAL_ADC_Start(&hadc3);
 800138e:	482f      	ldr	r0, [pc, #188]	; (800144c <main+0x18c>)
 8001390:	f002 fd7a 	bl	8003e88 <HAL_ADC_Start>
	    HAL_ADC_PollForConversion(&hadc3, 5);
 8001394:	2105      	movs	r1, #5
 8001396:	482d      	ldr	r0, [pc, #180]	; (800144c <main+0x18c>)
 8001398:	f002 fe6f 	bl	800407a <HAL_ADC_PollForConversion>
	    adc_PF8 = HAL_ADC_GetValue(&hadc3);
 800139c:	482b      	ldr	r0, [pc, #172]	; (800144c <main+0x18c>)
 800139e:	f002 fef0 	bl	8004182 <HAL_ADC_GetValue>
 80013a2:	6138      	str	r0, [r7, #16]
	    adc_PF6 = HAL_ADC_GetValue(&hadc3);
 80013a4:	4829      	ldr	r0, [pc, #164]	; (800144c <main+0x18c>)
 80013a6:	f002 feec 	bl	8004182 <HAL_ADC_GetValue>
 80013aa:	60f8      	str	r0, [r7, #12]
	    HAL_ADC_Stop(&hadc3);
 80013ac:	4827      	ldr	r0, [pc, #156]	; (800144c <main+0x18c>)
 80013ae:	f002 fe31 	bl	8004014 <HAL_ADC_Stop>




	    //ADC3
	    snprintf(text, 10, "PF8=%4d\n", (int)(adc_PF8 & 0xffff));
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	b29b      	uxth	r3, r3
 80013b6:	4638      	mov	r0, r7
 80013b8:	4a25      	ldr	r2, [pc, #148]	; (8001450 <main+0x190>)
 80013ba:	210a      	movs	r1, #10
 80013bc:	f008 fc12 	bl	8009be4 <sniprintf>
	   	HAL_UART_Transmit(&huart1, text, 9, 500);
 80013c0:	4639      	mov	r1, r7
 80013c2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80013c6:	2209      	movs	r2, #9
 80013c8:	4822      	ldr	r0, [pc, #136]	; (8001454 <main+0x194>)
 80013ca:	f007 fe38 	bl	800903e <HAL_UART_Transmit>
	   	snprintf(text, 10, "PF6=%4d\n", (int)(adc_PF6 & 0xffff));
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	b29b      	uxth	r3, r3
 80013d2:	4638      	mov	r0, r7
 80013d4:	4a20      	ldr	r2, [pc, #128]	; (8001458 <main+0x198>)
 80013d6:	210a      	movs	r1, #10
 80013d8:	f008 fc04 	bl	8009be4 <sniprintf>
	   	HAL_UART_Transmit(&huart1, text, 9, 500);
 80013dc:	4639      	mov	r1, r7
 80013de:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80013e2:	2209      	movs	r2, #9
 80013e4:	481b      	ldr	r0, [pc, #108]	; (8001454 <main+0x194>)
 80013e6:	f007 fe2a 	bl	800903e <HAL_UART_Transmit>



	  MENU_check_transition();
 80013ea:	f000 fa23 	bl	8001834 <MENU_check_transition>

	  switch (MENU_get_transition()) {
 80013ee:	f000 fa0f 	bl	8001810 <MENU_get_transition>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b06      	cmp	r3, #6
 80013f6:	d823      	bhi.n	8001440 <main+0x180>
 80013f8:	a201      	add	r2, pc, #4	; (adr r2, 8001400 <main+0x140>)
 80013fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013fe:	bf00      	nop
 8001400:	0800141d 	.word	0x0800141d
 8001404:	08001429 	.word	0x08001429
 8001408:	08001435 	.word	0x08001435
 800140c:	08001441 	.word	0x08001441
 8001410:	08001441 	.word	0x08001441
 8001414:	08001441 	.word	0x08001441
 8001418:	08001441 	.word	0x08001441
	  		case MENU_NONE:					// No transition => do nothing
	  			break;
	  		case MENU_ZERO:
	  			HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 800141c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001420:	4808      	ldr	r0, [pc, #32]	; (8001444 <main+0x184>)
 8001422:	f004 fa0c 	bl	800583e <HAL_GPIO_TogglePin>
	  			//ADC_single_demo();
	  			break;
 8001426:	e00c      	b.n	8001442 <main+0x182>
	  		case MENU_ONE:
	  			HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 8001428:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800142c:	4805      	ldr	r0, [pc, #20]	; (8001444 <main+0x184>)
 800142e:	f004 fa06 	bl	800583e <HAL_GPIO_TogglePin>
	  			//ADC_timer_demo();
	  			break;
 8001432:	e006      	b.n	8001442 <main+0x182>
	  		case MENU_TWO:
	  			HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 8001434:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001438:	4802      	ldr	r0, [pc, #8]	; (8001444 <main+0x184>)
 800143a:	f004 fa00 	bl	800583e <HAL_GPIO_TogglePin>
	  			//ADC_DMA_demo();
	  			break;
 800143e:	e000      	b.n	8001442 <main+0x182>
	  		case MENU_FIVE:
	  			//DAC_demo();
	  			//ADC_DMA_scan_demo();
	  			break;
	  		default:						// Should never occur
	  			break;
 8001440:	bf00      	nop
  {
 8001442:	e786      	b.n	8001352 <main+0x92>
 8001444:	40021800 	.word	0x40021800
 8001448:	200003dc 	.word	0x200003dc
 800144c:	20000424 	.word	0x20000424
 8001450:	0800a430 	.word	0x0800a430
 8001454:	200006bc 	.word	0x200006bc
 8001458:	0800a43c 	.word	0x0800a43c

0800145c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b0a0      	sub	sp, #128	; 0x80
 8001460:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001462:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001466:	2230      	movs	r2, #48	; 0x30
 8001468:	2100      	movs	r1, #0
 800146a:	4618      	mov	r0, r3
 800146c:	f008 fbb2 	bl	8009bd4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001470:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001474:	2200      	movs	r2, #0
 8001476:	601a      	str	r2, [r3, #0]
 8001478:	605a      	str	r2, [r3, #4]
 800147a:	609a      	str	r2, [r3, #8]
 800147c:	60da      	str	r2, [r3, #12]
 800147e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001480:	f107 030c 	add.w	r3, r7, #12
 8001484:	2230      	movs	r2, #48	; 0x30
 8001486:	2100      	movs	r1, #0
 8001488:	4618      	mov	r0, r3
 800148a:	f008 fba3 	bl	8009bd4 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800148e:	2300      	movs	r3, #0
 8001490:	60bb      	str	r3, [r7, #8]
 8001492:	4b32      	ldr	r3, [pc, #200]	; (800155c <SystemClock_Config+0x100>)
 8001494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001496:	4a31      	ldr	r2, [pc, #196]	; (800155c <SystemClock_Config+0x100>)
 8001498:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800149c:	6413      	str	r3, [r2, #64]	; 0x40
 800149e:	4b2f      	ldr	r3, [pc, #188]	; (800155c <SystemClock_Config+0x100>)
 80014a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014a6:	60bb      	str	r3, [r7, #8]
 80014a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80014aa:	2300      	movs	r3, #0
 80014ac:	607b      	str	r3, [r7, #4]
 80014ae:	4b2c      	ldr	r3, [pc, #176]	; (8001560 <SystemClock_Config+0x104>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80014b6:	4a2a      	ldr	r2, [pc, #168]	; (8001560 <SystemClock_Config+0x104>)
 80014b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014bc:	6013      	str	r3, [r2, #0]
 80014be:	4b28      	ldr	r3, [pc, #160]	; (8001560 <SystemClock_Config+0x104>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80014c6:	607b      	str	r3, [r7, #4]
 80014c8:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80014ca:	2301      	movs	r3, #1
 80014cc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80014ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80014d2:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014d4:	2302      	movs	r3, #2
 80014d6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014d8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80014dc:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80014de:	2304      	movs	r3, #4
 80014e0:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 72;
 80014e2:	2348      	movs	r3, #72	; 0x48
 80014e4:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80014e6:	2302      	movs	r3, #2
 80014e8:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80014ea:	2303      	movs	r3, #3
 80014ec:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014ee:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80014f2:	4618      	mov	r0, r3
 80014f4:	f005 fcfa 	bl	8006eec <HAL_RCC_OscConfig>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d001      	beq.n	8001502 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80014fe:	f000 f8a3 	bl	8001648 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001502:	230f      	movs	r3, #15
 8001504:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001506:	2302      	movs	r3, #2
 8001508:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800150a:	2300      	movs	r3, #0
 800150c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800150e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001512:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001514:	2300      	movs	r3, #0
 8001516:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001518:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800151c:	2102      	movs	r1, #2
 800151e:	4618      	mov	r0, r3
 8001520:	f005 ff54 	bl	80073cc <HAL_RCC_ClockConfig>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800152a:	f000 f88d 	bl	8001648 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800152e:	2308      	movs	r3, #8
 8001530:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 8001532:	2332      	movs	r3, #50	; 0x32
 8001534:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8001536:	2302      	movs	r3, #2
 8001538:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 800153a:	2300      	movs	r3, #0
 800153c:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800153e:	f107 030c 	add.w	r3, r7, #12
 8001542:	4618      	mov	r0, r3
 8001544:	f006 f966 	bl	8007814 <HAL_RCCEx_PeriphCLKConfig>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d001      	beq.n	8001552 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 800154e:	f000 f87b 	bl	8001648 <Error_Handler>
  }
}
 8001552:	bf00      	nop
 8001554:	3780      	adds	r7, #128	; 0x80
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	40023800 	.word	0x40023800
 8001560:	40007000 	.word	0x40007000

08001564 <gyro_disable>:

/* USER CODE BEGIN 4 */
void gyro_disable(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOC_CLK_ENABLE();		// Enable Clock for GPIO port C
 800156a:	2300      	movs	r3, #0
 800156c:	607b      	str	r3, [r7, #4]
 800156e:	4b2a      	ldr	r3, [pc, #168]	; (8001618 <gyro_disable+0xb4>)
 8001570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001572:	4a29      	ldr	r2, [pc, #164]	; (8001618 <gyro_disable+0xb4>)
 8001574:	f043 0304 	orr.w	r3, r3, #4
 8001578:	6313      	str	r3, [r2, #48]	; 0x30
 800157a:	4b27      	ldr	r3, [pc, #156]	; (8001618 <gyro_disable+0xb4>)
 800157c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157e:	f003 0304 	and.w	r3, r3, #4
 8001582:	607b      	str	r3, [r7, #4]
 8001584:	687b      	ldr	r3, [r7, #4]
	/* Disable PC1 and PF8 first */
	GPIOC->MODER &= ~GPIO_MODER_MODER1; // Reset mode for PC1
 8001586:	4b25      	ldr	r3, [pc, #148]	; (800161c <gyro_disable+0xb8>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4a24      	ldr	r2, [pc, #144]	; (800161c <gyro_disable+0xb8>)
 800158c:	f023 030c 	bic.w	r3, r3, #12
 8001590:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= GPIO_MODER_MODER1_0;	// Set PC1 as output
 8001592:	4b22      	ldr	r3, [pc, #136]	; (800161c <gyro_disable+0xb8>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4a21      	ldr	r2, [pc, #132]	; (800161c <gyro_disable+0xb8>)
 8001598:	f043 0304 	orr.w	r3, r3, #4
 800159c:	6013      	str	r3, [r2, #0]
	GPIOC->BSRR |= GPIO_BSRR_BR1;		// Set GYRO (CS) to 0 for a short time
 800159e:	4b1f      	ldr	r3, [pc, #124]	; (800161c <gyro_disable+0xb8>)
 80015a0:	699b      	ldr	r3, [r3, #24]
 80015a2:	4a1e      	ldr	r2, [pc, #120]	; (800161c <gyro_disable+0xb8>)
 80015a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015a8:	6193      	str	r3, [r2, #24]
	HAL_Delay(10);						// Wait some time
 80015aa:	200a      	movs	r0, #10
 80015ac:	f002 fc06 	bl	8003dbc <HAL_Delay>
	GPIOC->MODER |= GPIO_MODER_MODER1_Msk; // Analog mode PC1 = ADC123_IN11
 80015b0:	4b1a      	ldr	r3, [pc, #104]	; (800161c <gyro_disable+0xb8>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a19      	ldr	r2, [pc, #100]	; (800161c <gyro_disable+0xb8>)
 80015b6:	f043 030c 	orr.w	r3, r3, #12
 80015ba:	6013      	str	r3, [r2, #0]
	__HAL_RCC_GPIOF_CLK_ENABLE();		// Enable Clock for GPIO port F
 80015bc:	2300      	movs	r3, #0
 80015be:	603b      	str	r3, [r7, #0]
 80015c0:	4b15      	ldr	r3, [pc, #84]	; (8001618 <gyro_disable+0xb4>)
 80015c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c4:	4a14      	ldr	r2, [pc, #80]	; (8001618 <gyro_disable+0xb4>)
 80015c6:	f043 0320 	orr.w	r3, r3, #32
 80015ca:	6313      	str	r3, [r2, #48]	; 0x30
 80015cc:	4b12      	ldr	r3, [pc, #72]	; (8001618 <gyro_disable+0xb4>)
 80015ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d0:	f003 0320 	and.w	r3, r3, #32
 80015d4:	603b      	str	r3, [r7, #0]
 80015d6:	683b      	ldr	r3, [r7, #0]
	GPIOF->OSPEEDR &= ~GPIO_OSPEEDR_OSPEED8;	// Reset speed of PF8
 80015d8:	4b11      	ldr	r3, [pc, #68]	; (8001620 <gyro_disable+0xbc>)
 80015da:	689b      	ldr	r3, [r3, #8]
 80015dc:	4a10      	ldr	r2, [pc, #64]	; (8001620 <gyro_disable+0xbc>)
 80015de:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80015e2:	6093      	str	r3, [r2, #8]
	GPIOF->AFR[1] &= ~GPIO_AFRH_AFSEL8;			// Reset alternate func. of PF8
 80015e4:	4b0e      	ldr	r3, [pc, #56]	; (8001620 <gyro_disable+0xbc>)
 80015e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015e8:	4a0d      	ldr	r2, [pc, #52]	; (8001620 <gyro_disable+0xbc>)
 80015ea:	f023 030f 	bic.w	r3, r3, #15
 80015ee:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOF->PUPDR &= ~GPIO_PUPDR_PUPD8;			// Reset pulup/down of PF8
 80015f0:	4b0b      	ldr	r3, [pc, #44]	; (8001620 <gyro_disable+0xbc>)
 80015f2:	68db      	ldr	r3, [r3, #12]
 80015f4:	4a0a      	ldr	r2, [pc, #40]	; (8001620 <gyro_disable+0xbc>)
 80015f6:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80015fa:	60d3      	str	r3, [r2, #12]
	HAL_Delay(10);						// Wait some time
 80015fc:	200a      	movs	r0, #10
 80015fe:	f002 fbdd 	bl	8003dbc <HAL_Delay>
	GPIOF->MODER |= GPIO_MODER_MODER8_Msk; // Analog mode for PF6 = ADC3_IN4
 8001602:	4b07      	ldr	r3, [pc, #28]	; (8001620 <gyro_disable+0xbc>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4a06      	ldr	r2, [pc, #24]	; (8001620 <gyro_disable+0xbc>)
 8001608:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 800160c:	6013      	str	r3, [r2, #0]
}
 800160e:	bf00      	nop
 8001610:	3708      	adds	r7, #8
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	40023800 	.word	0x40023800
 800161c:	40020800 	.word	0x40020800
 8001620:	40021400 	.word	0x40021400

08001624 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b082      	sub	sp, #8
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a04      	ldr	r2, [pc, #16]	; (8001644 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d101      	bne.n	800163a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001636:	f002 fba1 	bl	8003d7c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800163a:	bf00      	nop
 800163c:	3708      	adds	r7, #8
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	40001000 	.word	0x40001000

08001648 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800164c:	bf00      	nop
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr
	...

08001658 <MENU_draw>:
 * Each menu entry has two lines.
 * Text and background colors are applied.
 * @n These attributes are defined in the variable MENU_draw[].
 *****************************************************************************/
void MENU_draw(void)
{
 8001658:	b590      	push	{r4, r7, lr}
 800165a:	b087      	sub	sp, #28
 800165c:	af00      	add	r7, sp, #0
	BSP_LCD_SetFont(MENU_FONT);
 800165e:	4852      	ldr	r0, [pc, #328]	; (80017a8 <MENU_draw+0x150>)
 8001660:	f001 fd04 	bl	800306c <BSP_LCD_SetFont>
	uint32_t x, y, m, w, h;
	y = MENU_Y;
 8001664:	f001 fc50 	bl	8002f08 <BSP_LCD_GetYSize>
 8001668:	4603      	mov	r3, r0
 800166a:	3b28      	subs	r3, #40	; 0x28
 800166c:	613b      	str	r3, [r7, #16]
	m = MENU_MARGIN;
 800166e:	2302      	movs	r3, #2
 8001670:	60fb      	str	r3, [r7, #12]
	w = BSP_LCD_GetXSize()/MENU_ENTRY_COUNT;
 8001672:	f001 fc3d 	bl	8002ef0 <BSP_LCD_GetXSize>
 8001676:	4602      	mov	r2, r0
 8001678:	4b4c      	ldr	r3, [pc, #304]	; (80017ac <MENU_draw+0x154>)
 800167a:	fba3 2302 	umull	r2, r3, r3, r2
 800167e:	089b      	lsrs	r3, r3, #2
 8001680:	60bb      	str	r3, [r7, #8]
	h = MENU_HEIGHT;
 8001682:	2328      	movs	r3, #40	; 0x28
 8001684:	607b      	str	r3, [r7, #4]
	for (uint32_t i = 0; i < MENU_ENTRY_COUNT; i++) {
 8001686:	2300      	movs	r3, #0
 8001688:	617b      	str	r3, [r7, #20]
 800168a:	e084      	b.n	8001796 <MENU_draw+0x13e>
		x = i*w;
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	68ba      	ldr	r2, [r7, #8]
 8001690:	fb02 f303 	mul.w	r3, r2, r3
 8001694:	603b      	str	r3, [r7, #0]
		BSP_LCD_SetTextColor(MENU_entry[i].back_color);
 8001696:	4946      	ldr	r1, [pc, #280]	; (80017b0 <MENU_draw+0x158>)
 8001698:	697a      	ldr	r2, [r7, #20]
 800169a:	4613      	mov	r3, r2
 800169c:	009b      	lsls	r3, r3, #2
 800169e:	4413      	add	r3, r2
 80016a0:	00db      	lsls	r3, r3, #3
 80016a2:	440b      	add	r3, r1
 80016a4:	3324      	adds	r3, #36	; 0x24
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4618      	mov	r0, r3
 80016aa:	f001 fcad 	bl	8003008 <BSP_LCD_SetTextColor>
		BSP_LCD_FillRect(x+m, y+m, w-2*m, h-2*m);
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	b29a      	uxth	r2, r3
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	b29b      	uxth	r3, r3
 80016b6:	4413      	add	r3, r2
 80016b8:	b298      	uxth	r0, r3
 80016ba:	693b      	ldr	r3, [r7, #16]
 80016bc:	b29a      	uxth	r2, r3
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	b29b      	uxth	r3, r3
 80016c2:	4413      	add	r3, r2
 80016c4:	b299      	uxth	r1, r3
 80016c6:	68bb      	ldr	r3, [r7, #8]
 80016c8:	b29a      	uxth	r2, r3
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	b29b      	uxth	r3, r3
 80016ce:	005b      	lsls	r3, r3, #1
 80016d0:	b29b      	uxth	r3, r3
 80016d2:	1ad3      	subs	r3, r2, r3
 80016d4:	b29c      	uxth	r4, r3
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	b29a      	uxth	r2, r3
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	b29b      	uxth	r3, r3
 80016de:	005b      	lsls	r3, r3, #1
 80016e0:	b29b      	uxth	r3, r3
 80016e2:	1ad3      	subs	r3, r2, r3
 80016e4:	b29b      	uxth	r3, r3
 80016e6:	4622      	mov	r2, r4
 80016e8:	f001 fe00 	bl	80032ec <BSP_LCD_FillRect>
		BSP_LCD_SetBackColor(MENU_entry[i].back_color);
 80016ec:	4930      	ldr	r1, [pc, #192]	; (80017b0 <MENU_draw+0x158>)
 80016ee:	697a      	ldr	r2, [r7, #20]
 80016f0:	4613      	mov	r3, r2
 80016f2:	009b      	lsls	r3, r3, #2
 80016f4:	4413      	add	r3, r2
 80016f6:	00db      	lsls	r3, r3, #3
 80016f8:	440b      	add	r3, r1
 80016fa:	3324      	adds	r3, #36	; 0x24
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4618      	mov	r0, r3
 8001700:	f001 fc9a 	bl	8003038 <BSP_LCD_SetBackColor>
		BSP_LCD_SetTextColor(MENU_entry[i].text_color);
 8001704:	492a      	ldr	r1, [pc, #168]	; (80017b0 <MENU_draw+0x158>)
 8001706:	697a      	ldr	r2, [r7, #20]
 8001708:	4613      	mov	r3, r2
 800170a:	009b      	lsls	r3, r3, #2
 800170c:	4413      	add	r3, r2
 800170e:	00db      	lsls	r3, r3, #3
 8001710:	440b      	add	r3, r1
 8001712:	3320      	adds	r3, #32
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4618      	mov	r0, r3
 8001718:	f001 fc76 	bl	8003008 <BSP_LCD_SetTextColor>
		BSP_LCD_DisplayStringAt(x+3*m, y+3*m,
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	b29b      	uxth	r3, r3
 8001720:	461a      	mov	r2, r3
 8001722:	0052      	lsls	r2, r2, #1
 8001724:	4413      	add	r3, r2
 8001726:	b29a      	uxth	r2, r3
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	b29b      	uxth	r3, r3
 800172c:	4413      	add	r3, r2
 800172e:	b298      	uxth	r0, r3
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	b29b      	uxth	r3, r3
 8001734:	461a      	mov	r2, r3
 8001736:	0052      	lsls	r2, r2, #1
 8001738:	4413      	add	r3, r2
 800173a:	b29a      	uxth	r2, r3
 800173c:	693b      	ldr	r3, [r7, #16]
 800173e:	b29b      	uxth	r3, r3
 8001740:	4413      	add	r3, r2
 8001742:	b299      	uxth	r1, r3
				(uint8_t *)MENU_entry[i].line1, LEFT_MODE);
 8001744:	697a      	ldr	r2, [r7, #20]
 8001746:	4613      	mov	r3, r2
 8001748:	009b      	lsls	r3, r3, #2
 800174a:	4413      	add	r3, r2
 800174c:	00db      	lsls	r3, r3, #3
 800174e:	4a18      	ldr	r2, [pc, #96]	; (80017b0 <MENU_draw+0x158>)
 8001750:	441a      	add	r2, r3
		BSP_LCD_DisplayStringAt(x+3*m, y+3*m,
 8001752:	2303      	movs	r3, #3
 8001754:	f001 fd10 	bl	8003178 <BSP_LCD_DisplayStringAt>
		BSP_LCD_DisplayStringAt(x+3*m, y+h/2,
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	b29b      	uxth	r3, r3
 800175c:	461a      	mov	r2, r3
 800175e:	0052      	lsls	r2, r2, #1
 8001760:	4413      	add	r3, r2
 8001762:	b29a      	uxth	r2, r3
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	b29b      	uxth	r3, r3
 8001768:	4413      	add	r3, r2
 800176a:	b298      	uxth	r0, r3
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	085b      	lsrs	r3, r3, #1
 8001770:	b29a      	uxth	r2, r3
 8001772:	693b      	ldr	r3, [r7, #16]
 8001774:	b29b      	uxth	r3, r3
 8001776:	4413      	add	r3, r2
 8001778:	b299      	uxth	r1, r3
				(uint8_t *)MENU_entry[i].line2, LEFT_MODE);
 800177a:	697a      	ldr	r2, [r7, #20]
 800177c:	4613      	mov	r3, r2
 800177e:	009b      	lsls	r3, r3, #2
 8001780:	4413      	add	r3, r2
 8001782:	00db      	lsls	r3, r3, #3
 8001784:	3310      	adds	r3, #16
 8001786:	4a0a      	ldr	r2, [pc, #40]	; (80017b0 <MENU_draw+0x158>)
 8001788:	441a      	add	r2, r3
		BSP_LCD_DisplayStringAt(x+3*m, y+h/2,
 800178a:	2303      	movs	r3, #3
 800178c:	f001 fcf4 	bl	8003178 <BSP_LCD_DisplayStringAt>
	for (uint32_t i = 0; i < MENU_ENTRY_COUNT; i++) {
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	3301      	adds	r3, #1
 8001794:	617b      	str	r3, [r7, #20]
 8001796:	697b      	ldr	r3, [r7, #20]
 8001798:	2b05      	cmp	r3, #5
 800179a:	f67f af77 	bls.w	800168c <MENU_draw+0x34>
	}
}
 800179e:	bf00      	nop
 80017a0:	371c      	adds	r7, #28
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd90      	pop	{r4, r7, pc}
 80017a6:	bf00      	nop
 80017a8:	20000174 	.word	0x20000174
 80017ac:	aaaaaaab 	.word	0xaaaaaaab
 80017b0:	20000004 	.word	0x20000004

080017b4 <MENU_hint>:
/** ***************************************************************************
 * @brief Shows a hint at startup.
 *
 *****************************************************************************/
void MENU_hint(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0
	BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 80017b8:	f04f 30ff 	mov.w	r0, #4294967295
 80017bc:	f001 fc3c 	bl	8003038 <BSP_LCD_SetBackColor>
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80017c0:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80017c4:	f001 fc20 	bl	8003008 <BSP_LCD_SetTextColor>
	BSP_LCD_SetFont(&Font24);
 80017c8:	480c      	ldr	r0, [pc, #48]	; (80017fc <MENU_hint+0x48>)
 80017ca:	f001 fc4f 	bl	800306c <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(5,10, (uint8_t *)"DOMIS-CODE", LEFT_MODE);
 80017ce:	2303      	movs	r3, #3
 80017d0:	4a0b      	ldr	r2, [pc, #44]	; (8001800 <MENU_hint+0x4c>)
 80017d2:	210a      	movs	r1, #10
 80017d4:	2005      	movs	r0, #5
 80017d6:	f001 fccf 	bl	8003178 <BSP_LCD_DisplayStringAt>
	BSP_LCD_SetFont(&Font16);
 80017da:	480a      	ldr	r0, [pc, #40]	; (8001804 <MENU_hint+0x50>)
 80017dc:	f001 fc46 	bl	800306c <BSP_LCD_SetFont>
	BSP_LCD_DisplayStringAt(5, 60, (uint8_t *)"Touch a menu item", LEFT_MODE);
 80017e0:	2303      	movs	r3, #3
 80017e2:	4a09      	ldr	r2, [pc, #36]	; (8001808 <MENU_hint+0x54>)
 80017e4:	213c      	movs	r1, #60	; 0x3c
 80017e6:	2005      	movs	r0, #5
 80017e8:	f001 fcc6 	bl	8003178 <BSP_LCD_DisplayStringAt>
	BSP_LCD_DisplayStringAt(5, 80, (uint8_t *)"to start a demo", LEFT_MODE);
 80017ec:	2303      	movs	r3, #3
 80017ee:	4a07      	ldr	r2, [pc, #28]	; (800180c <MENU_hint+0x58>)
 80017f0:	2150      	movs	r1, #80	; 0x50
 80017f2:	2005      	movs	r0, #5
 80017f4:	f001 fcc0 	bl	8003178 <BSP_LCD_DisplayStringAt>

	//BSP_LCD_DisplayStringAt(5, 120, (uint8_t *)"Blamiere bim programmiere", LEFT_MODE);
	//BSP_LCD_DisplayStringAt(5, 140, (uint8_t *)"programmiere", LEFT_MODE);
}
 80017f8:	bf00      	nop
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	20000164 	.word	0x20000164
 8001800:	0800a448 	.word	0x0800a448
 8001804:	2000016c 	.word	0x2000016c
 8001808:	0800a454 	.word	0x0800a454
 800180c:	0800a468 	.word	0x0800a468

08001810 <MENU_get_transition>:
 * MENU_transition is used as a flag.
 * When the value is read by calling MENU_get_transition()
 * this flag is cleared, respectively set to MENU_NONE.
 *****************************************************************************/
MENU_item_t MENU_get_transition(void)
{
 8001810:	b480      	push	{r7}
 8001812:	b083      	sub	sp, #12
 8001814:	af00      	add	r7, sp, #0
	MENU_item_t item = MENU_transition;
 8001816:	4b06      	ldr	r3, [pc, #24]	; (8001830 <MENU_get_transition+0x20>)
 8001818:	781b      	ldrb	r3, [r3, #0]
 800181a:	71fb      	strb	r3, [r7, #7]
	MENU_transition = MENU_NONE;
 800181c:	4b04      	ldr	r3, [pc, #16]	; (8001830 <MENU_get_transition+0x20>)
 800181e:	2206      	movs	r2, #6
 8001820:	701a      	strb	r2, [r3, #0]
	return item;
 8001822:	79fb      	ldrb	r3, [r7, #7]
}
 8001824:	4618      	mov	r0, r3
 8001826:	370c      	adds	r7, #12
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr
 8001830:	20000000 	.word	0x20000000

08001834 <MENU_check_transition>:
 * If the last transition has been consumed (MENU_NONE == MENU_transition)
 * and the touchscreen has been touched for a defined period
 * the variable MENU_transition is set to the touched item.
 *****************************************************************************/
void MENU_check_transition(void)
{
 8001834:	b598      	push	{r3, r4, r7, lr}
 8001836:	af00      	add	r7, sp, #0
	static MENU_item_t item_old = MENU_NONE;
	static MENU_item_t item_new = MENU_NONE;
	static TS_StateTypeDef  TS_State;	// State of the touch controller
	BSP_TS_GetState(&TS_State);			// Get the state
 8001838:	4821      	ldr	r0, [pc, #132]	; (80018c0 <MENU_check_transition+0x8c>)
 800183a:	f002 f9bf 	bl	8003bbc <BSP_TS_GetState>
	if (TS_State.TouchDetected) {		// If a touch was detected
 800183e:	4b20      	ldr	r3, [pc, #128]	; (80018c0 <MENU_check_transition+0x8c>)
 8001840:	881b      	ldrh	r3, [r3, #0]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d039      	beq.n	80018ba <MENU_check_transition+0x86>
		/* Do only if last transition not pending anymore */
		if (MENU_NONE == MENU_transition) {
 8001846:	4b1f      	ldr	r3, [pc, #124]	; (80018c4 <MENU_check_transition+0x90>)
 8001848:	781b      	ldrb	r3, [r3, #0]
 800184a:	2b06      	cmp	r3, #6
 800184c:	d135      	bne.n	80018ba <MENU_check_transition+0x86>
			item_old = item_new;		// Store old item
 800184e:	4b1e      	ldr	r3, [pc, #120]	; (80018c8 <MENU_check_transition+0x94>)
 8001850:	781a      	ldrb	r2, [r3, #0]
 8001852:	4b1e      	ldr	r3, [pc, #120]	; (80018cc <MENU_check_transition+0x98>)
 8001854:	701a      	strb	r2, [r3, #0]
			/* If touched within the menu bar? */
			if ((MENU_Y < TS_State.Y) && (MENU_Y+MENU_HEIGHT > TS_State.Y)) {
 8001856:	f001 fb57 	bl	8002f08 <BSP_LCD_GetYSize>
 800185a:	4603      	mov	r3, r0
 800185c:	3b28      	subs	r3, #40	; 0x28
 800185e:	4a18      	ldr	r2, [pc, #96]	; (80018c0 <MENU_check_transition+0x8c>)
 8001860:	8892      	ldrh	r2, [r2, #4]
 8001862:	4293      	cmp	r3, r2
 8001864:	d229      	bcs.n	80018ba <MENU_check_transition+0x86>
 8001866:	f001 fb4f 	bl	8002f08 <BSP_LCD_GetYSize>
 800186a:	4602      	mov	r2, r0
 800186c:	4b14      	ldr	r3, [pc, #80]	; (80018c0 <MENU_check_transition+0x8c>)
 800186e:	889b      	ldrh	r3, [r3, #4]
 8001870:	429a      	cmp	r2, r3
 8001872:	d922      	bls.n	80018ba <MENU_check_transition+0x86>
				item_new = TS_State.X	// Calculate new item
 8001874:	4b12      	ldr	r3, [pc, #72]	; (80018c0 <MENU_check_transition+0x8c>)
 8001876:	885b      	ldrh	r3, [r3, #2]
 8001878:	461c      	mov	r4, r3
						/ (BSP_LCD_GetXSize()/MENU_ENTRY_COUNT);
 800187a:	f001 fb39 	bl	8002ef0 <BSP_LCD_GetXSize>
 800187e:	4602      	mov	r2, r0
 8001880:	4b13      	ldr	r3, [pc, #76]	; (80018d0 <MENU_check_transition+0x9c>)
 8001882:	fba3 2302 	umull	r2, r3, r3, r2
 8001886:	089b      	lsrs	r3, r3, #2
 8001888:	fbb4 f3f3 	udiv	r3, r4, r3
 800188c:	b2da      	uxtb	r2, r3
				item_new = TS_State.X	// Calculate new item
 800188e:	4b0e      	ldr	r3, [pc, #56]	; (80018c8 <MENU_check_transition+0x94>)
 8001890:	701a      	strb	r2, [r3, #0]
				if ((0 > item_new) || (MENU_ENTRY_COUNT <= item_new)) {
 8001892:	4b0d      	ldr	r3, [pc, #52]	; (80018c8 <MENU_check_transition+0x94>)
 8001894:	781b      	ldrb	r3, [r3, #0]
 8001896:	2b05      	cmp	r3, #5
 8001898:	d902      	bls.n	80018a0 <MENU_check_transition+0x6c>
					item_new = MENU_NONE;	// Out of bounds
 800189a:	4b0b      	ldr	r3, [pc, #44]	; (80018c8 <MENU_check_transition+0x94>)
 800189c:	2206      	movs	r2, #6
 800189e:	701a      	strb	r2, [r3, #0]
				}
				if (item_new == item_old) {	// 2 times the same menu item
 80018a0:	4b09      	ldr	r3, [pc, #36]	; (80018c8 <MENU_check_transition+0x94>)
 80018a2:	781a      	ldrb	r2, [r3, #0]
 80018a4:	4b09      	ldr	r3, [pc, #36]	; (80018cc <MENU_check_transition+0x98>)
 80018a6:	781b      	ldrb	r3, [r3, #0]
 80018a8:	429a      	cmp	r2, r3
 80018aa:	d106      	bne.n	80018ba <MENU_check_transition+0x86>
					item_new = MENU_NONE;
 80018ac:	4b06      	ldr	r3, [pc, #24]	; (80018c8 <MENU_check_transition+0x94>)
 80018ae:	2206      	movs	r2, #6
 80018b0:	701a      	strb	r2, [r3, #0]
					MENU_transition = item_old;
 80018b2:	4b06      	ldr	r3, [pc, #24]	; (80018cc <MENU_check_transition+0x98>)
 80018b4:	781a      	ldrb	r2, [r3, #0]
 80018b6:	4b03      	ldr	r3, [pc, #12]	; (80018c4 <MENU_check_transition+0x90>)
 80018b8:	701a      	strb	r2, [r3, #0]
				}
			}
		}
	}
}
 80018ba:	bf00      	nop
 80018bc:	bd98      	pop	{r3, r4, r7, pc}
 80018be:	bf00      	nop
 80018c0:	2000020c 	.word	0x2000020c
 80018c4:	20000000 	.word	0x20000000
 80018c8:	200000f4 	.word	0x200000f4
 80018cc:	200000f5 	.word	0x200000f5
 80018d0:	aaaaaaab 	.word	0xaaaaaaab

080018d4 <EXTI15_10_IRQHandler>:
 *
 * The touchscreen interrupt is connected to PA15.
 * @n The interrupt handler for external line 15 to 10 is called.
 *****************************************************************************/
void EXTI15_10_IRQHandler(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	af00      	add	r7, sp, #0
	if (EXTI->PR & EXTI_PR_PR15) {		// Check if interrupt on touchscreen
 80018d8:	4b0e      	ldr	r3, [pc, #56]	; (8001914 <EXTI15_10_IRQHandler+0x40>)
 80018da:	695b      	ldr	r3, [r3, #20]
 80018dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d014      	beq.n	800190e <EXTI15_10_IRQHandler+0x3a>
		EXTI->PR |= EXTI_PR_PR15;		// Clear pending interrupt on line 15
 80018e4:	4b0b      	ldr	r3, [pc, #44]	; (8001914 <EXTI15_10_IRQHandler+0x40>)
 80018e6:	695b      	ldr	r3, [r3, #20]
 80018e8:	4a0a      	ldr	r2, [pc, #40]	; (8001914 <EXTI15_10_IRQHandler+0x40>)
 80018ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80018ee:	6153      	str	r3, [r2, #20]
		if (BSP_TS_ITGetStatus()) {		// Get interrupt status
 80018f0:	f002 f958 	bl	8003ba4 <BSP_TS_ITGetStatus>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d003      	beq.n	8001902 <EXTI15_10_IRQHandler+0x2e>
			BSP_TS_ITClear();				// Clear touchscreen controller int.
 80018fa:	f002 fa11 	bl	8003d20 <BSP_TS_ITClear>
			MENU_check_transition();
 80018fe:	f7ff ff99 	bl	8001834 <MENU_check_transition>
		}
		EXTI->PR |= EXTI_PR_PR15;		// Clear pending interrupt on line 15
 8001902:	4b04      	ldr	r3, [pc, #16]	; (8001914 <EXTI15_10_IRQHandler+0x40>)
 8001904:	695b      	ldr	r3, [r3, #20]
 8001906:	4a03      	ldr	r2, [pc, #12]	; (8001914 <EXTI15_10_IRQHandler+0x40>)
 8001908:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800190c:	6153      	str	r3, [r2, #20]
	}
}
 800190e:	bf00      	nop
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	40013c00 	.word	0x40013c00

08001918 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	af00      	add	r7, sp, #0

  hspi3.Instance = SPI3;
 800191c:	4b17      	ldr	r3, [pc, #92]	; (800197c <MX_SPI3_Init+0x64>)
 800191e:	4a18      	ldr	r2, [pc, #96]	; (8001980 <MX_SPI3_Init+0x68>)
 8001920:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001922:	4b16      	ldr	r3, [pc, #88]	; (800197c <MX_SPI3_Init+0x64>)
 8001924:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001928:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800192a:	4b14      	ldr	r3, [pc, #80]	; (800197c <MX_SPI3_Init+0x64>)
 800192c:	2200      	movs	r2, #0
 800192e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001930:	4b12      	ldr	r3, [pc, #72]	; (800197c <MX_SPI3_Init+0x64>)
 8001932:	2200      	movs	r2, #0
 8001934:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001936:	4b11      	ldr	r3, [pc, #68]	; (800197c <MX_SPI3_Init+0x64>)
 8001938:	2200      	movs	r2, #0
 800193a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800193c:	4b0f      	ldr	r3, [pc, #60]	; (800197c <MX_SPI3_Init+0x64>)
 800193e:	2200      	movs	r2, #0
 8001940:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001942:	4b0e      	ldr	r3, [pc, #56]	; (800197c <MX_SPI3_Init+0x64>)
 8001944:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001948:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800194a:	4b0c      	ldr	r3, [pc, #48]	; (800197c <MX_SPI3_Init+0x64>)
 800194c:	2200      	movs	r2, #0
 800194e:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001950:	4b0a      	ldr	r3, [pc, #40]	; (800197c <MX_SPI3_Init+0x64>)
 8001952:	2200      	movs	r2, #0
 8001954:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001956:	4b09      	ldr	r3, [pc, #36]	; (800197c <MX_SPI3_Init+0x64>)
 8001958:	2200      	movs	r2, #0
 800195a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800195c:	4b07      	ldr	r3, [pc, #28]	; (800197c <MX_SPI3_Init+0x64>)
 800195e:	2200      	movs	r2, #0
 8001960:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8001962:	4b06      	ldr	r3, [pc, #24]	; (800197c <MX_SPI3_Init+0x64>)
 8001964:	220a      	movs	r2, #10
 8001966:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001968:	4804      	ldr	r0, [pc, #16]	; (800197c <MX_SPI3_Init+0x64>)
 800196a:	f006 f990 	bl	8007c8e <HAL_SPI_Init>
 800196e:	4603      	mov	r3, r0
 8001970:	2b00      	cmp	r3, #0
 8001972:	d001      	beq.n	8001978 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8001974:	f7ff fe68 	bl	8001648 <Error_Handler>
  }

}
 8001978:	bf00      	nop
 800197a:	bd80      	pop	{r7, pc}
 800197c:	200005e4 	.word	0x200005e4
 8001980:	40003c00 	.word	0x40003c00

08001984 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b08a      	sub	sp, #40	; 0x28
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800198c:	f107 0314 	add.w	r3, r7, #20
 8001990:	2200      	movs	r2, #0
 8001992:	601a      	str	r2, [r3, #0]
 8001994:	605a      	str	r2, [r3, #4]
 8001996:	609a      	str	r2, [r3, #8]
 8001998:	60da      	str	r2, [r3, #12]
 800199a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a28      	ldr	r2, [pc, #160]	; (8001a44 <HAL_SPI_MspInit+0xc0>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d14a      	bne.n	8001a3c <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80019a6:	2300      	movs	r3, #0
 80019a8:	613b      	str	r3, [r7, #16]
 80019aa:	4b27      	ldr	r3, [pc, #156]	; (8001a48 <HAL_SPI_MspInit+0xc4>)
 80019ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ae:	4a26      	ldr	r2, [pc, #152]	; (8001a48 <HAL_SPI_MspInit+0xc4>)
 80019b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80019b4:	6413      	str	r3, [r2, #64]	; 0x40
 80019b6:	4b24      	ldr	r3, [pc, #144]	; (8001a48 <HAL_SPI_MspInit+0xc4>)
 80019b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80019be:	613b      	str	r3, [r7, #16]
 80019c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019c2:	2300      	movs	r3, #0
 80019c4:	60fb      	str	r3, [r7, #12]
 80019c6:	4b20      	ldr	r3, [pc, #128]	; (8001a48 <HAL_SPI_MspInit+0xc4>)
 80019c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ca:	4a1f      	ldr	r2, [pc, #124]	; (8001a48 <HAL_SPI_MspInit+0xc4>)
 80019cc:	f043 0304 	orr.w	r3, r3, #4
 80019d0:	6313      	str	r3, [r2, #48]	; 0x30
 80019d2:	4b1d      	ldr	r3, [pc, #116]	; (8001a48 <HAL_SPI_MspInit+0xc4>)
 80019d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d6:	f003 0304 	and.w	r3, r3, #4
 80019da:	60fb      	str	r3, [r7, #12]
 80019dc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019de:	2300      	movs	r3, #0
 80019e0:	60bb      	str	r3, [r7, #8]
 80019e2:	4b19      	ldr	r3, [pc, #100]	; (8001a48 <HAL_SPI_MspInit+0xc4>)
 80019e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e6:	4a18      	ldr	r2, [pc, #96]	; (8001a48 <HAL_SPI_MspInit+0xc4>)
 80019e8:	f043 0302 	orr.w	r3, r3, #2
 80019ec:	6313      	str	r3, [r2, #48]	; 0x30
 80019ee:	4b16      	ldr	r3, [pc, #88]	; (8001a48 <HAL_SPI_MspInit+0xc4>)
 80019f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f2:	f003 0302 	and.w	r3, r3, #2
 80019f6:	60bb      	str	r3, [r7, #8]
 80019f8:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    PB3     ------> SPI3_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80019fa:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80019fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a00:	2302      	movs	r3, #2
 8001a02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a04:	2300      	movs	r3, #0
 8001a06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a08:	2303      	movs	r3, #3
 8001a0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001a0c:	2306      	movs	r3, #6
 8001a0e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a10:	f107 0314 	add.w	r3, r7, #20
 8001a14:	4619      	mov	r1, r3
 8001a16:	480d      	ldr	r0, [pc, #52]	; (8001a4c <HAL_SPI_MspInit+0xc8>)
 8001a18:	f003 fc44 	bl	80052a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001a1c:	2308      	movs	r3, #8
 8001a1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a20:	2302      	movs	r3, #2
 8001a22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a24:	2300      	movs	r3, #0
 8001a26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a28:	2303      	movs	r3, #3
 8001a2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001a2c:	2306      	movs	r3, #6
 8001a2e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a30:	f107 0314 	add.w	r3, r7, #20
 8001a34:	4619      	mov	r1, r3
 8001a36:	4806      	ldr	r0, [pc, #24]	; (8001a50 <HAL_SPI_MspInit+0xcc>)
 8001a38:	f003 fc34 	bl	80052a4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8001a3c:	bf00      	nop
 8001a3e:	3728      	adds	r7, #40	; 0x28
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	40003c00 	.word	0x40003c00
 8001a48:	40023800 	.word	0x40023800
 8001a4c:	40020800 	.word	0x40020800
 8001a50:	40020400 	.word	0x40020400

08001a54 <HAL_SPI_MspDeInit>:

void HAL_SPI_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]

  if(spiHandle->Instance==SPI3)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a0a      	ldr	r2, [pc, #40]	; (8001a8c <HAL_SPI_MspDeInit+0x38>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d10e      	bne.n	8001a84 <HAL_SPI_MspDeInit+0x30>
  {
  /* USER CODE BEGIN SPI3_MspDeInit 0 */

  /* USER CODE END SPI3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI3_CLK_DISABLE();
 8001a66:	4b0a      	ldr	r3, [pc, #40]	; (8001a90 <HAL_SPI_MspDeInit+0x3c>)
 8001a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a6a:	4a09      	ldr	r2, [pc, #36]	; (8001a90 <HAL_SPI_MspDeInit+0x3c>)
 8001a6c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001a70:	6413      	str	r3, [r2, #64]	; 0x40
    /**SPI3 GPIO Configuration
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    PB3     ------> SPI3_SCK
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_11|GPIO_PIN_12);
 8001a72:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8001a76:	4807      	ldr	r0, [pc, #28]	; (8001a94 <HAL_SPI_MspDeInit+0x40>)
 8001a78:	f003 fdbe 	bl	80055f8 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_3);
 8001a7c:	2108      	movs	r1, #8
 8001a7e:	4806      	ldr	r0, [pc, #24]	; (8001a98 <HAL_SPI_MspDeInit+0x44>)
 8001a80:	f003 fdba 	bl	80055f8 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN SPI3_MspDeInit 1 */

  /* USER CODE END SPI3_MspDeInit 1 */
  }
}
 8001a84:	bf00      	nop
 8001a86:	3708      	adds	r7, #8
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	40003c00 	.word	0x40003c00
 8001a90:	40023800 	.word	0x40023800
 8001a94:	40020800 	.word	0x40020800
 8001a98:	40020400 	.word	0x40020400

08001a9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b082      	sub	sp, #8
 8001aa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	607b      	str	r3, [r7, #4]
 8001aa6:	4b12      	ldr	r3, [pc, #72]	; (8001af0 <HAL_MspInit+0x54>)
 8001aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aaa:	4a11      	ldr	r2, [pc, #68]	; (8001af0 <HAL_MspInit+0x54>)
 8001aac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ab0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ab2:	4b0f      	ldr	r3, [pc, #60]	; (8001af0 <HAL_MspInit+0x54>)
 8001ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ab6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001aba:	607b      	str	r3, [r7, #4]
 8001abc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001abe:	2300      	movs	r3, #0
 8001ac0:	603b      	str	r3, [r7, #0]
 8001ac2:	4b0b      	ldr	r3, [pc, #44]	; (8001af0 <HAL_MspInit+0x54>)
 8001ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac6:	4a0a      	ldr	r2, [pc, #40]	; (8001af0 <HAL_MspInit+0x54>)
 8001ac8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001acc:	6413      	str	r3, [r2, #64]	; 0x40
 8001ace:	4b08      	ldr	r3, [pc, #32]	; (8001af0 <HAL_MspInit+0x54>)
 8001ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ad6:	603b      	str	r3, [r7, #0]
 8001ad8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001ada:	2200      	movs	r2, #0
 8001adc:	210f      	movs	r1, #15
 8001ade:	f06f 0001 	mvn.w	r0, #1
 8001ae2:	f002 fe41 	bl	8004768 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ae6:	bf00      	nop
 8001ae8:	3708      	adds	r7, #8
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	40023800 	.word	0x40023800

08001af4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b08c      	sub	sp, #48	; 0x30
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001afc:	2300      	movs	r3, #0
 8001afe:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001b00:	2300      	movs	r3, #0
 8001b02:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001b04:	2200      	movs	r2, #0
 8001b06:	6879      	ldr	r1, [r7, #4]
 8001b08:	2036      	movs	r0, #54	; 0x36
 8001b0a:	f002 fe2d 	bl	8004768 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001b0e:	2036      	movs	r0, #54	; 0x36
 8001b10:	f002 fe46 	bl	80047a0 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001b14:	2300      	movs	r3, #0
 8001b16:	60fb      	str	r3, [r7, #12]
 8001b18:	4b1f      	ldr	r3, [pc, #124]	; (8001b98 <HAL_InitTick+0xa4>)
 8001b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1c:	4a1e      	ldr	r2, [pc, #120]	; (8001b98 <HAL_InitTick+0xa4>)
 8001b1e:	f043 0310 	orr.w	r3, r3, #16
 8001b22:	6413      	str	r3, [r2, #64]	; 0x40
 8001b24:	4b1c      	ldr	r3, [pc, #112]	; (8001b98 <HAL_InitTick+0xa4>)
 8001b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b28:	f003 0310 	and.w	r3, r3, #16
 8001b2c:	60fb      	str	r3, [r7, #12]
 8001b2e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001b30:	f107 0210 	add.w	r2, r7, #16
 8001b34:	f107 0314 	add.w	r3, r7, #20
 8001b38:	4611      	mov	r1, r2
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f005 fe38 	bl	80077b0 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001b40:	f005 fe0e 	bl	8007760 <HAL_RCC_GetPCLK1Freq>
 8001b44:	4603      	mov	r3, r0
 8001b46:	005b      	lsls	r3, r3, #1
 8001b48:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001b4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b4c:	4a13      	ldr	r2, [pc, #76]	; (8001b9c <HAL_InitTick+0xa8>)
 8001b4e:	fba2 2303 	umull	r2, r3, r2, r3
 8001b52:	0c9b      	lsrs	r3, r3, #18
 8001b54:	3b01      	subs	r3, #1
 8001b56:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001b58:	4b11      	ldr	r3, [pc, #68]	; (8001ba0 <HAL_InitTick+0xac>)
 8001b5a:	4a12      	ldr	r2, [pc, #72]	; (8001ba4 <HAL_InitTick+0xb0>)
 8001b5c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8001b5e:	4b10      	ldr	r3, [pc, #64]	; (8001ba0 <HAL_InitTick+0xac>)
 8001b60:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001b64:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001b66:	4a0e      	ldr	r2, [pc, #56]	; (8001ba0 <HAL_InitTick+0xac>)
 8001b68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b6a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001b6c:	4b0c      	ldr	r3, [pc, #48]	; (8001ba0 <HAL_InitTick+0xac>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b72:	4b0b      	ldr	r3, [pc, #44]	; (8001ba0 <HAL_InitTick+0xac>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001b78:	4809      	ldr	r0, [pc, #36]	; (8001ba0 <HAL_InitTick+0xac>)
 8001b7a:	f006 fe13 	bl	80087a4 <HAL_TIM_Base_Init>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d104      	bne.n	8001b8e <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001b84:	4806      	ldr	r0, [pc, #24]	; (8001ba0 <HAL_InitTick+0xac>)
 8001b86:	f006 fe38 	bl	80087fa <HAL_TIM_Base_Start_IT>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	e000      	b.n	8001b90 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8001b8e:	2301      	movs	r3, #1
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	3730      	adds	r7, #48	; 0x30
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	40023800 	.word	0x40023800
 8001b9c:	431bde83 	.word	0x431bde83
 8001ba0:	2000063c 	.word	0x2000063c
 8001ba4:	40001000 	.word	0x40001000

08001ba8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001bac:	bf00      	nop
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr

08001bb6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bb6:	b480      	push	{r7}
 8001bb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bba:	e7fe      	b.n	8001bba <HardFault_Handler+0x4>

08001bbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bc0:	e7fe      	b.n	8001bc0 <MemManage_Handler+0x4>

08001bc2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bc2:	b480      	push	{r7}
 8001bc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bc6:	e7fe      	b.n	8001bc6 <BusFault_Handler+0x4>

08001bc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bcc:	e7fe      	b.n	8001bcc <UsageFault_Handler+0x4>

08001bce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bce:	b480      	push	{r7}
 8001bd0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bd2:	bf00      	nop
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr

08001bdc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001be0:	bf00      	nop
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr

08001bea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bea:	b480      	push	{r7}
 8001bec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bee:	bf00      	nop
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf6:	4770      	bx	lr

08001bf8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	af00      	add	r7, sp, #0

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bfc:	bf00      	nop
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr
	...

08001c08 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001c0c:	4802      	ldr	r0, [pc, #8]	; (8001c18 <TIM6_DAC_IRQHandler+0x10>)
 8001c0e:	f006 fe18 	bl	8008842 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001c12:	bf00      	nop
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	2000063c 	.word	0x2000063c

08001c1c <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8001c20:	4802      	ldr	r0, [pc, #8]	; (8001c2c <DMA2D_IRQHandler+0x10>)
 8001c22:	f003 f900 	bl	8004e26 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8001c26:	bf00      	nop
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	20000474 	.word	0x20000474

08001c30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b086      	sub	sp, #24
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c38:	4a14      	ldr	r2, [pc, #80]	; (8001c8c <_sbrk+0x5c>)
 8001c3a:	4b15      	ldr	r3, [pc, #84]	; (8001c90 <_sbrk+0x60>)
 8001c3c:	1ad3      	subs	r3, r2, r3
 8001c3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c44:	4b13      	ldr	r3, [pc, #76]	; (8001c94 <_sbrk+0x64>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d102      	bne.n	8001c52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c4c:	4b11      	ldr	r3, [pc, #68]	; (8001c94 <_sbrk+0x64>)
 8001c4e:	4a12      	ldr	r2, [pc, #72]	; (8001c98 <_sbrk+0x68>)
 8001c50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c52:	4b10      	ldr	r3, [pc, #64]	; (8001c94 <_sbrk+0x64>)
 8001c54:	681a      	ldr	r2, [r3, #0]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	4413      	add	r3, r2
 8001c5a:	693a      	ldr	r2, [r7, #16]
 8001c5c:	429a      	cmp	r2, r3
 8001c5e:	d207      	bcs.n	8001c70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c60:	f007 ff8e 	bl	8009b80 <__errno>
 8001c64:	4602      	mov	r2, r0
 8001c66:	230c      	movs	r3, #12
 8001c68:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001c6a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c6e:	e009      	b.n	8001c84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c70:	4b08      	ldr	r3, [pc, #32]	; (8001c94 <_sbrk+0x64>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c76:	4b07      	ldr	r3, [pc, #28]	; (8001c94 <_sbrk+0x64>)
 8001c78:	681a      	ldr	r2, [r3, #0]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	4413      	add	r3, r2
 8001c7e:	4a05      	ldr	r2, [pc, #20]	; (8001c94 <_sbrk+0x64>)
 8001c80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c82:	68fb      	ldr	r3, [r7, #12]
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	3718      	adds	r7, #24
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	20030000 	.word	0x20030000
 8001c90:	00000400 	.word	0x00000400
 8001c94:	20000214 	.word	0x20000214
 8001c98:	20000808 	.word	0x20000808

08001c9c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ca0:	4b08      	ldr	r3, [pc, #32]	; (8001cc4 <SystemInit+0x28>)
 8001ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ca6:	4a07      	ldr	r2, [pc, #28]	; (8001cc4 <SystemInit+0x28>)
 8001ca8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001cac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001cb0:	4b04      	ldr	r3, [pc, #16]	; (8001cc4 <SystemInit+0x28>)
 8001cb2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001cb6:	609a      	str	r2, [r3, #8]
#endif
}
 8001cb8:	bf00      	nop
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr
 8001cc2:	bf00      	nop
 8001cc4:	e000ed00 	.word	0xe000ed00

08001cc8 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b086      	sub	sp, #24
 8001ccc:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001cce:	f107 0308 	add.w	r3, r7, #8
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	601a      	str	r2, [r3, #0]
 8001cd6:	605a      	str	r2, [r3, #4]
 8001cd8:	609a      	str	r2, [r3, #8]
 8001cda:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cdc:	463b      	mov	r3, r7
 8001cde:	2200      	movs	r2, #0
 8001ce0:	601a      	str	r2, [r3, #0]
 8001ce2:	605a      	str	r2, [r3, #4]

  htim1.Instance = TIM1;
 8001ce4:	4b1e      	ldr	r3, [pc, #120]	; (8001d60 <MX_TIM1_Init+0x98>)
 8001ce6:	4a1f      	ldr	r2, [pc, #124]	; (8001d64 <MX_TIM1_Init+0x9c>)
 8001ce8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001cea:	4b1d      	ldr	r3, [pc, #116]	; (8001d60 <MX_TIM1_Init+0x98>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cf0:	4b1b      	ldr	r3, [pc, #108]	; (8001d60 <MX_TIM1_Init+0x98>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001cf6:	4b1a      	ldr	r3, [pc, #104]	; (8001d60 <MX_TIM1_Init+0x98>)
 8001cf8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001cfc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cfe:	4b18      	ldr	r3, [pc, #96]	; (8001d60 <MX_TIM1_Init+0x98>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001d04:	4b16      	ldr	r3, [pc, #88]	; (8001d60 <MX_TIM1_Init+0x98>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d0a:	4b15      	ldr	r3, [pc, #84]	; (8001d60 <MX_TIM1_Init+0x98>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001d10:	4813      	ldr	r0, [pc, #76]	; (8001d60 <MX_TIM1_Init+0x98>)
 8001d12:	f006 fd47 	bl	80087a4 <HAL_TIM_Base_Init>
 8001d16:	4603      	mov	r3, r0
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d001      	beq.n	8001d20 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001d1c:	f7ff fc94 	bl	8001648 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d24:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001d26:	f107 0308 	add.w	r3, r7, #8
 8001d2a:	4619      	mov	r1, r3
 8001d2c:	480c      	ldr	r0, [pc, #48]	; (8001d60 <MX_TIM1_Init+0x98>)
 8001d2e:	f006 fe90 	bl	8008a52 <HAL_TIM_ConfigClockSource>
 8001d32:	4603      	mov	r3, r0
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d001      	beq.n	8001d3c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001d38:	f7ff fc86 	bl	8001648 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d40:	2300      	movs	r3, #0
 8001d42:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001d44:	463b      	mov	r3, r7
 8001d46:	4619      	mov	r1, r3
 8001d48:	4805      	ldr	r0, [pc, #20]	; (8001d60 <MX_TIM1_Init+0x98>)
 8001d4a:	f007 f89b 	bl	8008e84 <HAL_TIMEx_MasterConfigSynchronization>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d001      	beq.n	8001d58 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001d54:	f7ff fc78 	bl	8001648 <Error_Handler>
  }

}
 8001d58:	bf00      	nop
 8001d5a:	3718      	adds	r7, #24
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	2000067c 	.word	0x2000067c
 8001d64:	40010000 	.word	0x40010000

08001d68 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b085      	sub	sp, #20
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a0b      	ldr	r2, [pc, #44]	; (8001da4 <HAL_TIM_Base_MspInit+0x3c>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d10d      	bne.n	8001d96 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	60fb      	str	r3, [r7, #12]
 8001d7e:	4b0a      	ldr	r3, [pc, #40]	; (8001da8 <HAL_TIM_Base_MspInit+0x40>)
 8001d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d82:	4a09      	ldr	r2, [pc, #36]	; (8001da8 <HAL_TIM_Base_MspInit+0x40>)
 8001d84:	f043 0301 	orr.w	r3, r3, #1
 8001d88:	6453      	str	r3, [r2, #68]	; 0x44
 8001d8a:	4b07      	ldr	r3, [pc, #28]	; (8001da8 <HAL_TIM_Base_MspInit+0x40>)
 8001d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d8e:	f003 0301 	and.w	r3, r3, #1
 8001d92:	60fb      	str	r3, [r7, #12]
 8001d94:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001d96:	bf00      	nop
 8001d98:	3714      	adds	r7, #20
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr
 8001da2:	bf00      	nop
 8001da4:	40010000 	.word	0x40010000
 8001da8:	40023800 	.word	0x40023800

08001dac <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8001db0:	4b11      	ldr	r3, [pc, #68]	; (8001df8 <MX_USART1_UART_Init+0x4c>)
 8001db2:	4a12      	ldr	r2, [pc, #72]	; (8001dfc <MX_USART1_UART_Init+0x50>)
 8001db4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001db6:	4b10      	ldr	r3, [pc, #64]	; (8001df8 <MX_USART1_UART_Init+0x4c>)
 8001db8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001dbc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001dbe:	4b0e      	ldr	r3, [pc, #56]	; (8001df8 <MX_USART1_UART_Init+0x4c>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001dc4:	4b0c      	ldr	r3, [pc, #48]	; (8001df8 <MX_USART1_UART_Init+0x4c>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001dca:	4b0b      	ldr	r3, [pc, #44]	; (8001df8 <MX_USART1_UART_Init+0x4c>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001dd0:	4b09      	ldr	r3, [pc, #36]	; (8001df8 <MX_USART1_UART_Init+0x4c>)
 8001dd2:	220c      	movs	r2, #12
 8001dd4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001dd6:	4b08      	ldr	r3, [pc, #32]	; (8001df8 <MX_USART1_UART_Init+0x4c>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ddc:	4b06      	ldr	r3, [pc, #24]	; (8001df8 <MX_USART1_UART_Init+0x4c>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001de2:	4805      	ldr	r0, [pc, #20]	; (8001df8 <MX_USART1_UART_Init+0x4c>)
 8001de4:	f007 f8de 	bl	8008fa4 <HAL_UART_Init>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d001      	beq.n	8001df2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001dee:	f7ff fc2b 	bl	8001648 <Error_Handler>
  }

}
 8001df2:	bf00      	nop
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	200006bc 	.word	0x200006bc
 8001dfc:	40011000 	.word	0x40011000

08001e00 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b08a      	sub	sp, #40	; 0x28
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e08:	f107 0314 	add.w	r3, r7, #20
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	601a      	str	r2, [r3, #0]
 8001e10:	605a      	str	r2, [r3, #4]
 8001e12:	609a      	str	r2, [r3, #8]
 8001e14:	60da      	str	r2, [r3, #12]
 8001e16:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a19      	ldr	r2, [pc, #100]	; (8001e84 <HAL_UART_MspInit+0x84>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d12c      	bne.n	8001e7c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001e22:	2300      	movs	r3, #0
 8001e24:	613b      	str	r3, [r7, #16]
 8001e26:	4b18      	ldr	r3, [pc, #96]	; (8001e88 <HAL_UART_MspInit+0x88>)
 8001e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e2a:	4a17      	ldr	r2, [pc, #92]	; (8001e88 <HAL_UART_MspInit+0x88>)
 8001e2c:	f043 0310 	orr.w	r3, r3, #16
 8001e30:	6453      	str	r3, [r2, #68]	; 0x44
 8001e32:	4b15      	ldr	r3, [pc, #84]	; (8001e88 <HAL_UART_MspInit+0x88>)
 8001e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e36:	f003 0310 	and.w	r3, r3, #16
 8001e3a:	613b      	str	r3, [r7, #16]
 8001e3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e3e:	2300      	movs	r3, #0
 8001e40:	60fb      	str	r3, [r7, #12]
 8001e42:	4b11      	ldr	r3, [pc, #68]	; (8001e88 <HAL_UART_MspInit+0x88>)
 8001e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e46:	4a10      	ldr	r2, [pc, #64]	; (8001e88 <HAL_UART_MspInit+0x88>)
 8001e48:	f043 0301 	orr.w	r3, r3, #1
 8001e4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e4e:	4b0e      	ldr	r3, [pc, #56]	; (8001e88 <HAL_UART_MspInit+0x88>)
 8001e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e52:	f003 0301 	and.w	r3, r3, #1
 8001e56:	60fb      	str	r3, [r7, #12]
 8001e58:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001e5a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001e5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e60:	2302      	movs	r3, #2
 8001e62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e64:	2300      	movs	r3, #0
 8001e66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e68:	2303      	movs	r3, #3
 8001e6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001e6c:	2307      	movs	r3, #7
 8001e6e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e70:	f107 0314 	add.w	r3, r7, #20
 8001e74:	4619      	mov	r1, r3
 8001e76:	4805      	ldr	r0, [pc, #20]	; (8001e8c <HAL_UART_MspInit+0x8c>)
 8001e78:	f003 fa14 	bl	80052a4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001e7c:	bf00      	nop
 8001e7e:	3728      	adds	r7, #40	; 0x28
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	40011000 	.word	0x40011000
 8001e88:	40023800 	.word	0x40023800
 8001e8c:	40020000 	.word	0x40020000

08001e90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001e90:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ec8 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001e94:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001e96:	e003      	b.n	8001ea0 <LoopCopyDataInit>

08001e98 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001e98:	4b0c      	ldr	r3, [pc, #48]	; (8001ecc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001e9a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001e9c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001e9e:	3104      	adds	r1, #4

08001ea0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001ea0:	480b      	ldr	r0, [pc, #44]	; (8001ed0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001ea2:	4b0c      	ldr	r3, [pc, #48]	; (8001ed4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001ea4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001ea6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001ea8:	d3f6      	bcc.n	8001e98 <CopyDataInit>
  ldr  r2, =_sbss
 8001eaa:	4a0b      	ldr	r2, [pc, #44]	; (8001ed8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001eac:	e002      	b.n	8001eb4 <LoopFillZerobss>

08001eae <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001eae:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001eb0:	f842 3b04 	str.w	r3, [r2], #4

08001eb4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001eb4:	4b09      	ldr	r3, [pc, #36]	; (8001edc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001eb6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001eb8:	d3f9      	bcc.n	8001eae <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001eba:	f7ff feef 	bl	8001c9c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ebe:	f007 fe65 	bl	8009b8c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ec2:	f7ff f9fd 	bl	80012c0 <main>
  bx  lr    
 8001ec6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001ec8:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8001ecc:	0800cfe8 	.word	0x0800cfe8
  ldr  r0, =_sdata
 8001ed0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001ed4:	200001ec 	.word	0x200001ec
  ldr  r2, =_sbss
 8001ed8:	200001ec 	.word	0x200001ec
  ldr  r3, = _ebss
 8001edc:	20000804 	.word	0x20000804

08001ee0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ee0:	e7fe      	b.n	8001ee0 <ADC_IRQHandler>

08001ee2 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8001ee2:	b580      	push	{r7, lr}
 8001ee4:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8001ee6:	f000 fe4b 	bl	8002b80 <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 8001eea:	20ca      	movs	r0, #202	; 0xca
 8001eec:	f000 f95d 	bl	80021aa <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 8001ef0:	20c3      	movs	r0, #195	; 0xc3
 8001ef2:	f000 f967 	bl	80021c4 <ili9341_WriteData>
  ili9341_WriteData(0x08);
 8001ef6:	2008      	movs	r0, #8
 8001ef8:	f000 f964 	bl	80021c4 <ili9341_WriteData>
  ili9341_WriteData(0x50);
 8001efc:	2050      	movs	r0, #80	; 0x50
 8001efe:	f000 f961 	bl	80021c4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 8001f02:	20cf      	movs	r0, #207	; 0xcf
 8001f04:	f000 f951 	bl	80021aa <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001f08:	2000      	movs	r0, #0
 8001f0a:	f000 f95b 	bl	80021c4 <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 8001f0e:	20c1      	movs	r0, #193	; 0xc1
 8001f10:	f000 f958 	bl	80021c4 <ili9341_WriteData>
  ili9341_WriteData(0x30);
 8001f14:	2030      	movs	r0, #48	; 0x30
 8001f16:	f000 f955 	bl	80021c4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 8001f1a:	20ed      	movs	r0, #237	; 0xed
 8001f1c:	f000 f945 	bl	80021aa <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 8001f20:	2064      	movs	r0, #100	; 0x64
 8001f22:	f000 f94f 	bl	80021c4 <ili9341_WriteData>
  ili9341_WriteData(0x03);
 8001f26:	2003      	movs	r0, #3
 8001f28:	f000 f94c 	bl	80021c4 <ili9341_WriteData>
  ili9341_WriteData(0x12);
 8001f2c:	2012      	movs	r0, #18
 8001f2e:	f000 f949 	bl	80021c4 <ili9341_WriteData>
  ili9341_WriteData(0x81);
 8001f32:	2081      	movs	r0, #129	; 0x81
 8001f34:	f000 f946 	bl	80021c4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 8001f38:	20e8      	movs	r0, #232	; 0xe8
 8001f3a:	f000 f936 	bl	80021aa <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 8001f3e:	2085      	movs	r0, #133	; 0x85
 8001f40:	f000 f940 	bl	80021c4 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001f44:	2000      	movs	r0, #0
 8001f46:	f000 f93d 	bl	80021c4 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8001f4a:	2078      	movs	r0, #120	; 0x78
 8001f4c:	f000 f93a 	bl	80021c4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 8001f50:	20cb      	movs	r0, #203	; 0xcb
 8001f52:	f000 f92a 	bl	80021aa <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 8001f56:	2039      	movs	r0, #57	; 0x39
 8001f58:	f000 f934 	bl	80021c4 <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 8001f5c:	202c      	movs	r0, #44	; 0x2c
 8001f5e:	f000 f931 	bl	80021c4 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001f62:	2000      	movs	r0, #0
 8001f64:	f000 f92e 	bl	80021c4 <ili9341_WriteData>
  ili9341_WriteData(0x34);
 8001f68:	2034      	movs	r0, #52	; 0x34
 8001f6a:	f000 f92b 	bl	80021c4 <ili9341_WriteData>
  ili9341_WriteData(0x02);
 8001f6e:	2002      	movs	r0, #2
 8001f70:	f000 f928 	bl	80021c4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 8001f74:	20f7      	movs	r0, #247	; 0xf7
 8001f76:	f000 f918 	bl	80021aa <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 8001f7a:	2020      	movs	r0, #32
 8001f7c:	f000 f922 	bl	80021c4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 8001f80:	20ea      	movs	r0, #234	; 0xea
 8001f82:	f000 f912 	bl	80021aa <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001f86:	2000      	movs	r0, #0
 8001f88:	f000 f91c 	bl	80021c4 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001f8c:	2000      	movs	r0, #0
 8001f8e:	f000 f919 	bl	80021c4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 8001f92:	20b1      	movs	r0, #177	; 0xb1
 8001f94:	f000 f909 	bl	80021aa <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001f98:	2000      	movs	r0, #0
 8001f9a:	f000 f913 	bl	80021c4 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8001f9e:	201b      	movs	r0, #27
 8001fa0:	f000 f910 	bl	80021c4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8001fa4:	20b6      	movs	r0, #182	; 0xb6
 8001fa6:	f000 f900 	bl	80021aa <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8001faa:	200a      	movs	r0, #10
 8001fac:	f000 f90a 	bl	80021c4 <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 8001fb0:	20a2      	movs	r0, #162	; 0xa2
 8001fb2:	f000 f907 	bl	80021c4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 8001fb6:	20c0      	movs	r0, #192	; 0xc0
 8001fb8:	f000 f8f7 	bl	80021aa <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8001fbc:	2010      	movs	r0, #16
 8001fbe:	f000 f901 	bl	80021c4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 8001fc2:	20c1      	movs	r0, #193	; 0xc1
 8001fc4:	f000 f8f1 	bl	80021aa <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8001fc8:	2010      	movs	r0, #16
 8001fca:	f000 f8fb 	bl	80021c4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 8001fce:	20c5      	movs	r0, #197	; 0xc5
 8001fd0:	f000 f8eb 	bl	80021aa <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 8001fd4:	2045      	movs	r0, #69	; 0x45
 8001fd6:	f000 f8f5 	bl	80021c4 <ili9341_WriteData>
  ili9341_WriteData(0x15);
 8001fda:	2015      	movs	r0, #21
 8001fdc:	f000 f8f2 	bl	80021c4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 8001fe0:	20c7      	movs	r0, #199	; 0xc7
 8001fe2:	f000 f8e2 	bl	80021aa <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 8001fe6:	2090      	movs	r0, #144	; 0x90
 8001fe8:	f000 f8ec 	bl	80021c4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 8001fec:	2036      	movs	r0, #54	; 0x36
 8001fee:	f000 f8dc 	bl	80021aa <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 8001ff2:	20c8      	movs	r0, #200	; 0xc8
 8001ff4:	f000 f8e6 	bl	80021c4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 8001ff8:	20f2      	movs	r0, #242	; 0xf2
 8001ffa:	f000 f8d6 	bl	80021aa <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001ffe:	2000      	movs	r0, #0
 8002000:	f000 f8e0 	bl	80021c4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 8002004:	20b0      	movs	r0, #176	; 0xb0
 8002006:	f000 f8d0 	bl	80021aa <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 800200a:	20c2      	movs	r0, #194	; 0xc2
 800200c:	f000 f8da 	bl	80021c4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8002010:	20b6      	movs	r0, #182	; 0xb6
 8002012:	f000 f8ca 	bl	80021aa <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8002016:	200a      	movs	r0, #10
 8002018:	f000 f8d4 	bl	80021c4 <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 800201c:	20a7      	movs	r0, #167	; 0xa7
 800201e:	f000 f8d1 	bl	80021c4 <ili9341_WriteData>
  ili9341_WriteData(0x27);
 8002022:	2027      	movs	r0, #39	; 0x27
 8002024:	f000 f8ce 	bl	80021c4 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8002028:	2004      	movs	r0, #4
 800202a:	f000 f8cb 	bl	80021c4 <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 800202e:	202a      	movs	r0, #42	; 0x2a
 8002030:	f000 f8bb 	bl	80021aa <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002034:	2000      	movs	r0, #0
 8002036:	f000 f8c5 	bl	80021c4 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800203a:	2000      	movs	r0, #0
 800203c:	f000 f8c2 	bl	80021c4 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002040:	2000      	movs	r0, #0
 8002042:	f000 f8bf 	bl	80021c4 <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 8002046:	20ef      	movs	r0, #239	; 0xef
 8002048:	f000 f8bc 	bl	80021c4 <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 800204c:	202b      	movs	r0, #43	; 0x2b
 800204e:	f000 f8ac 	bl	80021aa <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002052:	2000      	movs	r0, #0
 8002054:	f000 f8b6 	bl	80021c4 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002058:	2000      	movs	r0, #0
 800205a:	f000 f8b3 	bl	80021c4 <ili9341_WriteData>
  ili9341_WriteData(0x01);
 800205e:	2001      	movs	r0, #1
 8002060:	f000 f8b0 	bl	80021c4 <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 8002064:	203f      	movs	r0, #63	; 0x3f
 8002066:	f000 f8ad 	bl	80021c4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 800206a:	20f6      	movs	r0, #246	; 0xf6
 800206c:	f000 f89d 	bl	80021aa <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8002070:	2001      	movs	r0, #1
 8002072:	f000 f8a7 	bl	80021c4 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8002076:	2000      	movs	r0, #0
 8002078:	f000 f8a4 	bl	80021c4 <ili9341_WriteData>
  ili9341_WriteData(0x06);
 800207c:	2006      	movs	r0, #6
 800207e:	f000 f8a1 	bl	80021c4 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 8002082:	202c      	movs	r0, #44	; 0x2c
 8002084:	f000 f891 	bl	80021aa <ili9341_WriteReg>
  LCD_Delay(200);
 8002088:	20c8      	movs	r0, #200	; 0xc8
 800208a:	f000 fe67 	bl	8002d5c <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 800208e:	2026      	movs	r0, #38	; 0x26
 8002090:	f000 f88b 	bl	80021aa <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8002094:	2001      	movs	r0, #1
 8002096:	f000 f895 	bl	80021c4 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 800209a:	20e0      	movs	r0, #224	; 0xe0
 800209c:	f000 f885 	bl	80021aa <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 80020a0:	200f      	movs	r0, #15
 80020a2:	f000 f88f 	bl	80021c4 <ili9341_WriteData>
  ili9341_WriteData(0x29);
 80020a6:	2029      	movs	r0, #41	; 0x29
 80020a8:	f000 f88c 	bl	80021c4 <ili9341_WriteData>
  ili9341_WriteData(0x24);
 80020ac:	2024      	movs	r0, #36	; 0x24
 80020ae:	f000 f889 	bl	80021c4 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 80020b2:	200c      	movs	r0, #12
 80020b4:	f000 f886 	bl	80021c4 <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 80020b8:	200e      	movs	r0, #14
 80020ba:	f000 f883 	bl	80021c4 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 80020be:	2009      	movs	r0, #9
 80020c0:	f000 f880 	bl	80021c4 <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 80020c4:	204e      	movs	r0, #78	; 0x4e
 80020c6:	f000 f87d 	bl	80021c4 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 80020ca:	2078      	movs	r0, #120	; 0x78
 80020cc:	f000 f87a 	bl	80021c4 <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 80020d0:	203c      	movs	r0, #60	; 0x3c
 80020d2:	f000 f877 	bl	80021c4 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 80020d6:	2009      	movs	r0, #9
 80020d8:	f000 f874 	bl	80021c4 <ili9341_WriteData>
  ili9341_WriteData(0x13);
 80020dc:	2013      	movs	r0, #19
 80020de:	f000 f871 	bl	80021c4 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 80020e2:	2005      	movs	r0, #5
 80020e4:	f000 f86e 	bl	80021c4 <ili9341_WriteData>
  ili9341_WriteData(0x17);
 80020e8:	2017      	movs	r0, #23
 80020ea:	f000 f86b 	bl	80021c4 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 80020ee:	2011      	movs	r0, #17
 80020f0:	f000 f868 	bl	80021c4 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80020f4:	2000      	movs	r0, #0
 80020f6:	f000 f865 	bl	80021c4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 80020fa:	20e1      	movs	r0, #225	; 0xe1
 80020fc:	f000 f855 	bl	80021aa <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8002100:	2000      	movs	r0, #0
 8002102:	f000 f85f 	bl	80021c4 <ili9341_WriteData>
  ili9341_WriteData(0x16);
 8002106:	2016      	movs	r0, #22
 8002108:	f000 f85c 	bl	80021c4 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 800210c:	201b      	movs	r0, #27
 800210e:	f000 f859 	bl	80021c4 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8002112:	2004      	movs	r0, #4
 8002114:	f000 f856 	bl	80021c4 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8002118:	2011      	movs	r0, #17
 800211a:	f000 f853 	bl	80021c4 <ili9341_WriteData>
  ili9341_WriteData(0x07);
 800211e:	2007      	movs	r0, #7
 8002120:	f000 f850 	bl	80021c4 <ili9341_WriteData>
  ili9341_WriteData(0x31);
 8002124:	2031      	movs	r0, #49	; 0x31
 8002126:	f000 f84d 	bl	80021c4 <ili9341_WriteData>
  ili9341_WriteData(0x33);
 800212a:	2033      	movs	r0, #51	; 0x33
 800212c:	f000 f84a 	bl	80021c4 <ili9341_WriteData>
  ili9341_WriteData(0x42);
 8002130:	2042      	movs	r0, #66	; 0x42
 8002132:	f000 f847 	bl	80021c4 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8002136:	2005      	movs	r0, #5
 8002138:	f000 f844 	bl	80021c4 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 800213c:	200c      	movs	r0, #12
 800213e:	f000 f841 	bl	80021c4 <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 8002142:	200a      	movs	r0, #10
 8002144:	f000 f83e 	bl	80021c4 <ili9341_WriteData>
  ili9341_WriteData(0x28);
 8002148:	2028      	movs	r0, #40	; 0x28
 800214a:	f000 f83b 	bl	80021c4 <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 800214e:	202f      	movs	r0, #47	; 0x2f
 8002150:	f000 f838 	bl	80021c4 <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 8002154:	200f      	movs	r0, #15
 8002156:	f000 f835 	bl	80021c4 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 800215a:	2011      	movs	r0, #17
 800215c:	f000 f825 	bl	80021aa <ili9341_WriteReg>
  LCD_Delay(200);
 8002160:	20c8      	movs	r0, #200	; 0xc8
 8002162:	f000 fdfb 	bl	8002d5c <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8002166:	2029      	movs	r0, #41	; 0x29
 8002168:	f000 f81f 	bl	80021aa <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 800216c:	202c      	movs	r0, #44	; 0x2c
 800216e:	f000 f81c 	bl	80021aa <ili9341_WriteReg>
}
 8002172:	bf00      	nop
 8002174:	bd80      	pop	{r7, pc}

08002176 <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 8002176:	b580      	push	{r7, lr}
 8002178:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 800217a:	f000 fd01 	bl	8002b80 <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 800217e:	2103      	movs	r1, #3
 8002180:	20d3      	movs	r0, #211	; 0xd3
 8002182:	f000 f82c 	bl	80021de <ili9341_ReadData>
 8002186:	4603      	mov	r3, r0
 8002188:	b29b      	uxth	r3, r3
}
 800218a:	4618      	mov	r0, r3
 800218c:	bd80      	pop	{r7, pc}

0800218e <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 800218e:	b580      	push	{r7, lr}
 8002190:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8002192:	2029      	movs	r0, #41	; 0x29
 8002194:	f000 f809 	bl	80021aa <ili9341_WriteReg>
}
 8002198:	bf00      	nop
 800219a:	bd80      	pop	{r7, pc}

0800219c <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 80021a0:	2028      	movs	r0, #40	; 0x28
 80021a2:	f000 f802 	bl	80021aa <ili9341_WriteReg>
}
 80021a6:	bf00      	nop
 80021a8:	bd80      	pop	{r7, pc}

080021aa <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 80021aa:	b580      	push	{r7, lr}
 80021ac:	b082      	sub	sp, #8
 80021ae:	af00      	add	r7, sp, #0
 80021b0:	4603      	mov	r3, r0
 80021b2:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 80021b4:	79fb      	ldrb	r3, [r7, #7]
 80021b6:	4618      	mov	r0, r3
 80021b8:	f000 fd7c 	bl	8002cb4 <LCD_IO_WriteReg>
}
 80021bc:	bf00      	nop
 80021be:	3708      	adds	r7, #8
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}

080021c4 <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b082      	sub	sp, #8
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	4603      	mov	r3, r0
 80021cc:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 80021ce:	88fb      	ldrh	r3, [r7, #6]
 80021d0:	4618      	mov	r0, r3
 80021d2:	f000 fd4d 	bl	8002c70 <LCD_IO_WriteData>
}
 80021d6:	bf00      	nop
 80021d8:	3708      	adds	r7, #8
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}

080021de <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 80021de:	b580      	push	{r7, lr}
 80021e0:	b082      	sub	sp, #8
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	4603      	mov	r3, r0
 80021e6:	460a      	mov	r2, r1
 80021e8:	80fb      	strh	r3, [r7, #6]
 80021ea:	4613      	mov	r3, r2
 80021ec:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 80021ee:	797a      	ldrb	r2, [r7, #5]
 80021f0:	88fb      	ldrh	r3, [r7, #6]
 80021f2:	4611      	mov	r1, r2
 80021f4:	4618      	mov	r0, r3
 80021f6:	f000 fd7f 	bl	8002cf8 <LCD_IO_ReadData>
 80021fa:	4603      	mov	r3, r0
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	3708      	adds	r7, #8
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}

08002204 <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 8002204:	b480      	push	{r7}
 8002206:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 8002208:	23f0      	movs	r3, #240	; 0xf0
}
 800220a:	4618      	mov	r0, r3
 800220c:	46bd      	mov	sp, r7
 800220e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002212:	4770      	bx	lr

08002214 <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 8002214:	b480      	push	{r7}
 8002216:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 8002218:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 800221c:	4618      	mov	r0, r3
 800221e:	46bd      	mov	sp, r7
 8002220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002224:	4770      	bx	lr
	...

08002228 <stmpe811_Init>:
  * @brief  Initialize the stmpe811 and configure the needed hardware resources
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void stmpe811_Init(uint16_t DeviceAddr)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b084      	sub	sp, #16
 800222c:	af00      	add	r7, sp, #0
 800222e:	4603      	mov	r3, r0
 8002230:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;
  uint8_t empty;
  
  /* Check if device instance already exists */
  instance = stmpe811_GetInstance(DeviceAddr);
 8002232:	88fb      	ldrh	r3, [r7, #6]
 8002234:	4618      	mov	r0, r3
 8002236:	f000 fa59 	bl	80026ec <stmpe811_GetInstance>
 800223a:	4603      	mov	r3, r0
 800223c:	73fb      	strb	r3, [r7, #15]
  
  /* To prevent double initialization */
  if(instance == 0xFF)
 800223e:	7bfb      	ldrb	r3, [r7, #15]
 8002240:	2bff      	cmp	r3, #255	; 0xff
 8002242:	d112      	bne.n	800226a <stmpe811_Init+0x42>
  {
    /* Look for empty instance */
    empty = stmpe811_GetInstance(0);
 8002244:	2000      	movs	r0, #0
 8002246:	f000 fa51 	bl	80026ec <stmpe811_GetInstance>
 800224a:	4603      	mov	r3, r0
 800224c:	73bb      	strb	r3, [r7, #14]
    
    if(empty < STMPE811_MAX_INSTANCE)
 800224e:	7bbb      	ldrb	r3, [r7, #14]
 8002250:	2b01      	cmp	r3, #1
 8002252:	d80a      	bhi.n	800226a <stmpe811_Init+0x42>
    {
      /* Register the current device instance */
      stmpe811[empty] = DeviceAddr;
 8002254:	7bbb      	ldrb	r3, [r7, #14]
 8002256:	88fa      	ldrh	r2, [r7, #6]
 8002258:	b2d1      	uxtb	r1, r2
 800225a:	4a06      	ldr	r2, [pc, #24]	; (8002274 <stmpe811_Init+0x4c>)
 800225c:	54d1      	strb	r1, [r2, r3]
      
      /* Initialize IO BUS layer */
      IOE_Init(); 
 800225e:	f000 fd88 	bl	8002d72 <IOE_Init>
      
      /* Generate stmpe811 Software reset */
      stmpe811_Reset(DeviceAddr);
 8002262:	88fb      	ldrh	r3, [r7, #6]
 8002264:	4618      	mov	r0, r3
 8002266:	f000 f807 	bl	8002278 <stmpe811_Reset>
    }
  }
}
 800226a:	bf00      	nop
 800226c:	3710      	adds	r7, #16
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	20000218 	.word	0x20000218

08002278 <stmpe811_Reset>:
  * @brief  Reset the stmpe811 by Software.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_Reset(uint16_t DeviceAddr)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b082      	sub	sp, #8
 800227c:	af00      	add	r7, sp, #0
 800227e:	4603      	mov	r3, r0
 8002280:	80fb      	strh	r3, [r7, #6]
  /* Power Down the stmpe811 */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 2);
 8002282:	88fb      	ldrh	r3, [r7, #6]
 8002284:	b2db      	uxtb	r3, r3
 8002286:	2202      	movs	r2, #2
 8002288:	2103      	movs	r1, #3
 800228a:	4618      	mov	r0, r3
 800228c:	f000 fd7d 	bl	8002d8a <IOE_Write>

  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(10); 
 8002290:	200a      	movs	r0, #10
 8002292:	f000 fdb7 	bl	8002e04 <IOE_Delay>
  
  /* Power On the Codec after the power off => all registers are reinitialized */
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 0);
 8002296:	88fb      	ldrh	r3, [r7, #6]
 8002298:	b2db      	uxtb	r3, r3
 800229a:	2200      	movs	r2, #0
 800229c:	2103      	movs	r1, #3
 800229e:	4618      	mov	r0, r3
 80022a0:	f000 fd73 	bl	8002d8a <IOE_Write>
  
  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(2); 
 80022a4:	2002      	movs	r0, #2
 80022a6:	f000 fdad 	bl	8002e04 <IOE_Delay>
}
 80022aa:	bf00      	nop
 80022ac:	3708      	adds	r7, #8
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}

080022b2 <stmpe811_ReadID>:
  * @brief  Read the stmpe811 IO Expander device ID.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval The Device ID (two bytes).
  */
uint16_t stmpe811_ReadID(uint16_t DeviceAddr)
{
 80022b2:	b590      	push	{r4, r7, lr}
 80022b4:	b083      	sub	sp, #12
 80022b6:	af00      	add	r7, sp, #0
 80022b8:	4603      	mov	r3, r0
 80022ba:	80fb      	strh	r3, [r7, #6]
  /* Initialize IO BUS layer */
  IOE_Init(); 
 80022bc:	f000 fd59 	bl	8002d72 <IOE_Init>
  
  /* Return the device ID value */
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 80022c0:	88fb      	ldrh	r3, [r7, #6]
 80022c2:	b2db      	uxtb	r3, r3
 80022c4:	2100      	movs	r1, #0
 80022c6:	4618      	mov	r0, r3
 80022c8:	f000 fd72 	bl	8002db0 <IOE_Read>
 80022cc:	4603      	mov	r3, r0
 80022ce:	021b      	lsls	r3, r3, #8
 80022d0:	b21c      	sxth	r4, r3
          (IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_MSB)));
 80022d2:	88fb      	ldrh	r3, [r7, #6]
 80022d4:	b2db      	uxtb	r3, r3
 80022d6:	2101      	movs	r1, #1
 80022d8:	4618      	mov	r0, r3
 80022da:	f000 fd69 	bl	8002db0 <IOE_Read>
 80022de:	4603      	mov	r3, r0
 80022e0:	b21b      	sxth	r3, r3
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 80022e2:	4323      	orrs	r3, r4
 80022e4:	b21b      	sxth	r3, r3
 80022e6:	b29b      	uxth	r3, r3
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	370c      	adds	r7, #12
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd90      	pop	{r4, r7, pc}

080022f0 <stmpe811_EnableGlobalIT>:
  * @brief  Enable the Global interrupt.
  * @param  DeviceAddr: Device address on communication Bus.       
  * @retval None
  */
void stmpe811_EnableGlobalIT(uint16_t DeviceAddr)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b084      	sub	sp, #16
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	4603      	mov	r3, r0
 80022f8:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 80022fa:	2300      	movs	r3, #0
 80022fc:	73fb      	strb	r3, [r7, #15]
  
  /* Read the Interrupt Control register  */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 80022fe:	88fb      	ldrh	r3, [r7, #6]
 8002300:	b2db      	uxtb	r3, r3
 8002302:	2109      	movs	r1, #9
 8002304:	4618      	mov	r0, r3
 8002306:	f000 fd53 	bl	8002db0 <IOE_Read>
 800230a:	4603      	mov	r3, r0
 800230c:	73fb      	strb	r3, [r7, #15]
  
  /* Set the global interrupts to be Enabled */    
  tmp |= (uint8_t)STMPE811_GIT_EN;
 800230e:	7bfb      	ldrb	r3, [r7, #15]
 8002310:	f043 0301 	orr.w	r3, r3, #1
 8002314:	73fb      	strb	r3, [r7, #15]
  
  /* Write Back the Interrupt Control register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp); 
 8002316:	88fb      	ldrh	r3, [r7, #6]
 8002318:	b2db      	uxtb	r3, r3
 800231a:	7bfa      	ldrb	r2, [r7, #15]
 800231c:	2109      	movs	r1, #9
 800231e:	4618      	mov	r0, r3
 8002320:	f000 fd33 	bl	8002d8a <IOE_Write>
}
 8002324:	bf00      	nop
 8002326:	3710      	adds	r7, #16
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}

0800232c <stmpe811_DisableGlobalIT>:
  * @brief  Disable the Global interrupt.
  * @param  DeviceAddr: Device address on communication Bus.      
  * @retval None
  */
void stmpe811_DisableGlobalIT(uint16_t DeviceAddr)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b084      	sub	sp, #16
 8002330:	af00      	add	r7, sp, #0
 8002332:	4603      	mov	r3, r0
 8002334:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 8002336:	2300      	movs	r3, #0
 8002338:	73fb      	strb	r3, [r7, #15]
  
  /* Read the Interrupt Control register  */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 800233a:	88fb      	ldrh	r3, [r7, #6]
 800233c:	b2db      	uxtb	r3, r3
 800233e:	2109      	movs	r1, #9
 8002340:	4618      	mov	r0, r3
 8002342:	f000 fd35 	bl	8002db0 <IOE_Read>
 8002346:	4603      	mov	r3, r0
 8002348:	73fb      	strb	r3, [r7, #15]

  /* Set the global interrupts to be Disabled */    
  tmp &= ~(uint8_t)STMPE811_GIT_EN;
 800234a:	7bfb      	ldrb	r3, [r7, #15]
 800234c:	f023 0301 	bic.w	r3, r3, #1
 8002350:	73fb      	strb	r3, [r7, #15]
 
  /* Write Back the Interrupt Control register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp);
 8002352:	88fb      	ldrh	r3, [r7, #6]
 8002354:	b2db      	uxtb	r3, r3
 8002356:	7bfa      	ldrb	r2, [r7, #15]
 8002358:	2109      	movs	r1, #9
 800235a:	4618      	mov	r0, r3
 800235c:	f000 fd15 	bl	8002d8a <IOE_Write>
    
}
 8002360:	bf00      	nop
 8002362:	3710      	adds	r7, #16
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}

08002368 <stmpe811_EnableITSource>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt  
  * @retval None
  */
void stmpe811_EnableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b084      	sub	sp, #16
 800236c:	af00      	add	r7, sp, #0
 800236e:	4603      	mov	r3, r0
 8002370:	460a      	mov	r2, r1
 8002372:	80fb      	strh	r3, [r7, #6]
 8002374:	4613      	mov	r3, r2
 8002376:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 8002378:	2300      	movs	r3, #0
 800237a:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current value of the INT_EN register */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 800237c:	88fb      	ldrh	r3, [r7, #6]
 800237e:	b2db      	uxtb	r3, r3
 8002380:	210a      	movs	r1, #10
 8002382:	4618      	mov	r0, r3
 8002384:	f000 fd14 	bl	8002db0 <IOE_Read>
 8002388:	4603      	mov	r3, r0
 800238a:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */    
  tmp |= Source; 
 800238c:	7bfa      	ldrb	r2, [r7, #15]
 800238e:	797b      	ldrb	r3, [r7, #5]
 8002390:	4313      	orrs	r3, r2
 8002392:	73fb      	strb	r3, [r7, #15]
  
  /* Set the register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 8002394:	88fb      	ldrh	r3, [r7, #6]
 8002396:	b2db      	uxtb	r3, r3
 8002398:	7bfa      	ldrb	r2, [r7, #15]
 800239a:	210a      	movs	r1, #10
 800239c:	4618      	mov	r0, r3
 800239e:	f000 fcf4 	bl	8002d8a <IOE_Write>
}
 80023a2:	bf00      	nop
 80023a4:	3710      	adds	r7, #16
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}

080023aa <stmpe811_DisableITSource>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt  
  * @retval None
  */
void stmpe811_DisableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 80023aa:	b580      	push	{r7, lr}
 80023ac:	b084      	sub	sp, #16
 80023ae:	af00      	add	r7, sp, #0
 80023b0:	4603      	mov	r3, r0
 80023b2:	460a      	mov	r2, r1
 80023b4:	80fb      	strh	r3, [r7, #6]
 80023b6:	4613      	mov	r3, r2
 80023b8:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 80023ba:	2300      	movs	r3, #0
 80023bc:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current value of the INT_EN register */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 80023be:	88fb      	ldrh	r3, [r7, #6]
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	210a      	movs	r1, #10
 80023c4:	4618      	mov	r0, r3
 80023c6:	f000 fcf3 	bl	8002db0 <IOE_Read>
 80023ca:	4603      	mov	r3, r0
 80023cc:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */    
  tmp &= ~Source; 
 80023ce:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80023d2:	43db      	mvns	r3, r3
 80023d4:	b25a      	sxtb	r2, r3
 80023d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023da:	4013      	ands	r3, r2
 80023dc:	b25b      	sxtb	r3, r3
 80023de:	73fb      	strb	r3, [r7, #15]
  
  /* Set the register */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 80023e0:	88fb      	ldrh	r3, [r7, #6]
 80023e2:	b2db      	uxtb	r3, r3
 80023e4:	7bfa      	ldrb	r2, [r7, #15]
 80023e6:	210a      	movs	r1, #10
 80023e8:	4618      	mov	r0, r3
 80023ea:	f000 fcce 	bl	8002d8a <IOE_Write>
}
 80023ee:	bf00      	nop
 80023f0:	3710      	adds	r7, #16
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}

080023f6 <stmpe811_ReadGITStatus>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt      
  * @retval The checked Global interrupt source status.
  */
uint8_t stmpe811_ReadGITStatus(uint16_t DeviceAddr, uint8_t Source)
{
 80023f6:	b580      	push	{r7, lr}
 80023f8:	b082      	sub	sp, #8
 80023fa:	af00      	add	r7, sp, #0
 80023fc:	4603      	mov	r3, r0
 80023fe:	460a      	mov	r2, r1
 8002400:	80fb      	strh	r3, [r7, #6]
 8002402:	4613      	mov	r3, r2
 8002404:	717b      	strb	r3, [r7, #5]
  /* Return the global IT source status */
  return((IOE_Read(DeviceAddr, STMPE811_REG_INT_STA) & Source));
 8002406:	88fb      	ldrh	r3, [r7, #6]
 8002408:	b2db      	uxtb	r3, r3
 800240a:	210b      	movs	r1, #11
 800240c:	4618      	mov	r0, r3
 800240e:	f000 fccf 	bl	8002db0 <IOE_Read>
 8002412:	4603      	mov	r3, r0
 8002414:	461a      	mov	r2, r3
 8002416:	797b      	ldrb	r3, [r7, #5]
 8002418:	4013      	ands	r3, r2
 800241a:	b2db      	uxtb	r3, r3
}
 800241c:	4618      	mov	r0, r3
 800241e:	3708      	adds	r7, #8
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}

08002424 <stmpe811_ClearGlobalIT>:
  *   @arg  STMPE811_GIT_FTH : Touch Screen Controller FIFO Threshold interrupt   
  *   @arg  STMPE811_GIT_TOUCH : Touch Screen Controller Touch Detected interrupt 
  * @retval None
  */
void stmpe811_ClearGlobalIT(uint16_t DeviceAddr, uint8_t Source)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b082      	sub	sp, #8
 8002428:	af00      	add	r7, sp, #0
 800242a:	4603      	mov	r3, r0
 800242c:	460a      	mov	r2, r1
 800242e:	80fb      	strh	r3, [r7, #6]
 8002430:	4613      	mov	r3, r2
 8002432:	717b      	strb	r3, [r7, #5]
  /* Write 1 to the bits that have to be cleared */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, Source);
 8002434:	88fb      	ldrh	r3, [r7, #6]
 8002436:	b2db      	uxtb	r3, r3
 8002438:	797a      	ldrb	r2, [r7, #5]
 800243a:	210b      	movs	r1, #11
 800243c:	4618      	mov	r0, r3
 800243e:	f000 fca4 	bl	8002d8a <IOE_Write>
}
 8002442:	bf00      	nop
 8002444:	3708      	adds	r7, #8
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}

0800244a <stmpe811_IO_EnableAF>:
  *         combination of the following values:
  *   @arg  STMPE811_PIN_x: Where x can be from 0 to 7.       
  * @retval None
  */
void stmpe811_IO_EnableAF(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 800244a:	b580      	push	{r7, lr}
 800244c:	b084      	sub	sp, #16
 800244e:	af00      	add	r7, sp, #0
 8002450:	4603      	mov	r3, r0
 8002452:	6039      	str	r1, [r7, #0]
 8002454:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp = 0;
 8002456:	2300      	movs	r3, #0
 8002458:	73fb      	strb	r3, [r7, #15]
  
  /* Get the current register value */
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_IO_AF);
 800245a:	88fb      	ldrh	r3, [r7, #6]
 800245c:	b2db      	uxtb	r3, r3
 800245e:	2117      	movs	r1, #23
 8002460:	4618      	mov	r0, r3
 8002462:	f000 fca5 	bl	8002db0 <IOE_Read>
 8002466:	4603      	mov	r3, r0
 8002468:	73fb      	strb	r3, [r7, #15]

  /* Enable the selected pins alternate function */   
  tmp &= ~(uint8_t)IO_Pin;   
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	b25b      	sxtb	r3, r3
 800246e:	43db      	mvns	r3, r3
 8002470:	b25a      	sxtb	r2, r3
 8002472:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002476:	4013      	ands	r3, r2
 8002478:	b25b      	sxtb	r3, r3
 800247a:	73fb      	strb	r3, [r7, #15]
  
  /* Write back the new register value */
  IOE_Write(DeviceAddr, STMPE811_REG_IO_AF, tmp); 
 800247c:	88fb      	ldrh	r3, [r7, #6]
 800247e:	b2db      	uxtb	r3, r3
 8002480:	7bfa      	ldrb	r2, [r7, #15]
 8002482:	2117      	movs	r1, #23
 8002484:	4618      	mov	r0, r3
 8002486:	f000 fc80 	bl	8002d8a <IOE_Write>
}
 800248a:	bf00      	nop
 800248c:	3710      	adds	r7, #16
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}

08002492 <stmpe811_TS_Start>:
  * @brief  Configures the touch Screen Controller (Single point detection)
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None.
  */
void stmpe811_TS_Start(uint16_t DeviceAddr)
{
 8002492:	b580      	push	{r7, lr}
 8002494:	b084      	sub	sp, #16
 8002496:	af00      	add	r7, sp, #0
 8002498:	4603      	mov	r3, r0
 800249a:	80fb      	strh	r3, [r7, #6]
  uint8_t mode;
  
  /* Get the current register value */
  mode = IOE_Read(DeviceAddr, STMPE811_REG_SYS_CTRL2);
 800249c:	88fb      	ldrh	r3, [r7, #6]
 800249e:	b2db      	uxtb	r3, r3
 80024a0:	2104      	movs	r1, #4
 80024a2:	4618      	mov	r0, r3
 80024a4:	f000 fc84 	bl	8002db0 <IOE_Read>
 80024a8:	4603      	mov	r3, r0
 80024aa:	73fb      	strb	r3, [r7, #15]
  
  /* Set the Functionalities to be Enabled */    
  mode &= ~(STMPE811_IO_FCT);  
 80024ac:	7bfb      	ldrb	r3, [r7, #15]
 80024ae:	f023 0304 	bic.w	r3, r3, #4
 80024b2:	73fb      	strb	r3, [r7, #15]
  
  /* Write the new register value */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 80024b4:	88fb      	ldrh	r3, [r7, #6]
 80024b6:	b2db      	uxtb	r3, r3
 80024b8:	7bfa      	ldrb	r2, [r7, #15]
 80024ba:	2104      	movs	r1, #4
 80024bc:	4618      	mov	r0, r3
 80024be:	f000 fc64 	bl	8002d8a <IOE_Write>

  /* Select TSC pins in TSC alternate mode */  
  stmpe811_IO_EnableAF(DeviceAddr, STMPE811_TOUCH_IO_ALL);
 80024c2:	88fb      	ldrh	r3, [r7, #6]
 80024c4:	21f0      	movs	r1, #240	; 0xf0
 80024c6:	4618      	mov	r0, r3
 80024c8:	f7ff ffbf 	bl	800244a <stmpe811_IO_EnableAF>
  
  /* Set the Functionalities to be Enabled */    
  mode &= ~(STMPE811_TS_FCT | STMPE811_ADC_FCT);  
 80024cc:	7bfb      	ldrb	r3, [r7, #15]
 80024ce:	f023 0303 	bic.w	r3, r3, #3
 80024d2:	73fb      	strb	r3, [r7, #15]
  
  /* Set the new register value */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 80024d4:	88fb      	ldrh	r3, [r7, #6]
 80024d6:	b2db      	uxtb	r3, r3
 80024d8:	7bfa      	ldrb	r2, [r7, #15]
 80024da:	2104      	movs	r1, #4
 80024dc:	4618      	mov	r0, r3
 80024de:	f000 fc54 	bl	8002d8a <IOE_Write>
  
  /* Select Sample Time, bit number and ADC Reference */
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL1, 0x49);
 80024e2:	88fb      	ldrh	r3, [r7, #6]
 80024e4:	b2db      	uxtb	r3, r3
 80024e6:	2249      	movs	r2, #73	; 0x49
 80024e8:	2120      	movs	r1, #32
 80024ea:	4618      	mov	r0, r3
 80024ec:	f000 fc4d 	bl	8002d8a <IOE_Write>
  
  /* Wait for 2 ms */
  IOE_Delay(2); 
 80024f0:	2002      	movs	r0, #2
 80024f2:	f000 fc87 	bl	8002e04 <IOE_Delay>
  
  /* Select the ADC clock speed: 3.25 MHz */
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL2, 0x01);
 80024f6:	88fb      	ldrh	r3, [r7, #6]
 80024f8:	b2db      	uxtb	r3, r3
 80024fa:	2201      	movs	r2, #1
 80024fc:	2121      	movs	r1, #33	; 0x21
 80024fe:	4618      	mov	r0, r3
 8002500:	f000 fc43 	bl	8002d8a <IOE_Write>
  /* Configuration: 
     - Touch average control    : 4 samples
     - Touch delay time         : 500 uS
     - Panel driver setting time: 500 uS 
  */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CFG, 0x9A); 
 8002504:	88fb      	ldrh	r3, [r7, #6]
 8002506:	b2db      	uxtb	r3, r3
 8002508:	229a      	movs	r2, #154	; 0x9a
 800250a:	2141      	movs	r1, #65	; 0x41
 800250c:	4618      	mov	r0, r3
 800250e:	f000 fc3c 	bl	8002d8a <IOE_Write>
  
  /* Configure the Touch FIFO threshold: single point reading */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_TH, 0x01);
 8002512:	88fb      	ldrh	r3, [r7, #6]
 8002514:	b2db      	uxtb	r3, r3
 8002516:	2201      	movs	r2, #1
 8002518:	214a      	movs	r1, #74	; 0x4a
 800251a:	4618      	mov	r0, r3
 800251c:	f000 fc35 	bl	8002d8a <IOE_Write>
  
  /* Clear the FIFO memory content. */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8002520:	88fb      	ldrh	r3, [r7, #6]
 8002522:	b2db      	uxtb	r3, r3
 8002524:	2201      	movs	r2, #1
 8002526:	214b      	movs	r1, #75	; 0x4b
 8002528:	4618      	mov	r0, r3
 800252a:	f000 fc2e 	bl	8002d8a <IOE_Write>
  
  /* Put the FIFO back into operation mode  */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 800252e:	88fb      	ldrh	r3, [r7, #6]
 8002530:	b2db      	uxtb	r3, r3
 8002532:	2200      	movs	r2, #0
 8002534:	214b      	movs	r1, #75	; 0x4b
 8002536:	4618      	mov	r0, r3
 8002538:	f000 fc27 	bl	8002d8a <IOE_Write>
  
  /* Set the range and accuracy pf the pressure measurement (Z) : 
     - Fractional part :7 
     - Whole part      :1 
  */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_FRACT_XYZ, 0x01);
 800253c:	88fb      	ldrh	r3, [r7, #6]
 800253e:	b2db      	uxtb	r3, r3
 8002540:	2201      	movs	r2, #1
 8002542:	2156      	movs	r1, #86	; 0x56
 8002544:	4618      	mov	r0, r3
 8002546:	f000 fc20 	bl	8002d8a <IOE_Write>
  
  /* Set the driving capability (limit) of the device for TSC pins: 50mA */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_I_DRIVE, 0x01);
 800254a:	88fb      	ldrh	r3, [r7, #6]
 800254c:	b2db      	uxtb	r3, r3
 800254e:	2201      	movs	r2, #1
 8002550:	2158      	movs	r1, #88	; 0x58
 8002552:	4618      	mov	r0, r3
 8002554:	f000 fc19 	bl	8002d8a <IOE_Write>
  
  /* Touch screen control configuration (enable TSC):
     - No window tracking index
     - XYZ acquisition mode
   */
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CTRL, 0x01);
 8002558:	88fb      	ldrh	r3, [r7, #6]
 800255a:	b2db      	uxtb	r3, r3
 800255c:	2201      	movs	r2, #1
 800255e:	2140      	movs	r1, #64	; 0x40
 8002560:	4618      	mov	r0, r3
 8002562:	f000 fc12 	bl	8002d8a <IOE_Write>
  
  /*  Clear all the status pending bits if any */
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, 0xFF);
 8002566:	88fb      	ldrh	r3, [r7, #6]
 8002568:	b2db      	uxtb	r3, r3
 800256a:	22ff      	movs	r2, #255	; 0xff
 800256c:	210b      	movs	r1, #11
 800256e:	4618      	mov	r0, r3
 8002570:	f000 fc0b 	bl	8002d8a <IOE_Write>

  /* Wait for 2 ms delay */
  IOE_Delay(2); 
 8002574:	2002      	movs	r0, #2
 8002576:	f000 fc45 	bl	8002e04 <IOE_Delay>
}
 800257a:	bf00      	nop
 800257c:	3710      	adds	r7, #16
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}

08002582 <stmpe811_TS_DetectTouch>:
  * @brief  Return if there is touch detected or not.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Touch detected state.
  */
uint8_t stmpe811_TS_DetectTouch(uint16_t DeviceAddr)
{
 8002582:	b580      	push	{r7, lr}
 8002584:	b084      	sub	sp, #16
 8002586:	af00      	add	r7, sp, #0
 8002588:	4603      	mov	r3, r0
 800258a:	80fb      	strh	r3, [r7, #6]
  uint8_t state;
  uint8_t ret = 0;
 800258c:	2300      	movs	r3, #0
 800258e:	73fb      	strb	r3, [r7, #15]
  
  state = ((IOE_Read(DeviceAddr, STMPE811_REG_TSC_CTRL) & (uint8_t)STMPE811_TS_CTRL_STATUS) == (uint8_t)0x80);
 8002590:	88fb      	ldrh	r3, [r7, #6]
 8002592:	b2db      	uxtb	r3, r3
 8002594:	2140      	movs	r1, #64	; 0x40
 8002596:	4618      	mov	r0, r3
 8002598:	f000 fc0a 	bl	8002db0 <IOE_Read>
 800259c:	4603      	mov	r3, r0
 800259e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025a2:	2b80      	cmp	r3, #128	; 0x80
 80025a4:	bf0c      	ite	eq
 80025a6:	2301      	moveq	r3, #1
 80025a8:	2300      	movne	r3, #0
 80025aa:	b2db      	uxtb	r3, r3
 80025ac:	73bb      	strb	r3, [r7, #14]
  
  if(state > 0)
 80025ae:	7bbb      	ldrb	r3, [r7, #14]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d00b      	beq.n	80025cc <stmpe811_TS_DetectTouch+0x4a>
  {
    if(IOE_Read(DeviceAddr, STMPE811_REG_FIFO_SIZE) > 0)
 80025b4:	88fb      	ldrh	r3, [r7, #6]
 80025b6:	b2db      	uxtb	r3, r3
 80025b8:	214c      	movs	r1, #76	; 0x4c
 80025ba:	4618      	mov	r0, r3
 80025bc:	f000 fbf8 	bl	8002db0 <IOE_Read>
 80025c0:	4603      	mov	r3, r0
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d010      	beq.n	80025e8 <stmpe811_TS_DetectTouch+0x66>
    {
      ret = 1;
 80025c6:	2301      	movs	r3, #1
 80025c8:	73fb      	strb	r3, [r7, #15]
 80025ca:	e00d      	b.n	80025e8 <stmpe811_TS_DetectTouch+0x66>
    }
  }
  else
  {
    /* Reset FIFO */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 80025cc:	88fb      	ldrh	r3, [r7, #6]
 80025ce:	b2db      	uxtb	r3, r3
 80025d0:	2201      	movs	r2, #1
 80025d2:	214b      	movs	r1, #75	; 0x4b
 80025d4:	4618      	mov	r0, r3
 80025d6:	f000 fbd8 	bl	8002d8a <IOE_Write>
    /* Enable the FIFO again */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 80025da:	88fb      	ldrh	r3, [r7, #6]
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	2200      	movs	r2, #0
 80025e0:	214b      	movs	r1, #75	; 0x4b
 80025e2:	4618      	mov	r0, r3
 80025e4:	f000 fbd1 	bl	8002d8a <IOE_Write>
  }
  
  return ret;
 80025e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	3710      	adds	r7, #16
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}

080025f2 <stmpe811_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value   
  * @retval None.
  */
void stmpe811_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 80025f2:	b580      	push	{r7, lr}
 80025f4:	b086      	sub	sp, #24
 80025f6:	af00      	add	r7, sp, #0
 80025f8:	4603      	mov	r3, r0
 80025fa:	60b9      	str	r1, [r7, #8]
 80025fc:	607a      	str	r2, [r7, #4]
 80025fe:	81fb      	strh	r3, [r7, #14]
  uint8_t  dataXYZ[4];
  uint32_t uldataXYZ;
  
  IOE_ReadMultiple(DeviceAddr, STMPE811_REG_TSC_DATA_NON_INC, dataXYZ, sizeof(dataXYZ)) ;
 8002600:	89fb      	ldrh	r3, [r7, #14]
 8002602:	b2d8      	uxtb	r0, r3
 8002604:	f107 0210 	add.w	r2, r7, #16
 8002608:	2304      	movs	r3, #4
 800260a:	21d7      	movs	r1, #215	; 0xd7
 800260c:	f000 fbe3 	bl	8002dd6 <IOE_ReadMultiple>
  
  /* Calculate positions values */
  uldataXYZ = (dataXYZ[0] << 24)|(dataXYZ[1] << 16)|(dataXYZ[2] << 8)|(dataXYZ[3] << 0);     
 8002610:	7c3b      	ldrb	r3, [r7, #16]
 8002612:	061a      	lsls	r2, r3, #24
 8002614:	7c7b      	ldrb	r3, [r7, #17]
 8002616:	041b      	lsls	r3, r3, #16
 8002618:	431a      	orrs	r2, r3
 800261a:	7cbb      	ldrb	r3, [r7, #18]
 800261c:	021b      	lsls	r3, r3, #8
 800261e:	4313      	orrs	r3, r2
 8002620:	7cfa      	ldrb	r2, [r7, #19]
 8002622:	4313      	orrs	r3, r2
 8002624:	617b      	str	r3, [r7, #20]
  *X = (uldataXYZ >> 20) & 0x00000FFF;     
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	0d1b      	lsrs	r3, r3, #20
 800262a:	b29a      	uxth	r2, r3
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	801a      	strh	r2, [r3, #0]
  *Y = (uldataXYZ >>  8) & 0x00000FFF;     
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	0a1b      	lsrs	r3, r3, #8
 8002634:	b29b      	uxth	r3, r3
 8002636:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800263a:	b29a      	uxth	r2, r3
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	801a      	strh	r2, [r3, #0]
  
  /* Reset FIFO */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8002640:	89fb      	ldrh	r3, [r7, #14]
 8002642:	b2db      	uxtb	r3, r3
 8002644:	2201      	movs	r2, #1
 8002646:	214b      	movs	r1, #75	; 0x4b
 8002648:	4618      	mov	r0, r3
 800264a:	f000 fb9e 	bl	8002d8a <IOE_Write>
  /* Enable the FIFO again */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 800264e:	89fb      	ldrh	r3, [r7, #14]
 8002650:	b2db      	uxtb	r3, r3
 8002652:	2200      	movs	r2, #0
 8002654:	214b      	movs	r1, #75	; 0x4b
 8002656:	4618      	mov	r0, r3
 8002658:	f000 fb97 	bl	8002d8a <IOE_Write>
}
 800265c:	bf00      	nop
 800265e:	3718      	adds	r7, #24
 8002660:	46bd      	mov	sp, r7
 8002662:	bd80      	pop	{r7, pc}

08002664 <stmpe811_TS_EnableIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_TS_EnableIT(uint16_t DeviceAddr)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b082      	sub	sp, #8
 8002668:	af00      	add	r7, sp, #0
 800266a:	4603      	mov	r3, r0
 800266c:	80fb      	strh	r3, [r7, #6]
  IOE_ITConfig();
 800266e:	f000 fb86 	bl	8002d7e <IOE_ITConfig>
  
  /* Enable global TS IT source */
  stmpe811_EnableITSource(DeviceAddr, STMPE811_TS_IT); 
 8002672:	88fb      	ldrh	r3, [r7, #6]
 8002674:	211f      	movs	r1, #31
 8002676:	4618      	mov	r0, r3
 8002678:	f7ff fe76 	bl	8002368 <stmpe811_EnableITSource>
  
  /* Enable global interrupt */
  stmpe811_EnableGlobalIT(DeviceAddr);
 800267c:	88fb      	ldrh	r3, [r7, #6]
 800267e:	4618      	mov	r0, r3
 8002680:	f7ff fe36 	bl	80022f0 <stmpe811_EnableGlobalIT>
}
 8002684:	bf00      	nop
 8002686:	3708      	adds	r7, #8
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}

0800268c <stmpe811_TS_DisableIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.    
  * @retval None
  */
void stmpe811_TS_DisableIT(uint16_t DeviceAddr)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b082      	sub	sp, #8
 8002690:	af00      	add	r7, sp, #0
 8002692:	4603      	mov	r3, r0
 8002694:	80fb      	strh	r3, [r7, #6]
  /* Disable global interrupt */
  stmpe811_DisableGlobalIT(DeviceAddr);
 8002696:	88fb      	ldrh	r3, [r7, #6]
 8002698:	4618      	mov	r0, r3
 800269a:	f7ff fe47 	bl	800232c <stmpe811_DisableGlobalIT>
  
  /* Disable global TS IT source */
  stmpe811_DisableITSource(DeviceAddr, STMPE811_TS_IT); 
 800269e:	88fb      	ldrh	r3, [r7, #6]
 80026a0:	211f      	movs	r1, #31
 80026a2:	4618      	mov	r0, r3
 80026a4:	f7ff fe81 	bl	80023aa <stmpe811_DisableITSource>
}
 80026a8:	bf00      	nop
 80026aa:	3708      	adds	r7, #8
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd80      	pop	{r7, pc}

080026b0 <stmpe811_TS_ITStatus>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.    
  * @retval TS interrupts status
  */
uint8_t stmpe811_TS_ITStatus(uint16_t DeviceAddr)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b082      	sub	sp, #8
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	4603      	mov	r3, r0
 80026b8:	80fb      	strh	r3, [r7, #6]
  /* Return TS interrupts status */
  return(stmpe811_ReadGITStatus(DeviceAddr, STMPE811_TS_IT));
 80026ba:	88fb      	ldrh	r3, [r7, #6]
 80026bc:	211f      	movs	r1, #31
 80026be:	4618      	mov	r0, r3
 80026c0:	f7ff fe99 	bl	80023f6 <stmpe811_ReadGITStatus>
 80026c4:	4603      	mov	r3, r0
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	3708      	adds	r7, #8
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}

080026ce <stmpe811_TS_ClearIT>:
  * @brief  Configure the selected source to generate a global interrupt or not
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_TS_ClearIT(uint16_t DeviceAddr)
{
 80026ce:	b580      	push	{r7, lr}
 80026d0:	b082      	sub	sp, #8
 80026d2:	af00      	add	r7, sp, #0
 80026d4:	4603      	mov	r3, r0
 80026d6:	80fb      	strh	r3, [r7, #6]
  /* Clear the global TS IT source */
  stmpe811_ClearGlobalIT(DeviceAddr, STMPE811_TS_IT);
 80026d8:	88fb      	ldrh	r3, [r7, #6]
 80026da:	211f      	movs	r1, #31
 80026dc:	4618      	mov	r0, r3
 80026de:	f7ff fea1 	bl	8002424 <stmpe811_ClearGlobalIT>
}
 80026e2:	bf00      	nop
 80026e4:	3708      	adds	r7, #8
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
	...

080026ec <stmpe811_GetInstance>:
  *         and return its index  
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of the device instance if registered, 0xFF if not.
  */
static uint8_t stmpe811_GetInstance(uint16_t DeviceAddr)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b085      	sub	sp, #20
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	4603      	mov	r3, r0
 80026f4:	80fb      	strh	r3, [r7, #6]
  uint8_t idx = 0;
 80026f6:	2300      	movs	r3, #0
 80026f8:	73fb      	strb	r3, [r7, #15]
  
  /* Check all the registered instances */
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 80026fa:	2300      	movs	r3, #0
 80026fc:	73fb      	strb	r3, [r7, #15]
 80026fe:	e00b      	b.n	8002718 <stmpe811_GetInstance+0x2c>
  {
    if(stmpe811[idx] == DeviceAddr)
 8002700:	7bfb      	ldrb	r3, [r7, #15]
 8002702:	4a0a      	ldr	r2, [pc, #40]	; (800272c <stmpe811_GetInstance+0x40>)
 8002704:	5cd3      	ldrb	r3, [r2, r3]
 8002706:	b29b      	uxth	r3, r3
 8002708:	88fa      	ldrh	r2, [r7, #6]
 800270a:	429a      	cmp	r2, r3
 800270c:	d101      	bne.n	8002712 <stmpe811_GetInstance+0x26>
    {
      return idx; 
 800270e:	7bfb      	ldrb	r3, [r7, #15]
 8002710:	e006      	b.n	8002720 <stmpe811_GetInstance+0x34>
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 8002712:	7bfb      	ldrb	r3, [r7, #15]
 8002714:	3301      	adds	r3, #1
 8002716:	73fb      	strb	r3, [r7, #15]
 8002718:	7bfb      	ldrb	r3, [r7, #15]
 800271a:	2b01      	cmp	r3, #1
 800271c:	d9f0      	bls.n	8002700 <stmpe811_GetInstance+0x14>
    }
  }
  
  return 0xFF;
 800271e:	23ff      	movs	r3, #255	; 0xff
}
 8002720:	4618      	mov	r0, r3
 8002722:	3714      	adds	r7, #20
 8002724:	46bd      	mov	sp, r7
 8002726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272a:	4770      	bx	lr
 800272c:	20000218 	.word	0x20000218

08002730 <I2Cx_MspInit>:
/**
  * @brief  I2Cx MSP Initialization
  * @param  hi2c: I2C handle
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *hi2c)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b08a      	sub	sp, #40	; 0x28
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  
  I2C_HandleTypeDef* pI2cHandle;
  pI2cHandle = &I2cHandle;
#endif /* EE_M24LR64 */

  if (hi2c->Instance == DISCOVERY_I2Cx)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a33      	ldr	r2, [pc, #204]	; (800280c <I2Cx_MspInit+0xdc>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d15f      	bne.n	8002802 <I2Cx_MspInit+0xd2>
  {
    /* Configure the GPIOs ---------------------------------------------------*/ 
    /* Enable GPIO clock */
    DISCOVERY_I2Cx_SDA_GPIO_CLK_ENABLE();
 8002742:	2300      	movs	r3, #0
 8002744:	613b      	str	r3, [r7, #16]
 8002746:	4b32      	ldr	r3, [pc, #200]	; (8002810 <I2Cx_MspInit+0xe0>)
 8002748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800274a:	4a31      	ldr	r2, [pc, #196]	; (8002810 <I2Cx_MspInit+0xe0>)
 800274c:	f043 0304 	orr.w	r3, r3, #4
 8002750:	6313      	str	r3, [r2, #48]	; 0x30
 8002752:	4b2f      	ldr	r3, [pc, #188]	; (8002810 <I2Cx_MspInit+0xe0>)
 8002754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002756:	f003 0304 	and.w	r3, r3, #4
 800275a:	613b      	str	r3, [r7, #16]
 800275c:	693b      	ldr	r3, [r7, #16]
    DISCOVERY_I2Cx_SCL_GPIO_CLK_ENABLE();
 800275e:	2300      	movs	r3, #0
 8002760:	60fb      	str	r3, [r7, #12]
 8002762:	4b2b      	ldr	r3, [pc, #172]	; (8002810 <I2Cx_MspInit+0xe0>)
 8002764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002766:	4a2a      	ldr	r2, [pc, #168]	; (8002810 <I2Cx_MspInit+0xe0>)
 8002768:	f043 0301 	orr.w	r3, r3, #1
 800276c:	6313      	str	r3, [r2, #48]	; 0x30
 800276e:	4b28      	ldr	r3, [pc, #160]	; (8002810 <I2Cx_MspInit+0xe0>)
 8002770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002772:	f003 0301 	and.w	r3, r3, #1
 8002776:	60fb      	str	r3, [r7, #12]
 8002778:	68fb      	ldr	r3, [r7, #12]
      
    /* Configure I2C Tx as alternate function  */
    GPIO_InitStruct.Pin       = DISCOVERY_I2Cx_SCL_PIN;
 800277a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800277e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
 8002780:	2312      	movs	r3, #18
 8002782:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8002784:	2300      	movs	r3, #0
 8002786:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
 8002788:	2302      	movs	r3, #2
 800278a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 800278c:	2304      	movs	r3, #4
 800278e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_GPIO_PORT, &GPIO_InitStruct);
 8002790:	f107 0314 	add.w	r3, r7, #20
 8002794:	4619      	mov	r1, r3
 8002796:	481f      	ldr	r0, [pc, #124]	; (8002814 <I2Cx_MspInit+0xe4>)
 8002798:	f002 fd84 	bl	80052a4 <HAL_GPIO_Init>
      
    /* Configure I2C Rx as alternate function  */
    GPIO_InitStruct.Pin = DISCOVERY_I2Cx_SDA_PIN;
 800279c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80027a0:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(DISCOVERY_I2Cx_SDA_GPIO_PORT, &GPIO_InitStruct);
 80027a2:	f107 0314 	add.w	r3, r7, #20
 80027a6:	4619      	mov	r1, r3
 80027a8:	481b      	ldr	r0, [pc, #108]	; (8002818 <I2Cx_MspInit+0xe8>)
 80027aa:	f002 fd7b 	bl	80052a4 <HAL_GPIO_Init>
    
    
    /* Configure the Discovery I2Cx peripheral -------------------------------*/ 
    /* Enable I2C3 clock */
    DISCOVERY_I2Cx_CLOCK_ENABLE();
 80027ae:	2300      	movs	r3, #0
 80027b0:	60bb      	str	r3, [r7, #8]
 80027b2:	4b17      	ldr	r3, [pc, #92]	; (8002810 <I2Cx_MspInit+0xe0>)
 80027b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b6:	4a16      	ldr	r2, [pc, #88]	; (8002810 <I2Cx_MspInit+0xe0>)
 80027b8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80027bc:	6413      	str	r3, [r2, #64]	; 0x40
 80027be:	4b14      	ldr	r3, [pc, #80]	; (8002810 <I2Cx_MspInit+0xe0>)
 80027c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80027c6:	60bb      	str	r3, [r7, #8]
 80027c8:	68bb      	ldr	r3, [r7, #8]
    
    /* Force the I2C Peripheral Clock Reset */  
    DISCOVERY_I2Cx_FORCE_RESET();
 80027ca:	4b11      	ldr	r3, [pc, #68]	; (8002810 <I2Cx_MspInit+0xe0>)
 80027cc:	6a1b      	ldr	r3, [r3, #32]
 80027ce:	4a10      	ldr	r2, [pc, #64]	; (8002810 <I2Cx_MspInit+0xe0>)
 80027d0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80027d4:	6213      	str	r3, [r2, #32]
      
    /* Release the I2C Peripheral Clock Reset */  
    DISCOVERY_I2Cx_RELEASE_RESET(); 
 80027d6:	4b0e      	ldr	r3, [pc, #56]	; (8002810 <I2Cx_MspInit+0xe0>)
 80027d8:	6a1b      	ldr	r3, [r3, #32]
 80027da:	4a0d      	ldr	r2, [pc, #52]	; (8002810 <I2Cx_MspInit+0xe0>)
 80027dc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80027e0:	6213      	str	r3, [r2, #32]
    
    /* Enable and set Discovery I2Cx Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 80027e2:	2200      	movs	r2, #0
 80027e4:	210f      	movs	r1, #15
 80027e6:	2048      	movs	r0, #72	; 0x48
 80027e8:	f001 ffbe 	bl	8004768 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 80027ec:	2048      	movs	r0, #72	; 0x48
 80027ee:	f001 ffd7 	bl	80047a0 <HAL_NVIC_EnableIRQ>
    
    /* Enable and set Discovery I2Cx Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 80027f2:	2200      	movs	r2, #0
 80027f4:	210f      	movs	r1, #15
 80027f6:	2049      	movs	r0, #73	; 0x49
 80027f8:	f001 ffb6 	bl	8004768 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);  
 80027fc:	2049      	movs	r0, #73	; 0x49
 80027fe:	f001 ffcf 	bl	80047a0 <HAL_NVIC_EnableIRQ>
    /* Configure and enable I2C DMA RX Channel interrupt */
    HAL_NVIC_SetPriority((IRQn_Type)(EEPROM_I2C_DMA_RX_IRQn), EEPROM_I2C_DMA_PREPRIO, 0);
    HAL_NVIC_EnableIRQ((IRQn_Type)(EEPROM_I2C_DMA_RX_IRQn));
#endif /* EE_M24LR64 */
  }
}
 8002802:	bf00      	nop
 8002804:	3728      	adds	r7, #40	; 0x28
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}
 800280a:	bf00      	nop
 800280c:	40005c00 	.word	0x40005c00
 8002810:	40023800 	.word	0x40023800
 8002814:	40020000 	.word	0x40020000
 8002818:	40020800 	.word	0x40020800

0800281c <I2Cx_Init>:

/**
  * @brief  I2Cx Bus initialization.
  */
static void I2Cx_Init(void)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	af00      	add	r7, sp, #0
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 8002820:	4814      	ldr	r0, [pc, #80]	; (8002874 <I2Cx_Init+0x58>)
 8002822:	f003 fcaf 	bl	8006184 <HAL_I2C_GetState>
 8002826:	4603      	mov	r3, r0
 8002828:	2b00      	cmp	r3, #0
 800282a:	d121      	bne.n	8002870 <I2Cx_Init+0x54>
  {
    I2cHandle.Instance              = DISCOVERY_I2Cx;
 800282c:	4b11      	ldr	r3, [pc, #68]	; (8002874 <I2Cx_Init+0x58>)
 800282e:	4a12      	ldr	r2, [pc, #72]	; (8002878 <I2Cx_Init+0x5c>)
 8002830:	601a      	str	r2, [r3, #0]
    I2cHandle.Init.ClockSpeed       = BSP_I2C_SPEED;
 8002832:	4b10      	ldr	r3, [pc, #64]	; (8002874 <I2Cx_Init+0x58>)
 8002834:	4a11      	ldr	r2, [pc, #68]	; (800287c <I2Cx_Init+0x60>)
 8002836:	605a      	str	r2, [r3, #4]
    I2cHandle.Init.DutyCycle        = I2C_DUTYCYCLE_2;
 8002838:	4b0e      	ldr	r3, [pc, #56]	; (8002874 <I2Cx_Init+0x58>)
 800283a:	2200      	movs	r2, #0
 800283c:	609a      	str	r2, [r3, #8]
    I2cHandle.Init.OwnAddress1      = 0;
 800283e:	4b0d      	ldr	r3, [pc, #52]	; (8002874 <I2Cx_Init+0x58>)
 8002840:	2200      	movs	r2, #0
 8002842:	60da      	str	r2, [r3, #12]
    I2cHandle.Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8002844:	4b0b      	ldr	r3, [pc, #44]	; (8002874 <I2Cx_Init+0x58>)
 8002846:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800284a:	611a      	str	r2, [r3, #16]
    I2cHandle.Init.DualAddressMode  = I2C_DUALADDRESS_DISABLED;
 800284c:	4b09      	ldr	r3, [pc, #36]	; (8002874 <I2Cx_Init+0x58>)
 800284e:	2200      	movs	r2, #0
 8002850:	615a      	str	r2, [r3, #20]
    I2cHandle.Init.OwnAddress2      = 0;
 8002852:	4b08      	ldr	r3, [pc, #32]	; (8002874 <I2Cx_Init+0x58>)
 8002854:	2200      	movs	r2, #0
 8002856:	619a      	str	r2, [r3, #24]
    I2cHandle.Init.GeneralCallMode  = I2C_GENERALCALL_DISABLED;
 8002858:	4b06      	ldr	r3, [pc, #24]	; (8002874 <I2Cx_Init+0x58>)
 800285a:	2200      	movs	r2, #0
 800285c:	61da      	str	r2, [r3, #28]
    I2cHandle.Init.NoStretchMode    = I2C_NOSTRETCH_DISABLED;  
 800285e:	4b05      	ldr	r3, [pc, #20]	; (8002874 <I2Cx_Init+0x58>)
 8002860:	2200      	movs	r2, #0
 8002862:	621a      	str	r2, [r3, #32]
    
    /* Init the I2C */
    I2Cx_MspInit(&I2cHandle);
 8002864:	4803      	ldr	r0, [pc, #12]	; (8002874 <I2Cx_Init+0x58>)
 8002866:	f7ff ff63 	bl	8002730 <I2Cx_MspInit>
    HAL_I2C_Init(&I2cHandle);
 800286a:	4802      	ldr	r0, [pc, #8]	; (8002874 <I2Cx_Init+0x58>)
 800286c:	f003 f802 	bl	8005874 <HAL_I2C_Init>
  }
}
 8002870:	bf00      	nop
 8002872:	bd80      	pop	{r7, pc}
 8002874:	200006fc 	.word	0x200006fc
 8002878:	40005c00 	.word	0x40005c00
 800287c:	000186a0 	.word	0x000186a0

08002880 <I2Cx_ITConfig>:

/**
  * @brief  Configures Interruption pin for I2C communication.
  */
static void I2Cx_ITConfig(void)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b086      	sub	sp, #24
 8002884:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;
    
  /* Enable the GPIO EXTI Clock */
  STMPE811_INT_CLK_ENABLE();
 8002886:	2300      	movs	r3, #0
 8002888:	603b      	str	r3, [r7, #0]
 800288a:	4b13      	ldr	r3, [pc, #76]	; (80028d8 <I2Cx_ITConfig+0x58>)
 800288c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800288e:	4a12      	ldr	r2, [pc, #72]	; (80028d8 <I2Cx_ITConfig+0x58>)
 8002890:	f043 0301 	orr.w	r3, r3, #1
 8002894:	6313      	str	r3, [r2, #48]	; 0x30
 8002896:	4b10      	ldr	r3, [pc, #64]	; (80028d8 <I2Cx_ITConfig+0x58>)
 8002898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800289a:	f003 0301 	and.w	r3, r3, #1
 800289e:	603b      	str	r3, [r7, #0]
 80028a0:	683b      	ldr	r3, [r7, #0]
  
  GPIO_InitStruct.Pin   = STMPE811_INT_PIN;
 80028a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80028a6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull  = GPIO_PULLUP;
 80028a8:	2301      	movs	r3, #1
 80028aa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 80028ac:	2300      	movs	r3, #0
 80028ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode  = GPIO_MODE_IT_FALLING;
 80028b0:	4b0a      	ldr	r3, [pc, #40]	; (80028dc <I2Cx_ITConfig+0x5c>)
 80028b2:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(STMPE811_INT_GPIO_PORT, &GPIO_InitStruct);
 80028b4:	1d3b      	adds	r3, r7, #4
 80028b6:	4619      	mov	r1, r3
 80028b8:	4809      	ldr	r0, [pc, #36]	; (80028e0 <I2Cx_ITConfig+0x60>)
 80028ba:	f002 fcf3 	bl	80052a4 <HAL_GPIO_Init>
    
  /* Enable and set GPIO EXTI Interrupt to the highest priority */
  HAL_NVIC_SetPriority((IRQn_Type)(STMPE811_INT_EXTI), 0x0F, 0x00);
 80028be:	2200      	movs	r2, #0
 80028c0:	210f      	movs	r1, #15
 80028c2:	2028      	movs	r0, #40	; 0x28
 80028c4:	f001 ff50 	bl	8004768 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type)(STMPE811_INT_EXTI));
 80028c8:	2028      	movs	r0, #40	; 0x28
 80028ca:	f001 ff69 	bl	80047a0 <HAL_NVIC_EnableIRQ>
}
 80028ce:	bf00      	nop
 80028d0:	3718      	adds	r7, #24
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}
 80028d6:	bf00      	nop
 80028d8:	40023800 	.word	0x40023800
 80028dc:	10210000 	.word	0x10210000
 80028e0:	40020000 	.word	0x40020000

080028e4 <I2Cx_WriteData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @param  Value: The target register value to be written 
  */
static void I2Cx_WriteData(uint8_t Addr, uint8_t Reg, uint8_t Value)
  {
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b088      	sub	sp, #32
 80028e8:	af04      	add	r7, sp, #16
 80028ea:	4603      	mov	r3, r0
 80028ec:	71fb      	strb	r3, [r7, #7]
 80028ee:	460b      	mov	r3, r1
 80028f0:	71bb      	strb	r3, [r7, #6]
 80028f2:	4613      	mov	r3, r2
 80028f4:	717b      	strb	r3, [r7, #5]
  HAL_StatusTypeDef status = HAL_OK;
 80028f6:	2300      	movs	r3, #0
 80028f8:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout); 
 80028fa:	79fb      	ldrb	r3, [r7, #7]
 80028fc:	b299      	uxth	r1, r3
 80028fe:	79bb      	ldrb	r3, [r7, #6]
 8002900:	b29a      	uxth	r2, r3
 8002902:	4b0b      	ldr	r3, [pc, #44]	; (8002930 <I2Cx_WriteData+0x4c>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	9302      	str	r3, [sp, #8]
 8002908:	2301      	movs	r3, #1
 800290a:	9301      	str	r3, [sp, #4]
 800290c:	1d7b      	adds	r3, r7, #5
 800290e:	9300      	str	r3, [sp, #0]
 8002910:	2301      	movs	r3, #1
 8002912:	4808      	ldr	r0, [pc, #32]	; (8002934 <I2Cx_WriteData+0x50>)
 8002914:	f003 f916 	bl	8005b44 <HAL_I2C_Mem_Write>
 8002918:	4603      	mov	r3, r0
 800291a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 800291c:	7bfb      	ldrb	r3, [r7, #15]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d001      	beq.n	8002926 <I2Cx_WriteData+0x42>
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 8002922:	f000 f863 	bl	80029ec <I2Cx_Error>
  }        
}
 8002926:	bf00      	nop
 8002928:	3710      	adds	r7, #16
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}
 800292e:	bf00      	nop
 8002930:	2000015c 	.word	0x2000015c
 8002934:	200006fc 	.word	0x200006fc

08002938 <I2Cx_ReadData>:
  * @param  Addr: Device address on BUS Bus.  
  * @param  Reg: The target register address to write
  * @retval Data read at register address
  */
static uint8_t I2Cx_ReadData(uint8_t Addr, uint8_t Reg)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b088      	sub	sp, #32
 800293c:	af04      	add	r7, sp, #16
 800293e:	4603      	mov	r3, r0
 8002940:	460a      	mov	r2, r1
 8002942:	71fb      	strb	r3, [r7, #7]
 8002944:	4613      	mov	r3, r2
 8002946:	71bb      	strb	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002948:	2300      	movs	r3, #0
 800294a:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0;
 800294c:	2300      	movs	r3, #0
 800294e:	73bb      	strb	r3, [r7, #14]
  
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 8002950:	79fb      	ldrb	r3, [r7, #7]
 8002952:	b299      	uxth	r1, r3
 8002954:	79bb      	ldrb	r3, [r7, #6]
 8002956:	b29a      	uxth	r2, r3
 8002958:	4b0b      	ldr	r3, [pc, #44]	; (8002988 <I2Cx_ReadData+0x50>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	9302      	str	r3, [sp, #8]
 800295e:	2301      	movs	r3, #1
 8002960:	9301      	str	r3, [sp, #4]
 8002962:	f107 030e 	add.w	r3, r7, #14
 8002966:	9300      	str	r3, [sp, #0]
 8002968:	2301      	movs	r3, #1
 800296a:	4808      	ldr	r0, [pc, #32]	; (800298c <I2Cx_ReadData+0x54>)
 800296c:	f003 f9e4 	bl	8005d38 <HAL_I2C_Mem_Read>
 8002970:	4603      	mov	r3, r0
 8002972:	73fb      	strb	r3, [r7, #15]
 
  /* Check the communication status */
  if(status != HAL_OK)
 8002974:	7bfb      	ldrb	r3, [r7, #15]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d001      	beq.n	800297e <I2Cx_ReadData+0x46>
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 800297a:	f000 f837 	bl	80029ec <I2Cx_Error>
  
  }
  return value;
 800297e:	7bbb      	ldrb	r3, [r7, #14]
}
 8002980:	4618      	mov	r0, r3
 8002982:	3710      	adds	r7, #16
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}
 8002988:	2000015c 	.word	0x2000015c
 800298c:	200006fc 	.word	0x200006fc

08002990 <I2Cx_ReadBuffer>:
  * @param  pBuffer: pointer to read data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
static uint8_t I2Cx_ReadBuffer(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b088      	sub	sp, #32
 8002994:	af04      	add	r7, sp, #16
 8002996:	603a      	str	r2, [r7, #0]
 8002998:	461a      	mov	r2, r3
 800299a:	4603      	mov	r3, r0
 800299c:	71fb      	strb	r3, [r7, #7]
 800299e:	460b      	mov	r3, r1
 80029a0:	71bb      	strb	r3, [r7, #6]
 80029a2:	4613      	mov	r3, r2
 80029a4:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029a6:	2300      	movs	r3, #0
 80029a8:	73fb      	strb	r3, [r7, #15]

  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, pBuffer, Length, I2cxTimeout);
 80029aa:	79fb      	ldrb	r3, [r7, #7]
 80029ac:	b299      	uxth	r1, r3
 80029ae:	79bb      	ldrb	r3, [r7, #6]
 80029b0:	b29a      	uxth	r2, r3
 80029b2:	4b0c      	ldr	r3, [pc, #48]	; (80029e4 <I2Cx_ReadBuffer+0x54>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	9302      	str	r3, [sp, #8]
 80029b8:	88bb      	ldrh	r3, [r7, #4]
 80029ba:	9301      	str	r3, [sp, #4]
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	9300      	str	r3, [sp, #0]
 80029c0:	2301      	movs	r3, #1
 80029c2:	4809      	ldr	r0, [pc, #36]	; (80029e8 <I2Cx_ReadBuffer+0x58>)
 80029c4:	f003 f9b8 	bl	8005d38 <HAL_I2C_Mem_Read>
 80029c8:	4603      	mov	r3, r0
 80029ca:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status == HAL_OK)
 80029cc:	7bfb      	ldrb	r3, [r7, #15]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d101      	bne.n	80029d6 <I2Cx_ReadBuffer+0x46>
  {
    return 0;
 80029d2:	2300      	movs	r3, #0
 80029d4:	e002      	b.n	80029dc <I2Cx_ReadBuffer+0x4c>
  }
  else
  {
    /* Re-Initialize the BUS */
    I2Cx_Error();
 80029d6:	f000 f809 	bl	80029ec <I2Cx_Error>

    return 1;
 80029da:	2301      	movs	r3, #1
  }
}
 80029dc:	4618      	mov	r0, r3
 80029de:	3710      	adds	r7, #16
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}
 80029e4:	2000015c 	.word	0x2000015c
 80029e8:	200006fc 	.word	0x200006fc

080029ec <I2Cx_Error>:

/**
  * @brief  I2Cx error treatment function
  */
static void I2Cx_Error(void)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_I2C_DeInit(&I2cHandle);
 80029f0:	4803      	ldr	r0, [pc, #12]	; (8002a00 <I2Cx_Error+0x14>)
 80029f2:	f003 f877 	bl	8005ae4 <HAL_I2C_DeInit>
  
  /* Re-Initialize the SPI communication BUS */
  I2Cx_Init();
 80029f6:	f7ff ff11 	bl	800281c <I2Cx_Init>
}
 80029fa:	bf00      	nop
 80029fc:	bd80      	pop	{r7, pc}
 80029fe:	bf00      	nop
 8002a00:	200006fc 	.word	0x200006fc

08002a04 <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8002a08:	4819      	ldr	r0, [pc, #100]	; (8002a70 <SPIx_Init+0x6c>)
 8002a0a:	f005 fdab 	bl	8008564 <HAL_SPI_GetState>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d12b      	bne.n	8002a6c <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 8002a14:	4b16      	ldr	r3, [pc, #88]	; (8002a70 <SPIx_Init+0x6c>)
 8002a16:	4a17      	ldr	r2, [pc, #92]	; (8002a74 <SPIx_Init+0x70>)
 8002a18:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002a1a:	4b15      	ldr	r3, [pc, #84]	; (8002a70 <SPIx_Init+0x6c>)
 8002a1c:	2218      	movs	r2, #24
 8002a1e:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8002a20:	4b13      	ldr	r3, [pc, #76]	; (8002a70 <SPIx_Init+0x6c>)
 8002a22:	2200      	movs	r2, #0
 8002a24:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8002a26:	4b12      	ldr	r3, [pc, #72]	; (8002a70 <SPIx_Init+0x6c>)
 8002a28:	2200      	movs	r2, #0
 8002a2a:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8002a2c:	4b10      	ldr	r3, [pc, #64]	; (8002a70 <SPIx_Init+0x6c>)
 8002a2e:	2200      	movs	r2, #0
 8002a30:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8002a32:	4b0f      	ldr	r3, [pc, #60]	; (8002a70 <SPIx_Init+0x6c>)
 8002a34:	2200      	movs	r2, #0
 8002a36:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8002a38:	4b0d      	ldr	r3, [pc, #52]	; (8002a70 <SPIx_Init+0x6c>)
 8002a3a:	2207      	movs	r2, #7
 8002a3c:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8002a3e:	4b0c      	ldr	r3, [pc, #48]	; (8002a70 <SPIx_Init+0x6c>)
 8002a40:	2200      	movs	r2, #0
 8002a42:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8002a44:	4b0a      	ldr	r3, [pc, #40]	; (8002a70 <SPIx_Init+0x6c>)
 8002a46:	2200      	movs	r2, #0
 8002a48:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8002a4a:	4b09      	ldr	r3, [pc, #36]	; (8002a70 <SPIx_Init+0x6c>)
 8002a4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a50:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8002a52:	4b07      	ldr	r3, [pc, #28]	; (8002a70 <SPIx_Init+0x6c>)
 8002a54:	2200      	movs	r2, #0
 8002a56:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8002a58:	4b05      	ldr	r3, [pc, #20]	; (8002a70 <SPIx_Init+0x6c>)
 8002a5a:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002a5e:	605a      	str	r2, [r3, #4]
  
    SPIx_MspInit(&SpiHandle);
 8002a60:	4803      	ldr	r0, [pc, #12]	; (8002a70 <SPIx_Init+0x6c>)
 8002a62:	f000 f853 	bl	8002b0c <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8002a66:	4802      	ldr	r0, [pc, #8]	; (8002a70 <SPIx_Init+0x6c>)
 8002a68:	f005 f911 	bl	8007c8e <HAL_SPI_Init>
  } 
}
 8002a6c:	bf00      	nop
 8002a6e:	bd80      	pop	{r7, pc}
 8002a70:	2000021c 	.word	0x2000021c
 8002a74:	40015000 	.word	0x40015000

08002a78 <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b084      	sub	sp, #16
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	4603      	mov	r3, r0
 8002a80:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8002a82:	2300      	movs	r3, #0
 8002a84:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;
  
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 8002a86:	79fb      	ldrb	r3, [r7, #7]
 8002a88:	b29a      	uxth	r2, r3
 8002a8a:	4b09      	ldr	r3, [pc, #36]	; (8002ab0 <SPIx_Read+0x38>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f107 0108 	add.w	r1, r7, #8
 8002a92:	4808      	ldr	r0, [pc, #32]	; (8002ab4 <SPIx_Read+0x3c>)
 8002a94:	f005 fabb 	bl	800800e <HAL_SPI_Receive>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8002a9c:	7bfb      	ldrb	r3, [r7, #15]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d001      	beq.n	8002aa6 <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8002aa2:	f000 f827 	bl	8002af4 <SPIx_Error>
  }
  
  return readvalue;
 8002aa6:	68bb      	ldr	r3, [r7, #8]
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	3710      	adds	r7, #16
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}
 8002ab0:	20000160 	.word	0x20000160
 8002ab4:	2000021c 	.word	0x2000021c

08002ab8 <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b084      	sub	sp, #16
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	4603      	mov	r3, r0
 8002ac0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 8002ac6:	4b09      	ldr	r3, [pc, #36]	; (8002aec <SPIx_Write+0x34>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	1db9      	adds	r1, r7, #6
 8002acc:	2201      	movs	r2, #1
 8002ace:	4808      	ldr	r0, [pc, #32]	; (8002af0 <SPIx_Write+0x38>)
 8002ad0:	f005 f969 	bl	8007da6 <HAL_SPI_Transmit>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8002ad8:	7bfb      	ldrb	r3, [r7, #15]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d001      	beq.n	8002ae2 <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8002ade:	f000 f809 	bl	8002af4 <SPIx_Error>
  }
}
 8002ae2:	bf00      	nop
 8002ae4:	3710      	adds	r7, #16
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	bf00      	nop
 8002aec:	20000160 	.word	0x20000160
 8002af0:	2000021c 	.word	0x2000021c

08002af4 <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8002af8:	4803      	ldr	r0, [pc, #12]	; (8002b08 <SPIx_Error+0x14>)
 8002afa:	f005 f92c 	bl	8007d56 <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 8002afe:	f7ff ff81 	bl	8002a04 <SPIx_Init>
}
 8002b02:	bf00      	nop
 8002b04:	bd80      	pop	{r7, pc}
 8002b06:	bf00      	nop
 8002b08:	2000021c 	.word	0x2000021c

08002b0c <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b08a      	sub	sp, #40	; 0x28
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 8002b14:	2300      	movs	r3, #0
 8002b16:	613b      	str	r3, [r7, #16]
 8002b18:	4b17      	ldr	r3, [pc, #92]	; (8002b78 <SPIx_MspInit+0x6c>)
 8002b1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b1c:	4a16      	ldr	r2, [pc, #88]	; (8002b78 <SPIx_MspInit+0x6c>)
 8002b1e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b22:	6453      	str	r3, [r2, #68]	; 0x44
 8002b24:	4b14      	ldr	r3, [pc, #80]	; (8002b78 <SPIx_MspInit+0x6c>)
 8002b26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b28:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b2c:	613b      	str	r3, [r7, #16]
 8002b2e:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8002b30:	2300      	movs	r3, #0
 8002b32:	60fb      	str	r3, [r7, #12]
 8002b34:	4b10      	ldr	r3, [pc, #64]	; (8002b78 <SPIx_MspInit+0x6c>)
 8002b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b38:	4a0f      	ldr	r2, [pc, #60]	; (8002b78 <SPIx_MspInit+0x6c>)
 8002b3a:	f043 0320 	orr.w	r3, r3, #32
 8002b3e:	6313      	str	r3, [r2, #48]	; 0x30
 8002b40:	4b0d      	ldr	r3, [pc, #52]	; (8002b78 <SPIx_MspInit+0x6c>)
 8002b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b44:	f003 0320 	and.w	r3, r3, #32
 8002b48:	60fb      	str	r3, [r7, #12]
 8002b4a:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8002b4c:	f44f 7360 	mov.w	r3, #896	; 0x380
 8002b50:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8002b52:	2302      	movs	r3, #2
 8002b54:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8002b56:	2302      	movs	r3, #2
 8002b58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8002b5e:	2305      	movs	r3, #5
 8002b60:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 8002b62:	f107 0314 	add.w	r3, r7, #20
 8002b66:	4619      	mov	r1, r3
 8002b68:	4804      	ldr	r0, [pc, #16]	; (8002b7c <SPIx_MspInit+0x70>)
 8002b6a:	f002 fb9b 	bl	80052a4 <HAL_GPIO_Init>
}
 8002b6e:	bf00      	nop
 8002b70:	3728      	adds	r7, #40	; 0x28
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}
 8002b76:	bf00      	nop
 8002b78:	40023800 	.word	0x40023800
 8002b7c:	40021400 	.word	0x40021400

08002b80 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b088      	sub	sp, #32
 8002b84:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 8002b86:	4b36      	ldr	r3, [pc, #216]	; (8002c60 <LCD_IO_Init+0xe0>)
 8002b88:	781b      	ldrb	r3, [r3, #0]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d164      	bne.n	8002c58 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1; 
 8002b8e:	4b34      	ldr	r3, [pc, #208]	; (8002c60 <LCD_IO_Init+0xe0>)
 8002b90:	2201      	movs	r2, #1
 8002b92:	701a      	strb	r2, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8002b94:	2300      	movs	r3, #0
 8002b96:	60bb      	str	r3, [r7, #8]
 8002b98:	4b32      	ldr	r3, [pc, #200]	; (8002c64 <LCD_IO_Init+0xe4>)
 8002b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b9c:	4a31      	ldr	r2, [pc, #196]	; (8002c64 <LCD_IO_Init+0xe4>)
 8002b9e:	f043 0308 	orr.w	r3, r3, #8
 8002ba2:	6313      	str	r3, [r2, #48]	; 0x30
 8002ba4:	4b2f      	ldr	r3, [pc, #188]	; (8002c64 <LCD_IO_Init+0xe4>)
 8002ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba8:	f003 0308 	and.w	r3, r3, #8
 8002bac:	60bb      	str	r3, [r7, #8]
 8002bae:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8002bb0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002bb4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002bbe:	2302      	movs	r3, #2
 8002bc0:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8002bc2:	f107 030c 	add.w	r3, r7, #12
 8002bc6:	4619      	mov	r1, r3
 8002bc8:	4827      	ldr	r0, [pc, #156]	; (8002c68 <LCD_IO_Init+0xe8>)
 8002bca:	f002 fb6b 	bl	80052a4 <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 8002bce:	2300      	movs	r3, #0
 8002bd0:	607b      	str	r3, [r7, #4]
 8002bd2:	4b24      	ldr	r3, [pc, #144]	; (8002c64 <LCD_IO_Init+0xe4>)
 8002bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd6:	4a23      	ldr	r2, [pc, #140]	; (8002c64 <LCD_IO_Init+0xe4>)
 8002bd8:	f043 0308 	orr.w	r3, r3, #8
 8002bdc:	6313      	str	r3, [r2, #48]	; 0x30
 8002bde:	4b21      	ldr	r3, [pc, #132]	; (8002c64 <LCD_IO_Init+0xe4>)
 8002be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be2:	f003 0308 	and.w	r3, r3, #8
 8002be6:	607b      	str	r3, [r7, #4]
 8002be8:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8002bea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002bee:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002bf8:	2302      	movs	r3, #2
 8002bfa:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8002bfc:	f107 030c 	add.w	r3, r7, #12
 8002c00:	4619      	mov	r1, r3
 8002c02:	4819      	ldr	r0, [pc, #100]	; (8002c68 <LCD_IO_Init+0xe8>)
 8002c04:	f002 fb4e 	bl	80052a4 <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8002c08:	2300      	movs	r3, #0
 8002c0a:	603b      	str	r3, [r7, #0]
 8002c0c:	4b15      	ldr	r3, [pc, #84]	; (8002c64 <LCD_IO_Init+0xe4>)
 8002c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c10:	4a14      	ldr	r2, [pc, #80]	; (8002c64 <LCD_IO_Init+0xe4>)
 8002c12:	f043 0304 	orr.w	r3, r3, #4
 8002c16:	6313      	str	r3, [r2, #48]	; 0x30
 8002c18:	4b12      	ldr	r3, [pc, #72]	; (8002c64 <LCD_IO_Init+0xe4>)
 8002c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c1c:	f003 0304 	and.w	r3, r3, #4
 8002c20:	603b      	str	r3, [r7, #0]
 8002c22:	683b      	ldr	r3, [r7, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8002c24:	2304      	movs	r3, #4
 8002c26:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002c30:	2302      	movs	r3, #2
 8002c32:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8002c34:	f107 030c 	add.w	r3, r7, #12
 8002c38:	4619      	mov	r1, r3
 8002c3a:	480c      	ldr	r0, [pc, #48]	; (8002c6c <LCD_IO_Init+0xec>)
 8002c3c:	f002 fb32 	bl	80052a4 <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 8002c40:	2200      	movs	r2, #0
 8002c42:	2104      	movs	r1, #4
 8002c44:	4809      	ldr	r0, [pc, #36]	; (8002c6c <LCD_IO_Init+0xec>)
 8002c46:	f002 fde1 	bl	800580c <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	2104      	movs	r1, #4
 8002c4e:	4807      	ldr	r0, [pc, #28]	; (8002c6c <LCD_IO_Init+0xec>)
 8002c50:	f002 fddc 	bl	800580c <HAL_GPIO_WritePin>
    
    SPIx_Init();
 8002c54:	f7ff fed6 	bl	8002a04 <SPIx_Init>
  }
}
 8002c58:	bf00      	nop
 8002c5a:	3720      	adds	r7, #32
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}
 8002c60:	20000274 	.word	0x20000274
 8002c64:	40023800 	.word	0x40023800
 8002c68:	40020c00 	.word	0x40020c00
 8002c6c:	40020800 	.word	0x40020800

08002c70 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b082      	sub	sp, #8
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	4603      	mov	r3, r0
 8002c78:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002c80:	480a      	ldr	r0, [pc, #40]	; (8002cac <LCD_IO_WriteData+0x3c>)
 8002c82:	f002 fdc3 	bl	800580c <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 8002c86:	2200      	movs	r2, #0
 8002c88:	2104      	movs	r1, #4
 8002c8a:	4809      	ldr	r0, [pc, #36]	; (8002cb0 <LCD_IO_WriteData+0x40>)
 8002c8c:	f002 fdbe 	bl	800580c <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 8002c90:	88fb      	ldrh	r3, [r7, #6]
 8002c92:	4618      	mov	r0, r3
 8002c94:	f7ff ff10 	bl	8002ab8 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8002c98:	2201      	movs	r2, #1
 8002c9a:	2104      	movs	r1, #4
 8002c9c:	4804      	ldr	r0, [pc, #16]	; (8002cb0 <LCD_IO_WriteData+0x40>)
 8002c9e:	f002 fdb5 	bl	800580c <HAL_GPIO_WritePin>
}
 8002ca2:	bf00      	nop
 8002ca4:	3708      	adds	r7, #8
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}
 8002caa:	bf00      	nop
 8002cac:	40020c00 	.word	0x40020c00
 8002cb0:	40020800 	.word	0x40020800

08002cb4 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b082      	sub	sp, #8
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	4603      	mov	r3, r0
 8002cbc:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002cc4:	480a      	ldr	r0, [pc, #40]	; (8002cf0 <LCD_IO_WriteReg+0x3c>)
 8002cc6:	f002 fda1 	bl	800580c <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8002cca:	2200      	movs	r2, #0
 8002ccc:	2104      	movs	r1, #4
 8002cce:	4809      	ldr	r0, [pc, #36]	; (8002cf4 <LCD_IO_WriteReg+0x40>)
 8002cd0:	f002 fd9c 	bl	800580c <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 8002cd4:	79fb      	ldrb	r3, [r7, #7]
 8002cd6:	b29b      	uxth	r3, r3
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f7ff feed 	bl	8002ab8 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8002cde:	2201      	movs	r2, #1
 8002ce0:	2104      	movs	r1, #4
 8002ce2:	4804      	ldr	r0, [pc, #16]	; (8002cf4 <LCD_IO_WriteReg+0x40>)
 8002ce4:	f002 fd92 	bl	800580c <HAL_GPIO_WritePin>
}
 8002ce8:	bf00      	nop
 8002cea:	3708      	adds	r7, #8
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}
 8002cf0:	40020c00 	.word	0x40020c00
 8002cf4:	40020800 	.word	0x40020800

08002cf8 <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b084      	sub	sp, #16
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	4603      	mov	r3, r0
 8002d00:	460a      	mov	r2, r1
 8002d02:	80fb      	strh	r3, [r7, #6]
 8002d04:	4613      	mov	r3, r2
 8002d06:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	2104      	movs	r1, #4
 8002d10:	4810      	ldr	r0, [pc, #64]	; (8002d54 <LCD_IO_ReadData+0x5c>)
 8002d12:	f002 fd7b 	bl	800580c <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8002d16:	2200      	movs	r2, #0
 8002d18:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002d1c:	480e      	ldr	r0, [pc, #56]	; (8002d58 <LCD_IO_ReadData+0x60>)
 8002d1e:	f002 fd75 	bl	800580c <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 8002d22:	88fb      	ldrh	r3, [r7, #6]
 8002d24:	4618      	mov	r0, r3
 8002d26:	f7ff fec7 	bl	8002ab8 <SPIx_Write>
  
  readvalue = SPIx_Read(ReadSize);
 8002d2a:	797b      	ldrb	r3, [r7, #5]
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f7ff fea3 	bl	8002a78 <SPIx_Read>
 8002d32:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8002d34:	2201      	movs	r2, #1
 8002d36:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002d3a:	4807      	ldr	r0, [pc, #28]	; (8002d58 <LCD_IO_ReadData+0x60>)
 8002d3c:	f002 fd66 	bl	800580c <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8002d40:	2201      	movs	r2, #1
 8002d42:	2104      	movs	r1, #4
 8002d44:	4803      	ldr	r0, [pc, #12]	; (8002d54 <LCD_IO_ReadData+0x5c>)
 8002d46:	f002 fd61 	bl	800580c <HAL_GPIO_WritePin>
  
  return readvalue;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	3710      	adds	r7, #16
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}
 8002d54:	40020800 	.word	0x40020800
 8002d58:	40020c00 	.word	0x40020c00

08002d5c <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b082      	sub	sp, #8
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002d64:	6878      	ldr	r0, [r7, #4]
 8002d66:	f001 f829 	bl	8003dbc <HAL_Delay>
}
 8002d6a:	bf00      	nop
 8002d6c:	3708      	adds	r7, #8
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}

08002d72 <IOE_Init>:

/**
  * @brief  IOE Low Level Initialization.
  */
void IOE_Init(void) 
{
 8002d72:	b580      	push	{r7, lr}
 8002d74:	af00      	add	r7, sp, #0
  I2Cx_Init();
 8002d76:	f7ff fd51 	bl	800281c <I2Cx_Init>
}
 8002d7a:	bf00      	nop
 8002d7c:	bd80      	pop	{r7, pc}

08002d7e <IOE_ITConfig>:

/**
  * @brief  IOE Low Level Interrupt configuration.
  */
void IOE_ITConfig(void)
{
 8002d7e:	b580      	push	{r7, lr}
 8002d80:	af00      	add	r7, sp, #0
  I2Cx_ITConfig();
 8002d82:	f7ff fd7d 	bl	8002880 <I2Cx_ITConfig>
}
 8002d86:	bf00      	nop
 8002d88:	bd80      	pop	{r7, pc}

08002d8a <IOE_Write>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address 
  * @param  Value: Data to be written
  */
void IOE_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8002d8a:	b580      	push	{r7, lr}
 8002d8c:	b082      	sub	sp, #8
 8002d8e:	af00      	add	r7, sp, #0
 8002d90:	4603      	mov	r3, r0
 8002d92:	71fb      	strb	r3, [r7, #7]
 8002d94:	460b      	mov	r3, r1
 8002d96:	71bb      	strb	r3, [r7, #6]
 8002d98:	4613      	mov	r3, r2
 8002d9a:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteData(Addr, Reg, Value);
 8002d9c:	797a      	ldrb	r2, [r7, #5]
 8002d9e:	79b9      	ldrb	r1, [r7, #6]
 8002da0:	79fb      	ldrb	r3, [r7, #7]
 8002da2:	4618      	mov	r0, r3
 8002da4:	f7ff fd9e 	bl	80028e4 <I2Cx_WriteData>
}
 8002da8:	bf00      	nop
 8002daa:	3708      	adds	r7, #8
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bd80      	pop	{r7, pc}

08002db0 <IOE_Read>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address 
  * @retval The read data
  */
uint8_t IOE_Read(uint8_t Addr, uint8_t Reg)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b082      	sub	sp, #8
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	4603      	mov	r3, r0
 8002db8:	460a      	mov	r2, r1
 8002dba:	71fb      	strb	r3, [r7, #7]
 8002dbc:	4613      	mov	r3, r2
 8002dbe:	71bb      	strb	r3, [r7, #6]
  return I2Cx_ReadData(Addr, Reg);
 8002dc0:	79ba      	ldrb	r2, [r7, #6]
 8002dc2:	79fb      	ldrb	r3, [r7, #7]
 8002dc4:	4611      	mov	r1, r2
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f7ff fdb6 	bl	8002938 <I2Cx_ReadData>
 8002dcc:	4603      	mov	r3, r0
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	3708      	adds	r7, #8
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}

08002dd6 <IOE_ReadMultiple>:
  * @param  pBuffer: pointer to data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
uint16_t IOE_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 8002dd6:	b580      	push	{r7, lr}
 8002dd8:	b082      	sub	sp, #8
 8002dda:	af00      	add	r7, sp, #0
 8002ddc:	603a      	str	r2, [r7, #0]
 8002dde:	461a      	mov	r2, r3
 8002de0:	4603      	mov	r3, r0
 8002de2:	71fb      	strb	r3, [r7, #7]
 8002de4:	460b      	mov	r3, r1
 8002de6:	71bb      	strb	r3, [r7, #6]
 8002de8:	4613      	mov	r3, r2
 8002dea:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadBuffer(Addr, Reg, pBuffer, Length);
 8002dec:	88bb      	ldrh	r3, [r7, #4]
 8002dee:	79b9      	ldrb	r1, [r7, #6]
 8002df0:	79f8      	ldrb	r0, [r7, #7]
 8002df2:	683a      	ldr	r2, [r7, #0]
 8002df4:	f7ff fdcc 	bl	8002990 <I2Cx_ReadBuffer>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	b29b      	uxth	r3, r3
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	3708      	adds	r7, #8
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}

08002e04 <IOE_Delay>:
/**
  * @brief  IOE Delay.
  * @param  Delay in ms
  */
void IOE_Delay(uint32_t Delay)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b082      	sub	sp, #8
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002e0c:	6878      	ldr	r0, [r7, #4]
 8002e0e:	f000 ffd5 	bl	8003dbc <HAL_Delay>
}
 8002e12:	bf00      	nop
 8002e14:	3708      	adds	r7, #8
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}
	...

08002e1c <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/  
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

    /* LTDC Configuration ----------------------------------------------------*/
    LtdcHandler.Instance = LTDC;
 8002e20:	4b2d      	ldr	r3, [pc, #180]	; (8002ed8 <BSP_LCD_Init+0xbc>)
 8002e22:	4a2e      	ldr	r2, [pc, #184]	; (8002edc <BSP_LCD_Init+0xc0>)
 8002e24:	601a      	str	r2, [r3, #0]
          ActiveH=320 (323-2-2+1)
          VFP=4 (327-320-2-2+1)
      */
    
    /* Configure horizontal synchronization width */
    LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 8002e26:	4b2c      	ldr	r3, [pc, #176]	; (8002ed8 <BSP_LCD_Init+0xbc>)
 8002e28:	2209      	movs	r2, #9
 8002e2a:	615a      	str	r2, [r3, #20]
    /* Configure vertical synchronization height */
    LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 8002e2c:	4b2a      	ldr	r3, [pc, #168]	; (8002ed8 <BSP_LCD_Init+0xbc>)
 8002e2e:	2201      	movs	r2, #1
 8002e30:	619a      	str	r2, [r3, #24]
    /* Configure accumulated horizontal back porch */
    LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 8002e32:	4b29      	ldr	r3, [pc, #164]	; (8002ed8 <BSP_LCD_Init+0xbc>)
 8002e34:	221d      	movs	r2, #29
 8002e36:	61da      	str	r2, [r3, #28]
    /* Configure accumulated vertical back porch */
    LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 8002e38:	4b27      	ldr	r3, [pc, #156]	; (8002ed8 <BSP_LCD_Init+0xbc>)
 8002e3a:	2203      	movs	r2, #3
 8002e3c:	621a      	str	r2, [r3, #32]
    /* Configure accumulated active width */
    LtdcHandler.Init.AccumulatedActiveW = 269;
 8002e3e:	4b26      	ldr	r3, [pc, #152]	; (8002ed8 <BSP_LCD_Init+0xbc>)
 8002e40:	f240 120d 	movw	r2, #269	; 0x10d
 8002e44:	625a      	str	r2, [r3, #36]	; 0x24
    /* Configure accumulated active height */
    LtdcHandler.Init.AccumulatedActiveH = 323;
 8002e46:	4b24      	ldr	r3, [pc, #144]	; (8002ed8 <BSP_LCD_Init+0xbc>)
 8002e48:	f240 1243 	movw	r2, #323	; 0x143
 8002e4c:	629a      	str	r2, [r3, #40]	; 0x28
    /* Configure total width */
    LtdcHandler.Init.TotalWidth = 279;
 8002e4e:	4b22      	ldr	r3, [pc, #136]	; (8002ed8 <BSP_LCD_Init+0xbc>)
 8002e50:	f240 1217 	movw	r2, #279	; 0x117
 8002e54:	62da      	str	r2, [r3, #44]	; 0x2c
    /* Configure total height */
    LtdcHandler.Init.TotalHeigh = 327;
 8002e56:	4b20      	ldr	r3, [pc, #128]	; (8002ed8 <BSP_LCD_Init+0xbc>)
 8002e58:	f240 1247 	movw	r2, #327	; 0x147
 8002e5c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Configure R,G,B component values for LCD background color */
    LtdcHandler.Init.Backcolor.Red= 0;
 8002e5e:	4b1e      	ldr	r3, [pc, #120]	; (8002ed8 <BSP_LCD_Init+0xbc>)
 8002e60:	2200      	movs	r2, #0
 8002e62:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    LtdcHandler.Init.Backcolor.Blue= 0;
 8002e66:	4b1c      	ldr	r3, [pc, #112]	; (8002ed8 <BSP_LCD_Init+0xbc>)
 8002e68:	2200      	movs	r2, #0
 8002e6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    LtdcHandler.Init.Backcolor.Green= 0;
 8002e6e:	4b1a      	ldr	r3, [pc, #104]	; (8002ed8 <BSP_LCD_Init+0xbc>)
 8002e70:	2200      	movs	r2, #0
 8002e72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    /* LCD clock configuration */
    /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
    /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
    /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002e76:	4b1a      	ldr	r3, [pc, #104]	; (8002ee0 <BSP_LCD_Init+0xc4>)
 8002e78:	2208      	movs	r2, #8
 8002e7a:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8002e7c:	4b18      	ldr	r3, [pc, #96]	; (8002ee0 <BSP_LCD_Init+0xc4>)
 8002e7e:	22c0      	movs	r2, #192	; 0xc0
 8002e80:	611a      	str	r2, [r3, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8002e82:	4b17      	ldr	r3, [pc, #92]	; (8002ee0 <BSP_LCD_Init+0xc4>)
 8002e84:	2204      	movs	r2, #4
 8002e86:	619a      	str	r2, [r3, #24]
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8002e88:	4b15      	ldr	r3, [pc, #84]	; (8002ee0 <BSP_LCD_Init+0xc4>)
 8002e8a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002e8e:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 8002e90:	4813      	ldr	r0, [pc, #76]	; (8002ee0 <BSP_LCD_Init+0xc4>)
 8002e92:	f004 fcbf 	bl	8007814 <HAL_RCCEx_PeriphCLKConfig>
    
    /* Polarity */
    LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8002e96:	4b10      	ldr	r3, [pc, #64]	; (8002ed8 <BSP_LCD_Init+0xbc>)
 8002e98:	2200      	movs	r2, #0
 8002e9a:	605a      	str	r2, [r3, #4]
    LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8002e9c:	4b0e      	ldr	r3, [pc, #56]	; (8002ed8 <BSP_LCD_Init+0xbc>)
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	609a      	str	r2, [r3, #8]
    LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8002ea2:	4b0d      	ldr	r3, [pc, #52]	; (8002ed8 <BSP_LCD_Init+0xbc>)
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	60da      	str	r2, [r3, #12]
    LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8002ea8:	4b0b      	ldr	r3, [pc, #44]	; (8002ed8 <BSP_LCD_Init+0xbc>)
 8002eaa:	2200      	movs	r2, #0
 8002eac:	611a      	str	r2, [r3, #16]
    
    BSP_LCD_MspInit();
 8002eae:	f000 fa87 	bl	80033c0 <BSP_LCD_MspInit>
    HAL_LTDC_Init(&LtdcHandler); 
 8002eb2:	4809      	ldr	r0, [pc, #36]	; (8002ed8 <BSP_LCD_Init+0xbc>)
 8002eb4:	f003 fd4a 	bl	800694c <HAL_LTDC_Init>
    
    /* Select the device */
    LcdDrv = &ili9341_drv;
 8002eb8:	4b0a      	ldr	r3, [pc, #40]	; (8002ee4 <BSP_LCD_Init+0xc8>)
 8002eba:	4a0b      	ldr	r2, [pc, #44]	; (8002ee8 <BSP_LCD_Init+0xcc>)
 8002ebc:	601a      	str	r2, [r3, #0]

    /* LCD Init */	 
    LcdDrv->Init();
 8002ebe:	4b09      	ldr	r3, [pc, #36]	; (8002ee4 <BSP_LCD_Init+0xc8>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4798      	blx	r3

    /* Initialize the SDRAM */
    BSP_SDRAM_Init();
 8002ec6:	f000 fc69 	bl	800379c <BSP_SDRAM_Init>

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8002eca:	4808      	ldr	r0, [pc, #32]	; (8002eec <BSP_LCD_Init+0xd0>)
 8002ecc:	f000 f8ce 	bl	800306c <BSP_LCD_SetFont>

  return LCD_OK;
 8002ed0:	2300      	movs	r3, #0
}  
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	bd80      	pop	{r7, pc}
 8002ed6:	bf00      	nop
 8002ed8:	20000750 	.word	0x20000750
 8002edc:	40016800 	.word	0x40016800
 8002ee0:	200002b8 	.word	0x200002b8
 8002ee4:	200007f8 	.word	0x200007f8
 8002ee8:	200000fc 	.word	0x200000fc
 8002eec:	20000164 	.word	0x20000164

08002ef0 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.  
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 8002ef4:	4b03      	ldr	r3, [pc, #12]	; (8002f04 <BSP_LCD_GetXSize+0x14>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002efa:	4798      	blx	r3
 8002efc:	4603      	mov	r3, r0
}
 8002efe:	4618      	mov	r0, r3
 8002f00:	bd80      	pop	{r7, pc}
 8002f02:	bf00      	nop
 8002f04:	200007f8 	.word	0x200007f8

08002f08 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.  
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 8002f0c:	4b03      	ldr	r3, [pc, #12]	; (8002f1c <BSP_LCD_GetYSize+0x14>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f12:	4798      	blx	r3
 8002f14:	4603      	mov	r3, r0
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	bd80      	pop	{r7, pc}
 8002f1a:	bf00      	nop
 8002f1c:	200007f8 	.word	0x200007f8

08002f20 <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background. 
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b090      	sub	sp, #64	; 0x40
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	4603      	mov	r3, r0
 8002f28:	6039      	str	r1, [r7, #0]
 8002f2a:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

 /* Layer Init */
  Layercfg.WindowX0 = 0;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8002f30:	f7ff ffde 	bl	8002ef0 <BSP_LCD_GetXSize>
 8002f34:	4603      	mov	r3, r0
 8002f36:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 8002f3c:	f7ff ffe4 	bl	8002f08 <BSP_LCD_GetYSize>
 8002f40:	4603      	mov	r3, r0
 8002f42:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8002f44:	2300      	movs	r3, #0
 8002f46:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 8002f4c:	23ff      	movs	r3, #255	; 0xff
 8002f4e:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 8002f50:	2300      	movs	r3, #0
 8002f52:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 8002f54:	2300      	movs	r3, #0
 8002f56:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 8002f60:	2300      	movs	r3, #0
 8002f62:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8002f66:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002f6a:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8002f6c:	2307      	movs	r3, #7
 8002f6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 8002f70:	f7ff ffbe 	bl	8002ef0 <BSP_LCD_GetXSize>
 8002f74:	4603      	mov	r3, r0
 8002f76:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 8002f78:	f7ff ffc6 	bl	8002f08 <BSP_LCD_GetYSize>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 8002f80:	88fa      	ldrh	r2, [r7, #6]
 8002f82:	f107 030c 	add.w	r3, r7, #12
 8002f86:	4619      	mov	r1, r3
 8002f88:	4814      	ldr	r0, [pc, #80]	; (8002fdc <BSP_LCD_LayerDefaultInit+0xbc>)
 8002f8a:	f003 fdaf 	bl	8006aec <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8002f8e:	88fa      	ldrh	r2, [r7, #6]
 8002f90:	4913      	ldr	r1, [pc, #76]	; (8002fe0 <BSP_LCD_LayerDefaultInit+0xc0>)
 8002f92:	4613      	mov	r3, r2
 8002f94:	005b      	lsls	r3, r3, #1
 8002f96:	4413      	add	r3, r2
 8002f98:	009b      	lsls	r3, r3, #2
 8002f9a:	440b      	add	r3, r1
 8002f9c:	3304      	adds	r3, #4
 8002f9e:	f04f 32ff 	mov.w	r2, #4294967295
 8002fa2:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8002fa4:	88fa      	ldrh	r2, [r7, #6]
 8002fa6:	490e      	ldr	r1, [pc, #56]	; (8002fe0 <BSP_LCD_LayerDefaultInit+0xc0>)
 8002fa8:	4613      	mov	r3, r2
 8002faa:	005b      	lsls	r3, r3, #1
 8002fac:	4413      	add	r3, r2
 8002fae:	009b      	lsls	r3, r3, #2
 8002fb0:	440b      	add	r3, r1
 8002fb2:	3308      	adds	r3, #8
 8002fb4:	4a0b      	ldr	r2, [pc, #44]	; (8002fe4 <BSP_LCD_LayerDefaultInit+0xc4>)
 8002fb6:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8002fb8:	88fa      	ldrh	r2, [r7, #6]
 8002fba:	4909      	ldr	r1, [pc, #36]	; (8002fe0 <BSP_LCD_LayerDefaultInit+0xc0>)
 8002fbc:	4613      	mov	r3, r2
 8002fbe:	005b      	lsls	r3, r3, #1
 8002fc0:	4413      	add	r3, r2
 8002fc2:	009b      	lsls	r3, r3, #2
 8002fc4:	440b      	add	r3, r1
 8002fc6:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8002fca:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 8002fcc:	4803      	ldr	r0, [pc, #12]	; (8002fdc <BSP_LCD_LayerDefaultInit+0xbc>)
 8002fce:	f003 fdcb 	bl	8006b68 <HAL_LTDC_EnableDither>
}
 8002fd2:	bf00      	nop
 8002fd4:	3740      	adds	r7, #64	; 0x40
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}
 8002fda:	bf00      	nop
 8002fdc:	20000750 	.word	0x20000750
 8002fe0:	200002ec 	.word	0x200002ec
 8002fe4:	20000164 	.word	0x20000164

08002fe8 <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: the Layer foreground or background.
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b083      	sub	sp, #12
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8002ff0:	4a04      	ldr	r2, [pc, #16]	; (8003004 <BSP_LCD_SelectLayer+0x1c>)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6013      	str	r3, [r2, #0]
}
 8002ff6:	bf00      	nop
 8002ff8:	370c      	adds	r7, #12
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003000:	4770      	bx	lr
 8003002:	bf00      	nop
 8003004:	200002e8 	.word	0x200002e8

08003008 <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the Text color.
  * @param  Color: the Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8003008:	b480      	push	{r7}
 800300a:	b083      	sub	sp, #12
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8003010:	4b07      	ldr	r3, [pc, #28]	; (8003030 <BSP_LCD_SetTextColor+0x28>)
 8003012:	681a      	ldr	r2, [r3, #0]
 8003014:	4907      	ldr	r1, [pc, #28]	; (8003034 <BSP_LCD_SetTextColor+0x2c>)
 8003016:	4613      	mov	r3, r2
 8003018:	005b      	lsls	r3, r3, #1
 800301a:	4413      	add	r3, r2
 800301c:	009b      	lsls	r3, r3, #2
 800301e:	440b      	add	r3, r1
 8003020:	687a      	ldr	r2, [r7, #4]
 8003022:	601a      	str	r2, [r3, #0]
}
 8003024:	bf00      	nop
 8003026:	370c      	adds	r7, #12
 8003028:	46bd      	mov	sp, r7
 800302a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302e:	4770      	bx	lr
 8003030:	200002e8 	.word	0x200002e8
 8003034:	200002ec 	.word	0x200002ec

08003038 <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the Background color.
  * @param  Color: the layer Background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8003038:	b480      	push	{r7}
 800303a:	b083      	sub	sp, #12
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8003040:	4b08      	ldr	r3, [pc, #32]	; (8003064 <BSP_LCD_SetBackColor+0x2c>)
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	4908      	ldr	r1, [pc, #32]	; (8003068 <BSP_LCD_SetBackColor+0x30>)
 8003046:	4613      	mov	r3, r2
 8003048:	005b      	lsls	r3, r3, #1
 800304a:	4413      	add	r3, r2
 800304c:	009b      	lsls	r3, r3, #2
 800304e:	440b      	add	r3, r1
 8003050:	3304      	adds	r3, #4
 8003052:	687a      	ldr	r2, [r7, #4]
 8003054:	601a      	str	r2, [r3, #0]
}
 8003056:	bf00      	nop
 8003058:	370c      	adds	r7, #12
 800305a:	46bd      	mov	sp, r7
 800305c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003060:	4770      	bx	lr
 8003062:	bf00      	nop
 8003064:	200002e8 	.word	0x200002e8
 8003068:	200002ec 	.word	0x200002ec

0800306c <BSP_LCD_SetFont>:
/**
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 800306c:	b480      	push	{r7}
 800306e:	b083      	sub	sp, #12
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 8003074:	4b08      	ldr	r3, [pc, #32]	; (8003098 <BSP_LCD_SetFont+0x2c>)
 8003076:	681a      	ldr	r2, [r3, #0]
 8003078:	4908      	ldr	r1, [pc, #32]	; (800309c <BSP_LCD_SetFont+0x30>)
 800307a:	4613      	mov	r3, r2
 800307c:	005b      	lsls	r3, r3, #1
 800307e:	4413      	add	r3, r2
 8003080:	009b      	lsls	r3, r3, #2
 8003082:	440b      	add	r3, r1
 8003084:	3308      	adds	r3, #8
 8003086:	687a      	ldr	r2, [r7, #4]
 8003088:	601a      	str	r2, [r3, #0]
}
 800308a:	bf00      	nop
 800308c:	370c      	adds	r7, #12
 800308e:	46bd      	mov	sp, r7
 8003090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003094:	4770      	bx	lr
 8003096:	bf00      	nop
 8003098:	200002e8 	.word	0x200002e8
 800309c:	200002ec 	.word	0x200002ec

080030a0 <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 80030a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030a2:	b085      	sub	sp, #20
 80030a4:	af02      	add	r7, sp, #8
 80030a6:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 80030a8:	4b0f      	ldr	r3, [pc, #60]	; (80030e8 <BSP_LCD_Clear+0x48>)
 80030aa:	681c      	ldr	r4, [r3, #0]
 80030ac:	4b0e      	ldr	r3, [pc, #56]	; (80030e8 <BSP_LCD_Clear+0x48>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a0e      	ldr	r2, [pc, #56]	; (80030ec <BSP_LCD_Clear+0x4c>)
 80030b2:	2134      	movs	r1, #52	; 0x34
 80030b4:	fb01 f303 	mul.w	r3, r1, r3
 80030b8:	4413      	add	r3, r2
 80030ba:	335c      	adds	r3, #92	; 0x5c
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	461d      	mov	r5, r3
 80030c0:	f7ff ff16 	bl	8002ef0 <BSP_LCD_GetXSize>
 80030c4:	4606      	mov	r6, r0
 80030c6:	f7ff ff1f 	bl	8002f08 <BSP_LCD_GetYSize>
 80030ca:	4602      	mov	r2, r0
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	9301      	str	r3, [sp, #4]
 80030d0:	2300      	movs	r3, #0
 80030d2:	9300      	str	r3, [sp, #0]
 80030d4:	4613      	mov	r3, r2
 80030d6:	4632      	mov	r2, r6
 80030d8:	4629      	mov	r1, r5
 80030da:	4620      	mov	r0, r4
 80030dc:	f000 fb26 	bl	800372c <FillBuffer>
}
 80030e0:	bf00      	nop
 80030e2:	370c      	adds	r7, #12
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80030e8:	200002e8 	.word	0x200002e8
 80030ec:	20000750 	.word	0x20000750

080030f0 <BSP_LCD_DisplayChar>:
  * @param  Xpos: start column address
  * @param  Ypos: the Line where to display the character shape
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 80030f0:	b590      	push	{r4, r7, lr}
 80030f2:	b083      	sub	sp, #12
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	4603      	mov	r3, r0
 80030f8:	80fb      	strh	r3, [r7, #6]
 80030fa:	460b      	mov	r3, r1
 80030fc:	80bb      	strh	r3, [r7, #4]
 80030fe:	4613      	mov	r3, r2
 8003100:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8003102:	4b1b      	ldr	r3, [pc, #108]	; (8003170 <BSP_LCD_DisplayChar+0x80>)
 8003104:	681a      	ldr	r2, [r3, #0]
 8003106:	491b      	ldr	r1, [pc, #108]	; (8003174 <BSP_LCD_DisplayChar+0x84>)
 8003108:	4613      	mov	r3, r2
 800310a:	005b      	lsls	r3, r3, #1
 800310c:	4413      	add	r3, r2
 800310e:	009b      	lsls	r3, r3, #2
 8003110:	440b      	add	r3, r1
 8003112:	3308      	adds	r3, #8
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	6819      	ldr	r1, [r3, #0]
 8003118:	78fb      	ldrb	r3, [r7, #3]
 800311a:	f1a3 0020 	sub.w	r0, r3, #32
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 800311e:	4b14      	ldr	r3, [pc, #80]	; (8003170 <BSP_LCD_DisplayChar+0x80>)
 8003120:	681a      	ldr	r2, [r3, #0]
 8003122:	4c14      	ldr	r4, [pc, #80]	; (8003174 <BSP_LCD_DisplayChar+0x84>)
 8003124:	4613      	mov	r3, r2
 8003126:	005b      	lsls	r3, r3, #1
 8003128:	4413      	add	r3, r2
 800312a:	009b      	lsls	r3, r3, #2
 800312c:	4423      	add	r3, r4
 800312e:	3308      	adds	r3, #8
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8003134:	fb03 f000 	mul.w	r0, r3, r0
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8003138:	4b0d      	ldr	r3, [pc, #52]	; (8003170 <BSP_LCD_DisplayChar+0x80>)
 800313a:	681a      	ldr	r2, [r3, #0]
 800313c:	4c0d      	ldr	r4, [pc, #52]	; (8003174 <BSP_LCD_DisplayChar+0x84>)
 800313e:	4613      	mov	r3, r2
 8003140:	005b      	lsls	r3, r3, #1
 8003142:	4413      	add	r3, r2
 8003144:	009b      	lsls	r3, r3, #2
 8003146:	4423      	add	r3, r4
 8003148:	3308      	adds	r3, #8
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	889b      	ldrh	r3, [r3, #4]
 800314e:	3307      	adds	r3, #7
 8003150:	2b00      	cmp	r3, #0
 8003152:	da00      	bge.n	8003156 <BSP_LCD_DisplayChar+0x66>
 8003154:	3307      	adds	r3, #7
 8003156:	10db      	asrs	r3, r3, #3
 8003158:	fb03 f300 	mul.w	r3, r3, r0
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800315c:	18ca      	adds	r2, r1, r3
 800315e:	88b9      	ldrh	r1, [r7, #4]
 8003160:	88fb      	ldrh	r3, [r7, #6]
 8003162:	4618      	mov	r0, r3
 8003164:	f000 fa28 	bl	80035b8 <DrawChar>
}
 8003168:	bf00      	nop
 800316a:	370c      	adds	r7, #12
 800316c:	46bd      	mov	sp, r7
 800316e:	bd90      	pop	{r4, r7, pc}
 8003170:	200002e8 	.word	0x200002e8
 8003174:	200002ec 	.word	0x200002ec

08003178 <BSP_LCD_DisplayStringAt>:
  *                @arg CENTER_MODE 
  *                @arg RIGHT_MODE
  *                @arg LEFT_MODE   
  */
void BSP_LCD_DisplayStringAt(uint16_t X, uint16_t Y, uint8_t *pText, Text_AlignModeTypdef mode)
{
 8003178:	b5b0      	push	{r4, r5, r7, lr}
 800317a:	b088      	sub	sp, #32
 800317c:	af00      	add	r7, sp, #0
 800317e:	60ba      	str	r2, [r7, #8]
 8003180:	461a      	mov	r2, r3
 8003182:	4603      	mov	r3, r0
 8003184:	81fb      	strh	r3, [r7, #14]
 8003186:	460b      	mov	r3, r1
 8003188:	81bb      	strh	r3, [r7, #12]
 800318a:	4613      	mov	r3, r2
 800318c:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 800318e:	2301      	movs	r3, #1
 8003190:	83fb      	strh	r3, [r7, #30]
 8003192:	2300      	movs	r3, #0
 8003194:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8003196:	2300      	movs	r3, #0
 8003198:	61bb      	str	r3, [r7, #24]
 800319a:	2300      	movs	r3, #0
 800319c:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = pText;
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 80031a2:	e002      	b.n	80031aa <BSP_LCD_DisplayStringAt+0x32>
 80031a4:	69bb      	ldr	r3, [r7, #24]
 80031a6:	3301      	adds	r3, #1
 80031a8:	61bb      	str	r3, [r7, #24]
 80031aa:	697b      	ldr	r3, [r7, #20]
 80031ac:	1c5a      	adds	r2, r3, #1
 80031ae:	617a      	str	r2, [r7, #20]
 80031b0:	781b      	ldrb	r3, [r3, #0]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d1f6      	bne.n	80031a4 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 80031b6:	f7ff fe9b 	bl	8002ef0 <BSP_LCD_GetXSize>
 80031ba:	4b4a      	ldr	r3, [pc, #296]	; (80032e4 <BSP_LCD_DisplayStringAt+0x16c>)
 80031bc:	681a      	ldr	r2, [r3, #0]
 80031be:	494a      	ldr	r1, [pc, #296]	; (80032e8 <BSP_LCD_DisplayStringAt+0x170>)
 80031c0:	4613      	mov	r3, r2
 80031c2:	005b      	lsls	r3, r3, #1
 80031c4:	4413      	add	r3, r2
 80031c6:	009b      	lsls	r3, r3, #2
 80031c8:	440b      	add	r3, r1
 80031ca:	3308      	adds	r3, #8
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	889b      	ldrh	r3, [r3, #4]
 80031d0:	fbb0 f3f3 	udiv	r3, r0, r3
 80031d4:	613b      	str	r3, [r7, #16]
  
  switch (mode)
 80031d6:	79fb      	ldrb	r3, [r7, #7]
 80031d8:	2b02      	cmp	r3, #2
 80031da:	d01c      	beq.n	8003216 <BSP_LCD_DisplayStringAt+0x9e>
 80031dc:	2b03      	cmp	r3, #3
 80031de:	d017      	beq.n	8003210 <BSP_LCD_DisplayStringAt+0x98>
 80031e0:	2b01      	cmp	r3, #1
 80031e2:	d12e      	bne.n	8003242 <BSP_LCD_DisplayStringAt+0xca>
  {
  case CENTER_MODE:
    {
      refcolumn = X+ ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 80031e4:	693a      	ldr	r2, [r7, #16]
 80031e6:	69bb      	ldr	r3, [r7, #24]
 80031e8:	1ad1      	subs	r1, r2, r3
 80031ea:	4b3e      	ldr	r3, [pc, #248]	; (80032e4 <BSP_LCD_DisplayStringAt+0x16c>)
 80031ec:	681a      	ldr	r2, [r3, #0]
 80031ee:	483e      	ldr	r0, [pc, #248]	; (80032e8 <BSP_LCD_DisplayStringAt+0x170>)
 80031f0:	4613      	mov	r3, r2
 80031f2:	005b      	lsls	r3, r3, #1
 80031f4:	4413      	add	r3, r2
 80031f6:	009b      	lsls	r3, r3, #2
 80031f8:	4403      	add	r3, r0
 80031fa:	3308      	adds	r3, #8
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	889b      	ldrh	r3, [r3, #4]
 8003200:	fb03 f301 	mul.w	r3, r3, r1
 8003204:	085b      	lsrs	r3, r3, #1
 8003206:	b29a      	uxth	r2, r3
 8003208:	89fb      	ldrh	r3, [r7, #14]
 800320a:	4413      	add	r3, r2
 800320c:	83fb      	strh	r3, [r7, #30]
      break;
 800320e:	e01b      	b.n	8003248 <BSP_LCD_DisplayStringAt+0xd0>
    }
  case LEFT_MODE:
    {
      refcolumn = X;
 8003210:	89fb      	ldrh	r3, [r7, #14]
 8003212:	83fb      	strh	r3, [r7, #30]
      break;
 8003214:	e018      	b.n	8003248 <BSP_LCD_DisplayStringAt+0xd0>
    }
  case RIGHT_MODE:
    {
      refcolumn = X + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8003216:	693a      	ldr	r2, [r7, #16]
 8003218:	69bb      	ldr	r3, [r7, #24]
 800321a:	1ad3      	subs	r3, r2, r3
 800321c:	b299      	uxth	r1, r3
 800321e:	4b31      	ldr	r3, [pc, #196]	; (80032e4 <BSP_LCD_DisplayStringAt+0x16c>)
 8003220:	681a      	ldr	r2, [r3, #0]
 8003222:	4831      	ldr	r0, [pc, #196]	; (80032e8 <BSP_LCD_DisplayStringAt+0x170>)
 8003224:	4613      	mov	r3, r2
 8003226:	005b      	lsls	r3, r3, #1
 8003228:	4413      	add	r3, r2
 800322a:	009b      	lsls	r3, r3, #2
 800322c:	4403      	add	r3, r0
 800322e:	3308      	adds	r3, #8
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	889b      	ldrh	r3, [r3, #4]
 8003234:	fb11 f303 	smulbb	r3, r1, r3
 8003238:	b29a      	uxth	r2, r3
 800323a:	89fb      	ldrh	r3, [r7, #14]
 800323c:	4413      	add	r3, r2
 800323e:	83fb      	strh	r3, [r7, #30]
      break;
 8003240:	e002      	b.n	8003248 <BSP_LCD_DisplayStringAt+0xd0>
    }
  default:
    {
      refcolumn = X;
 8003242:	89fb      	ldrh	r3, [r7, #14]
 8003244:	83fb      	strh	r3, [r7, #30]
      break;
 8003246:	bf00      	nop
    }
  }

  /* Send the string character by character on LCD */
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8003248:	e01a      	b.n	8003280 <BSP_LCD_DisplayStringAt+0x108>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Y, *pText);
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	781a      	ldrb	r2, [r3, #0]
 800324e:	89b9      	ldrh	r1, [r7, #12]
 8003250:	8bfb      	ldrh	r3, [r7, #30]
 8003252:	4618      	mov	r0, r3
 8003254:	f7ff ff4c 	bl	80030f0 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 8003258:	4b22      	ldr	r3, [pc, #136]	; (80032e4 <BSP_LCD_DisplayStringAt+0x16c>)
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	4922      	ldr	r1, [pc, #136]	; (80032e8 <BSP_LCD_DisplayStringAt+0x170>)
 800325e:	4613      	mov	r3, r2
 8003260:	005b      	lsls	r3, r3, #1
 8003262:	4413      	add	r3, r2
 8003264:	009b      	lsls	r3, r3, #2
 8003266:	440b      	add	r3, r1
 8003268:	3308      	adds	r3, #8
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	889a      	ldrh	r2, [r3, #4]
 800326e:	8bfb      	ldrh	r3, [r7, #30]
 8003270:	4413      	add	r3, r2
 8003272:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    pText++;
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	3301      	adds	r3, #1
 8003278:	60bb      	str	r3, [r7, #8]
    i++;
 800327a:	8bbb      	ldrh	r3, [r7, #28]
 800327c:	3301      	adds	r3, #1
 800327e:	83bb      	strh	r3, [r7, #28]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	781b      	ldrb	r3, [r3, #0]
 8003284:	2b00      	cmp	r3, #0
 8003286:	bf14      	ite	ne
 8003288:	2301      	movne	r3, #1
 800328a:	2300      	moveq	r3, #0
 800328c:	b2dc      	uxtb	r4, r3
 800328e:	f7ff fe2f 	bl	8002ef0 <BSP_LCD_GetXSize>
 8003292:	4605      	mov	r5, r0
 8003294:	8bb9      	ldrh	r1, [r7, #28]
 8003296:	4b13      	ldr	r3, [pc, #76]	; (80032e4 <BSP_LCD_DisplayStringAt+0x16c>)
 8003298:	681a      	ldr	r2, [r3, #0]
 800329a:	4813      	ldr	r0, [pc, #76]	; (80032e8 <BSP_LCD_DisplayStringAt+0x170>)
 800329c:	4613      	mov	r3, r2
 800329e:	005b      	lsls	r3, r3, #1
 80032a0:	4413      	add	r3, r2
 80032a2:	009b      	lsls	r3, r3, #2
 80032a4:	4403      	add	r3, r0
 80032a6:	3308      	adds	r3, #8
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	889b      	ldrh	r3, [r3, #4]
 80032ac:	fb03 f301 	mul.w	r3, r3, r1
 80032b0:	1aeb      	subs	r3, r5, r3
 80032b2:	b299      	uxth	r1, r3
 80032b4:	4b0b      	ldr	r3, [pc, #44]	; (80032e4 <BSP_LCD_DisplayStringAt+0x16c>)
 80032b6:	681a      	ldr	r2, [r3, #0]
 80032b8:	480b      	ldr	r0, [pc, #44]	; (80032e8 <BSP_LCD_DisplayStringAt+0x170>)
 80032ba:	4613      	mov	r3, r2
 80032bc:	005b      	lsls	r3, r3, #1
 80032be:	4413      	add	r3, r2
 80032c0:	009b      	lsls	r3, r3, #2
 80032c2:	4403      	add	r3, r0
 80032c4:	3308      	adds	r3, #8
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	889b      	ldrh	r3, [r3, #4]
 80032ca:	4299      	cmp	r1, r3
 80032cc:	bf2c      	ite	cs
 80032ce:	2301      	movcs	r3, #1
 80032d0:	2300      	movcc	r3, #0
 80032d2:	b2db      	uxtb	r3, r3
 80032d4:	4023      	ands	r3, r4
 80032d6:	b2db      	uxtb	r3, r3
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d1b6      	bne.n	800324a <BSP_LCD_DisplayStringAt+0xd2>
  }  
}
 80032dc:	bf00      	nop
 80032de:	3720      	adds	r7, #32
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bdb0      	pop	{r4, r5, r7, pc}
 80032e4:	200002e8 	.word	0x200002e8
 80032e8:	200002ec 	.word	0x200002ec

080032ec <BSP_LCD_FillRect>:
  * @param  Ypos: the Y position
  * @param  Height: rectangle height
  * @param  Width: rectangle width
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 80032ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80032f0:	b086      	sub	sp, #24
 80032f2:	af02      	add	r7, sp, #8
 80032f4:	4604      	mov	r4, r0
 80032f6:	4608      	mov	r0, r1
 80032f8:	4611      	mov	r1, r2
 80032fa:	461a      	mov	r2, r3
 80032fc:	4623      	mov	r3, r4
 80032fe:	80fb      	strh	r3, [r7, #6]
 8003300:	4603      	mov	r3, r0
 8003302:	80bb      	strh	r3, [r7, #4]
 8003304:	460b      	mov	r3, r1
 8003306:	807b      	strh	r3, [r7, #2]
 8003308:	4613      	mov	r3, r2
 800330a:	803b      	strh	r3, [r7, #0]
  uint32_t xaddress = 0;
 800330c:	2300      	movs	r3, #0
 800330e:	60fb      	str	r3, [r7, #12]

  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8003310:	4b20      	ldr	r3, [pc, #128]	; (8003394 <BSP_LCD_FillRect+0xa8>)
 8003312:	681a      	ldr	r2, [r3, #0]
 8003314:	4920      	ldr	r1, [pc, #128]	; (8003398 <BSP_LCD_FillRect+0xac>)
 8003316:	4613      	mov	r3, r2
 8003318:	005b      	lsls	r3, r3, #1
 800331a:	4413      	add	r3, r2
 800331c:	009b      	lsls	r3, r3, #2
 800331e:	440b      	add	r3, r1
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4618      	mov	r0, r3
 8003324:	f7ff fe70 	bl	8003008 <BSP_LCD_SetTextColor>

  /* Get the rectangle start address */
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8003328:	4b1a      	ldr	r3, [pc, #104]	; (8003394 <BSP_LCD_FillRect+0xa8>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a1b      	ldr	r2, [pc, #108]	; (800339c <BSP_LCD_FillRect+0xb0>)
 800332e:	2134      	movs	r1, #52	; 0x34
 8003330:	fb01 f303 	mul.w	r3, r1, r3
 8003334:	4413      	add	r3, r2
 8003336:	335c      	adds	r3, #92	; 0x5c
 8003338:	681c      	ldr	r4, [r3, #0]
 800333a:	f7ff fdd9 	bl	8002ef0 <BSP_LCD_GetXSize>
 800333e:	4602      	mov	r2, r0
 8003340:	88bb      	ldrh	r3, [r7, #4]
 8003342:	fb03 f202 	mul.w	r2, r3, r2
 8003346:	88fb      	ldrh	r3, [r7, #6]
 8003348:	4413      	add	r3, r2
 800334a:	009b      	lsls	r3, r3, #2
 800334c:	4423      	add	r3, r4
 800334e:	60fb      	str	r3, [r7, #12]

  /* Fill the rectangle */
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8003350:	4b10      	ldr	r3, [pc, #64]	; (8003394 <BSP_LCD_FillRect+0xa8>)
 8003352:	681c      	ldr	r4, [r3, #0]
 8003354:	68fd      	ldr	r5, [r7, #12]
 8003356:	887e      	ldrh	r6, [r7, #2]
 8003358:	f8b7 8000 	ldrh.w	r8, [r7]
 800335c:	f7ff fdc8 	bl	8002ef0 <BSP_LCD_GetXSize>
 8003360:	4602      	mov	r2, r0
 8003362:	887b      	ldrh	r3, [r7, #2]
 8003364:	1ad1      	subs	r1, r2, r3
 8003366:	4b0b      	ldr	r3, [pc, #44]	; (8003394 <BSP_LCD_FillRect+0xa8>)
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	480b      	ldr	r0, [pc, #44]	; (8003398 <BSP_LCD_FillRect+0xac>)
 800336c:	4613      	mov	r3, r2
 800336e:	005b      	lsls	r3, r3, #1
 8003370:	4413      	add	r3, r2
 8003372:	009b      	lsls	r3, r3, #2
 8003374:	4403      	add	r3, r0
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	9301      	str	r3, [sp, #4]
 800337a:	9100      	str	r1, [sp, #0]
 800337c:	4643      	mov	r3, r8
 800337e:	4632      	mov	r2, r6
 8003380:	4629      	mov	r1, r5
 8003382:	4620      	mov	r0, r4
 8003384:	f000 f9d2 	bl	800372c <FillBuffer>
}
 8003388:	bf00      	nop
 800338a:	3710      	adds	r7, #16
 800338c:	46bd      	mov	sp, r7
 800338e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003392:	bf00      	nop
 8003394:	200002e8 	.word	0x200002e8
 8003398:	200002ec 	.word	0x200002ec
 800339c:	20000750 	.word	0x20000750

080033a0 <BSP_LCD_DisplayOn>:

/**
  * @brief  Enables the Display.
  */
void BSP_LCD_DisplayOn(void)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	af00      	add	r7, sp, #0
  if(LcdDrv->DisplayOn != NULL)
 80033a4:	4b05      	ldr	r3, [pc, #20]	; (80033bc <BSP_LCD_DisplayOn+0x1c>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d003      	beq.n	80033b6 <BSP_LCD_DisplayOn+0x16>
  {
    LcdDrv->DisplayOn();
 80033ae:	4b03      	ldr	r3, [pc, #12]	; (80033bc <BSP_LCD_DisplayOn+0x1c>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	4798      	blx	r3
  }
}
 80033b6:	bf00      	nop
 80033b8:	bd80      	pop	{r7, pc}
 80033ba:	bf00      	nop
 80033bc:	200007f8 	.word	0x200007f8

080033c0 <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b08e      	sub	sp, #56	; 0x38
 80033c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 80033c6:	2300      	movs	r3, #0
 80033c8:	623b      	str	r3, [r7, #32]
 80033ca:	4b61      	ldr	r3, [pc, #388]	; (8003550 <BSP_LCD_MspInit+0x190>)
 80033cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033ce:	4a60      	ldr	r2, [pc, #384]	; (8003550 <BSP_LCD_MspInit+0x190>)
 80033d0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80033d4:	6453      	str	r3, [r2, #68]	; 0x44
 80033d6:	4b5e      	ldr	r3, [pc, #376]	; (8003550 <BSP_LCD_MspInit+0x190>)
 80033d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033da:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80033de:	623b      	str	r3, [r7, #32]
 80033e0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE(); 
 80033e2:	2300      	movs	r3, #0
 80033e4:	61fb      	str	r3, [r7, #28]
 80033e6:	4b5a      	ldr	r3, [pc, #360]	; (8003550 <BSP_LCD_MspInit+0x190>)
 80033e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ea:	4a59      	ldr	r2, [pc, #356]	; (8003550 <BSP_LCD_MspInit+0x190>)
 80033ec:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80033f0:	6313      	str	r3, [r2, #48]	; 0x30
 80033f2:	4b57      	ldr	r3, [pc, #348]	; (8003550 <BSP_LCD_MspInit+0x190>)
 80033f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80033fa:	61fb      	str	r3, [r7, #28]
 80033fc:	69fb      	ldr	r3, [r7, #28]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80033fe:	2300      	movs	r3, #0
 8003400:	61bb      	str	r3, [r7, #24]
 8003402:	4b53      	ldr	r3, [pc, #332]	; (8003550 <BSP_LCD_MspInit+0x190>)
 8003404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003406:	4a52      	ldr	r2, [pc, #328]	; (8003550 <BSP_LCD_MspInit+0x190>)
 8003408:	f043 0301 	orr.w	r3, r3, #1
 800340c:	6313      	str	r3, [r2, #48]	; 0x30
 800340e:	4b50      	ldr	r3, [pc, #320]	; (8003550 <BSP_LCD_MspInit+0x190>)
 8003410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003412:	f003 0301 	and.w	r3, r3, #1
 8003416:	61bb      	str	r3, [r7, #24]
 8003418:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800341a:	2300      	movs	r3, #0
 800341c:	617b      	str	r3, [r7, #20]
 800341e:	4b4c      	ldr	r3, [pc, #304]	; (8003550 <BSP_LCD_MspInit+0x190>)
 8003420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003422:	4a4b      	ldr	r2, [pc, #300]	; (8003550 <BSP_LCD_MspInit+0x190>)
 8003424:	f043 0302 	orr.w	r3, r3, #2
 8003428:	6313      	str	r3, [r2, #48]	; 0x30
 800342a:	4b49      	ldr	r3, [pc, #292]	; (8003550 <BSP_LCD_MspInit+0x190>)
 800342c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800342e:	f003 0302 	and.w	r3, r3, #2
 8003432:	617b      	str	r3, [r7, #20]
 8003434:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003436:	2300      	movs	r3, #0
 8003438:	613b      	str	r3, [r7, #16]
 800343a:	4b45      	ldr	r3, [pc, #276]	; (8003550 <BSP_LCD_MspInit+0x190>)
 800343c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800343e:	4a44      	ldr	r2, [pc, #272]	; (8003550 <BSP_LCD_MspInit+0x190>)
 8003440:	f043 0304 	orr.w	r3, r3, #4
 8003444:	6313      	str	r3, [r2, #48]	; 0x30
 8003446:	4b42      	ldr	r3, [pc, #264]	; (8003550 <BSP_LCD_MspInit+0x190>)
 8003448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800344a:	f003 0304 	and.w	r3, r3, #4
 800344e:	613b      	str	r3, [r7, #16]
 8003450:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003452:	2300      	movs	r3, #0
 8003454:	60fb      	str	r3, [r7, #12]
 8003456:	4b3e      	ldr	r3, [pc, #248]	; (8003550 <BSP_LCD_MspInit+0x190>)
 8003458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800345a:	4a3d      	ldr	r2, [pc, #244]	; (8003550 <BSP_LCD_MspInit+0x190>)
 800345c:	f043 0308 	orr.w	r3, r3, #8
 8003460:	6313      	str	r3, [r2, #48]	; 0x30
 8003462:	4b3b      	ldr	r3, [pc, #236]	; (8003550 <BSP_LCD_MspInit+0x190>)
 8003464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003466:	f003 0308 	and.w	r3, r3, #8
 800346a:	60fb      	str	r3, [r7, #12]
 800346c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800346e:	2300      	movs	r3, #0
 8003470:	60bb      	str	r3, [r7, #8]
 8003472:	4b37      	ldr	r3, [pc, #220]	; (8003550 <BSP_LCD_MspInit+0x190>)
 8003474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003476:	4a36      	ldr	r2, [pc, #216]	; (8003550 <BSP_LCD_MspInit+0x190>)
 8003478:	f043 0320 	orr.w	r3, r3, #32
 800347c:	6313      	str	r3, [r2, #48]	; 0x30
 800347e:	4b34      	ldr	r3, [pc, #208]	; (8003550 <BSP_LCD_MspInit+0x190>)
 8003480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003482:	f003 0320 	and.w	r3, r3, #32
 8003486:	60bb      	str	r3, [r7, #8]
 8003488:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800348a:	2300      	movs	r3, #0
 800348c:	607b      	str	r3, [r7, #4]
 800348e:	4b30      	ldr	r3, [pc, #192]	; (8003550 <BSP_LCD_MspInit+0x190>)
 8003490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003492:	4a2f      	ldr	r2, [pc, #188]	; (8003550 <BSP_LCD_MspInit+0x190>)
 8003494:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003498:	6313      	str	r3, [r2, #48]	; 0x30
 800349a:	4b2d      	ldr	r3, [pc, #180]	; (8003550 <BSP_LCD_MspInit+0x190>)
 800349c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800349e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034a2:	607b      	str	r3, [r7, #4]
 80034a4:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 80034a6:	f641 0358 	movw	r3, #6232	; 0x1858
 80034aa:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 80034ac:	2302      	movs	r3, #2
 80034ae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 80034b0:	2300      	movs	r3, #0
 80034b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 80034b4:	2302      	movs	r3, #2
 80034b6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 80034b8:	230e      	movs	r3, #14
 80034ba:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 80034bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034c0:	4619      	mov	r1, r3
 80034c2:	4824      	ldr	r0, [pc, #144]	; (8003554 <BSP_LCD_MspInit+0x194>)
 80034c4:	f001 feee 	bl	80052a4 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 80034c8:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80034cc:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80034ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034d2:	4619      	mov	r1, r3
 80034d4:	4820      	ldr	r0, [pc, #128]	; (8003558 <BSP_LCD_MspInit+0x198>)
 80034d6:	f001 fee5 	bl	80052a4 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 80034da:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 80034de:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 80034e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034e4:	4619      	mov	r1, r3
 80034e6:	481d      	ldr	r0, [pc, #116]	; (800355c <BSP_LCD_MspInit+0x19c>)
 80034e8:	f001 fedc 	bl	80052a4 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 80034ec:	2348      	movs	r3, #72	; 0x48
 80034ee:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 80034f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034f4:	4619      	mov	r1, r3
 80034f6:	481a      	ldr	r0, [pc, #104]	; (8003560 <BSP_LCD_MspInit+0x1a0>)
 80034f8:	f001 fed4 	bl	80052a4 <HAL_GPIO_Init>
  
 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 80034fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003500:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 8003502:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003506:	4619      	mov	r1, r3
 8003508:	4816      	ldr	r0, [pc, #88]	; (8003564 <BSP_LCD_MspInit+0x1a4>)
 800350a:	f001 fecb 	bl	80052a4 <HAL_GPIO_Init>

 /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 800350e:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8003512:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8003514:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003518:	4619      	mov	r1, r3
 800351a:	4813      	ldr	r0, [pc, #76]	; (8003568 <BSP_LCD_MspInit+0x1a8>)
 800351c:	f001 fec2 	bl	80052a4 <HAL_GPIO_Init>
 
  /* GPIOB configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8003520:	2303      	movs	r3, #3
 8003522:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8003524:	2309      	movs	r3, #9
 8003526:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8003528:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800352c:	4619      	mov	r1, r3
 800352e:	480a      	ldr	r0, [pc, #40]	; (8003558 <BSP_LCD_MspInit+0x198>)
 8003530:	f001 feb8 	bl	80052a4 <HAL_GPIO_Init>

  /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8003534:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003538:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 800353a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800353e:	4619      	mov	r1, r3
 8003540:	4809      	ldr	r0, [pc, #36]	; (8003568 <BSP_LCD_MspInit+0x1a8>)
 8003542:	f001 feaf 	bl	80052a4 <HAL_GPIO_Init>
}
 8003546:	bf00      	nop
 8003548:	3738      	adds	r7, #56	; 0x38
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}
 800354e:	bf00      	nop
 8003550:	40023800 	.word	0x40023800
 8003554:	40020000 	.word	0x40020000
 8003558:	40020400 	.word	0x40020400
 800355c:	40020800 	.word	0x40020800
 8003560:	40020c00 	.word	0x40020c00
 8003564:	40021400 	.word	0x40021400
 8003568:	40021800 	.word	0x40021800

0800356c <BSP_LCD_DrawPixel>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)  
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 800356c:	b5b0      	push	{r4, r5, r7, lr}
 800356e:	b082      	sub	sp, #8
 8003570:	af00      	add	r7, sp, #0
 8003572:	4603      	mov	r3, r0
 8003574:	603a      	str	r2, [r7, #0]
 8003576:	80fb      	strh	r3, [r7, #6]
 8003578:	460b      	mov	r3, r1
 800357a:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 800357c:	4b0c      	ldr	r3, [pc, #48]	; (80035b0 <BSP_LCD_DrawPixel+0x44>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a0c      	ldr	r2, [pc, #48]	; (80035b4 <BSP_LCD_DrawPixel+0x48>)
 8003582:	2134      	movs	r1, #52	; 0x34
 8003584:	fb01 f303 	mul.w	r3, r1, r3
 8003588:	4413      	add	r3, r2
 800358a:	335c      	adds	r3, #92	; 0x5c
 800358c:	681c      	ldr	r4, [r3, #0]
 800358e:	88bd      	ldrh	r5, [r7, #4]
 8003590:	f7ff fcae 	bl	8002ef0 <BSP_LCD_GetXSize>
 8003594:	4603      	mov	r3, r0
 8003596:	fb03 f205 	mul.w	r2, r3, r5
 800359a:	88fb      	ldrh	r3, [r7, #6]
 800359c:	4413      	add	r3, r2
 800359e:	009b      	lsls	r3, r3, #2
 80035a0:	4423      	add	r3, r4
 80035a2:	461a      	mov	r2, r3
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	6013      	str	r3, [r2, #0]
}
 80035a8:	bf00      	nop
 80035aa:	3708      	adds	r7, #8
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bdb0      	pop	{r4, r5, r7, pc}
 80035b0:	200002e8 	.word	0x200002e8
 80035b4:	20000750 	.word	0x20000750

080035b8 <DrawChar>:
  * @param  Xpos: the Line where to display the character shape
  * @param  Ypos: start column address
  * @param  c: pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b088      	sub	sp, #32
 80035bc:	af00      	add	r7, sp, #0
 80035be:	4603      	mov	r3, r0
 80035c0:	603a      	str	r2, [r7, #0]
 80035c2:	80fb      	strh	r3, [r7, #6]
 80035c4:	460b      	mov	r3, r1
 80035c6:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 80035c8:	2300      	movs	r3, #0
 80035ca:	61fb      	str	r3, [r7, #28]
 80035cc:	2300      	movs	r3, #0
 80035ce:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line=0;
 80035d0:	2300      	movs	r3, #0
 80035d2:	617b      	str	r3, [r7, #20]

  height = DrawProp[ActiveLayer].pFont->Height;
 80035d4:	4b53      	ldr	r3, [pc, #332]	; (8003724 <DrawChar+0x16c>)
 80035d6:	681a      	ldr	r2, [r3, #0]
 80035d8:	4953      	ldr	r1, [pc, #332]	; (8003728 <DrawChar+0x170>)
 80035da:	4613      	mov	r3, r2
 80035dc:	005b      	lsls	r3, r3, #1
 80035de:	4413      	add	r3, r2
 80035e0:	009b      	lsls	r3, r3, #2
 80035e2:	440b      	add	r3, r1
 80035e4:	3308      	adds	r3, #8
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	88db      	ldrh	r3, [r3, #6]
 80035ea:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 80035ec:	4b4d      	ldr	r3, [pc, #308]	; (8003724 <DrawChar+0x16c>)
 80035ee:	681a      	ldr	r2, [r3, #0]
 80035f0:	494d      	ldr	r1, [pc, #308]	; (8003728 <DrawChar+0x170>)
 80035f2:	4613      	mov	r3, r2
 80035f4:	005b      	lsls	r3, r3, #1
 80035f6:	4413      	add	r3, r2
 80035f8:	009b      	lsls	r3, r3, #2
 80035fa:	440b      	add	r3, r1
 80035fc:	3308      	adds	r3, #8
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	889b      	ldrh	r3, [r3, #4]
 8003602:	823b      	strh	r3, [r7, #16]

  offset = 8 *((width + 7)/8) -  width ;
 8003604:	8a3b      	ldrh	r3, [r7, #16]
 8003606:	3307      	adds	r3, #7
 8003608:	2b00      	cmp	r3, #0
 800360a:	da00      	bge.n	800360e <DrawChar+0x56>
 800360c:	3307      	adds	r3, #7
 800360e:	10db      	asrs	r3, r3, #3
 8003610:	b2db      	uxtb	r3, r3
 8003612:	00db      	lsls	r3, r3, #3
 8003614:	b2da      	uxtb	r2, r3
 8003616:	8a3b      	ldrh	r3, [r7, #16]
 8003618:	b2db      	uxtb	r3, r3
 800361a:	1ad3      	subs	r3, r2, r3
 800361c:	73fb      	strb	r3, [r7, #15]

  for(i = 0; i < height; i++)
 800361e:	2300      	movs	r3, #0
 8003620:	61fb      	str	r3, [r7, #28]
 8003622:	e076      	b.n	8003712 <DrawChar+0x15a>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8003624:	8a3b      	ldrh	r3, [r7, #16]
 8003626:	3307      	adds	r3, #7
 8003628:	2b00      	cmp	r3, #0
 800362a:	da00      	bge.n	800362e <DrawChar+0x76>
 800362c:	3307      	adds	r3, #7
 800362e:	10db      	asrs	r3, r3, #3
 8003630:	461a      	mov	r2, r3
 8003632:	69fb      	ldr	r3, [r7, #28]
 8003634:	fb03 f302 	mul.w	r3, r3, r2
 8003638:	683a      	ldr	r2, [r7, #0]
 800363a:	4413      	add	r3, r2
 800363c:	60bb      	str	r3, [r7, #8]

    switch(((width + 7)/8))
 800363e:	8a3b      	ldrh	r3, [r7, #16]
 8003640:	3307      	adds	r3, #7
 8003642:	2b00      	cmp	r3, #0
 8003644:	da00      	bge.n	8003648 <DrawChar+0x90>
 8003646:	3307      	adds	r3, #7
 8003648:	10db      	asrs	r3, r3, #3
 800364a:	2b01      	cmp	r3, #1
 800364c:	d002      	beq.n	8003654 <DrawChar+0x9c>
 800364e:	2b02      	cmp	r3, #2
 8003650:	d004      	beq.n	800365c <DrawChar+0xa4>
 8003652:	e00c      	b.n	800366e <DrawChar+0xb6>
    {
    case 1:
      line =  pchar[0];      
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	781b      	ldrb	r3, [r3, #0]
 8003658:	617b      	str	r3, [r7, #20]
      break;
 800365a:	e016      	b.n	800368a <DrawChar+0xd2>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	781b      	ldrb	r3, [r3, #0]
 8003660:	021b      	lsls	r3, r3, #8
 8003662:	68ba      	ldr	r2, [r7, #8]
 8003664:	3201      	adds	r2, #1
 8003666:	7812      	ldrb	r2, [r2, #0]
 8003668:	4313      	orrs	r3, r2
 800366a:	617b      	str	r3, [r7, #20]
      break;
 800366c:	e00d      	b.n	800368a <DrawChar+0xd2>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	781b      	ldrb	r3, [r3, #0]
 8003672:	041a      	lsls	r2, r3, #16
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	3301      	adds	r3, #1
 8003678:	781b      	ldrb	r3, [r3, #0]
 800367a:	021b      	lsls	r3, r3, #8
 800367c:	4313      	orrs	r3, r2
 800367e:	68ba      	ldr	r2, [r7, #8]
 8003680:	3202      	adds	r2, #2
 8003682:	7812      	ldrb	r2, [r2, #0]
 8003684:	4313      	orrs	r3, r2
 8003686:	617b      	str	r3, [r7, #20]
      break;
 8003688:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 800368a:	2300      	movs	r3, #0
 800368c:	61bb      	str	r3, [r7, #24]
 800368e:	e036      	b.n	80036fe <DrawChar+0x146>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8003690:	8a3a      	ldrh	r2, [r7, #16]
 8003692:	69bb      	ldr	r3, [r7, #24]
 8003694:	1ad2      	subs	r2, r2, r3
 8003696:	7bfb      	ldrb	r3, [r7, #15]
 8003698:	4413      	add	r3, r2
 800369a:	3b01      	subs	r3, #1
 800369c:	2201      	movs	r2, #1
 800369e:	fa02 f303 	lsl.w	r3, r2, r3
 80036a2:	461a      	mov	r2, r3
 80036a4:	697b      	ldr	r3, [r7, #20]
 80036a6:	4013      	ands	r3, r2
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d012      	beq.n	80036d2 <DrawChar+0x11a>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 80036ac:	69bb      	ldr	r3, [r7, #24]
 80036ae:	b29a      	uxth	r2, r3
 80036b0:	88fb      	ldrh	r3, [r7, #6]
 80036b2:	4413      	add	r3, r2
 80036b4:	b298      	uxth	r0, r3
 80036b6:	4b1b      	ldr	r3, [pc, #108]	; (8003724 <DrawChar+0x16c>)
 80036b8:	681a      	ldr	r2, [r3, #0]
 80036ba:	491b      	ldr	r1, [pc, #108]	; (8003728 <DrawChar+0x170>)
 80036bc:	4613      	mov	r3, r2
 80036be:	005b      	lsls	r3, r3, #1
 80036c0:	4413      	add	r3, r2
 80036c2:	009b      	lsls	r3, r3, #2
 80036c4:	440b      	add	r3, r1
 80036c6:	681a      	ldr	r2, [r3, #0]
 80036c8:	88bb      	ldrh	r3, [r7, #4]
 80036ca:	4619      	mov	r1, r3
 80036cc:	f7ff ff4e 	bl	800356c <BSP_LCD_DrawPixel>
 80036d0:	e012      	b.n	80036f8 <DrawChar+0x140>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 80036d2:	69bb      	ldr	r3, [r7, #24]
 80036d4:	b29a      	uxth	r2, r3
 80036d6:	88fb      	ldrh	r3, [r7, #6]
 80036d8:	4413      	add	r3, r2
 80036da:	b298      	uxth	r0, r3
 80036dc:	4b11      	ldr	r3, [pc, #68]	; (8003724 <DrawChar+0x16c>)
 80036de:	681a      	ldr	r2, [r3, #0]
 80036e0:	4911      	ldr	r1, [pc, #68]	; (8003728 <DrawChar+0x170>)
 80036e2:	4613      	mov	r3, r2
 80036e4:	005b      	lsls	r3, r3, #1
 80036e6:	4413      	add	r3, r2
 80036e8:	009b      	lsls	r3, r3, #2
 80036ea:	440b      	add	r3, r1
 80036ec:	3304      	adds	r3, #4
 80036ee:	681a      	ldr	r2, [r3, #0]
 80036f0:	88bb      	ldrh	r3, [r7, #4]
 80036f2:	4619      	mov	r1, r3
 80036f4:	f7ff ff3a 	bl	800356c <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 80036f8:	69bb      	ldr	r3, [r7, #24]
 80036fa:	3301      	adds	r3, #1
 80036fc:	61bb      	str	r3, [r7, #24]
 80036fe:	8a3b      	ldrh	r3, [r7, #16]
 8003700:	69ba      	ldr	r2, [r7, #24]
 8003702:	429a      	cmp	r2, r3
 8003704:	d3c4      	bcc.n	8003690 <DrawChar+0xd8>
      } 
    }
    Ypos++;
 8003706:	88bb      	ldrh	r3, [r7, #4]
 8003708:	3301      	adds	r3, #1
 800370a:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 800370c:	69fb      	ldr	r3, [r7, #28]
 800370e:	3301      	adds	r3, #1
 8003710:	61fb      	str	r3, [r7, #28]
 8003712:	8a7b      	ldrh	r3, [r7, #18]
 8003714:	69fa      	ldr	r2, [r7, #28]
 8003716:	429a      	cmp	r2, r3
 8003718:	d384      	bcc.n	8003624 <DrawChar+0x6c>
  }
}
 800371a:	bf00      	nop
 800371c:	3720      	adds	r7, #32
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}
 8003722:	bf00      	nop
 8003724:	200002e8 	.word	0x200002e8
 8003728:	200002ec 	.word	0x200002ec

0800372c <FillBuffer>:
  * @param  ySize: buffer height
  * @param  OffLine: offset
  * @param  ColorIndex: color Index  
  */
static void FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b086      	sub	sp, #24
 8003730:	af02      	add	r7, sp, #8
 8003732:	60f8      	str	r0, [r7, #12]
 8003734:	60b9      	str	r1, [r7, #8]
 8003736:	607a      	str	r2, [r7, #4]
 8003738:	603b      	str	r3, [r7, #0]
  
  /* Register to memory mode with ARGB8888 as color Mode */ 
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 800373a:	4b16      	ldr	r3, [pc, #88]	; (8003794 <FillBuffer+0x68>)
 800373c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003740:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8003742:	4b14      	ldr	r3, [pc, #80]	; (8003794 <FillBuffer+0x68>)
 8003744:	2200      	movs	r2, #0
 8003746:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;      
 8003748:	4a12      	ldr	r2, [pc, #72]	; (8003794 <FillBuffer+0x68>)
 800374a:	69bb      	ldr	r3, [r7, #24]
 800374c:	60d3      	str	r3, [r2, #12]
  
  Dma2dHandler.Instance = DMA2D; 
 800374e:	4b11      	ldr	r3, [pc, #68]	; (8003794 <FillBuffer+0x68>)
 8003750:	4a11      	ldr	r2, [pc, #68]	; (8003798 <FillBuffer+0x6c>)
 8003752:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 8003754:	480f      	ldr	r0, [pc, #60]	; (8003794 <FillBuffer+0x68>)
 8003756:	f001 fa09 	bl	8004b6c <HAL_DMA2D_Init>
 800375a:	4603      	mov	r3, r0
 800375c:	2b00      	cmp	r3, #0
 800375e:	d115      	bne.n	800378c <FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK) 
 8003760:	68f9      	ldr	r1, [r7, #12]
 8003762:	480c      	ldr	r0, [pc, #48]	; (8003794 <FillBuffer+0x68>)
 8003764:	f001 fc70 	bl	8005048 <HAL_DMA2D_ConfigLayer>
 8003768:	4603      	mov	r3, r0
 800376a:	2b00      	cmp	r3, #0
 800376c:	d10e      	bne.n	800378c <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 800376e:	68ba      	ldr	r2, [r7, #8]
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	9300      	str	r3, [sp, #0]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	69f9      	ldr	r1, [r7, #28]
 8003778:	4806      	ldr	r0, [pc, #24]	; (8003794 <FillBuffer+0x68>)
 800377a:	f001 fa40 	bl	8004bfe <HAL_DMA2D_Start>
 800377e:	4603      	mov	r3, r0
 8003780:	2b00      	cmp	r3, #0
 8003782:	d103      	bne.n	800378c <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 8003784:	210a      	movs	r1, #10
 8003786:	4803      	ldr	r0, [pc, #12]	; (8003794 <FillBuffer+0x68>)
 8003788:	f001 fa64 	bl	8004c54 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 800378c:	bf00      	nop
 800378e:	3710      	adds	r7, #16
 8003790:	46bd      	mov	sp, r7
 8003792:	bd80      	pop	{r7, pc}
 8003794:	20000278 	.word	0x20000278
 8003798:	4002b000 	.word	0x4002b000

0800379c <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 80037a0:	4b29      	ldr	r3, [pc, #164]	; (8003848 <BSP_SDRAM_Init+0xac>)
 80037a2:	4a2a      	ldr	r2, [pc, #168]	; (800384c <BSP_SDRAM_Init+0xb0>)
 80037a4:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 80037a6:	4b2a      	ldr	r3, [pc, #168]	; (8003850 <BSP_SDRAM_Init+0xb4>)
 80037a8:	2202      	movs	r2, #2
 80037aa:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 80037ac:	4b28      	ldr	r3, [pc, #160]	; (8003850 <BSP_SDRAM_Init+0xb4>)
 80037ae:	2207      	movs	r2, #7
 80037b0:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 80037b2:	4b27      	ldr	r3, [pc, #156]	; (8003850 <BSP_SDRAM_Init+0xb4>)
 80037b4:	2204      	movs	r2, #4
 80037b6:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 80037b8:	4b25      	ldr	r3, [pc, #148]	; (8003850 <BSP_SDRAM_Init+0xb4>)
 80037ba:	2207      	movs	r2, #7
 80037bc:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 80037be:	4b24      	ldr	r3, [pc, #144]	; (8003850 <BSP_SDRAM_Init+0xb4>)
 80037c0:	2202      	movs	r2, #2
 80037c2:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 80037c4:	4b22      	ldr	r3, [pc, #136]	; (8003850 <BSP_SDRAM_Init+0xb4>)
 80037c6:	2202      	movs	r2, #2
 80037c8:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 80037ca:	4b21      	ldr	r3, [pc, #132]	; (8003850 <BSP_SDRAM_Init+0xb4>)
 80037cc:	2202      	movs	r2, #2
 80037ce:	619a      	str	r2, [r3, #24]
  
  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 80037d0:	4b1d      	ldr	r3, [pc, #116]	; (8003848 <BSP_SDRAM_Init+0xac>)
 80037d2:	2201      	movs	r2, #1
 80037d4:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80037d6:	4b1c      	ldr	r3, [pc, #112]	; (8003848 <BSP_SDRAM_Init+0xac>)
 80037d8:	2200      	movs	r2, #0
 80037da:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 80037dc:	4b1a      	ldr	r3, [pc, #104]	; (8003848 <BSP_SDRAM_Init+0xac>)
 80037de:	2204      	movs	r2, #4
 80037e0:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 80037e2:	4b19      	ldr	r3, [pc, #100]	; (8003848 <BSP_SDRAM_Init+0xac>)
 80037e4:	2210      	movs	r2, #16
 80037e6:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80037e8:	4b17      	ldr	r3, [pc, #92]	; (8003848 <BSP_SDRAM_Init+0xac>)
 80037ea:	2240      	movs	r2, #64	; 0x40
 80037ec:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 80037ee:	4b16      	ldr	r3, [pc, #88]	; (8003848 <BSP_SDRAM_Init+0xac>)
 80037f0:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80037f4:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80037f6:	4b14      	ldr	r3, [pc, #80]	; (8003848 <BSP_SDRAM_Init+0xac>)
 80037f8:	2200      	movs	r2, #0
 80037fa:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 80037fc:	4b12      	ldr	r3, [pc, #72]	; (8003848 <BSP_SDRAM_Init+0xac>)
 80037fe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003802:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 8003804:	4b10      	ldr	r3, [pc, #64]	; (8003848 <BSP_SDRAM_Init+0xac>)
 8003806:	2200      	movs	r2, #0
 8003808:	625a      	str	r2, [r3, #36]	; 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 800380a:	4b0f      	ldr	r3, [pc, #60]	; (8003848 <BSP_SDRAM_Init+0xac>)
 800380c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003810:	629a      	str	r2, [r3, #40]	; 0x28
                    
  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 8003812:	2100      	movs	r1, #0
 8003814:	480c      	ldr	r0, [pc, #48]	; (8003848 <BSP_SDRAM_Init+0xac>)
 8003816:	f000 f87f 	bl	8003918 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 800381a:	490d      	ldr	r1, [pc, #52]	; (8003850 <BSP_SDRAM_Init+0xb4>)
 800381c:	480a      	ldr	r0, [pc, #40]	; (8003848 <BSP_SDRAM_Init+0xac>)
 800381e:	f004 f9b7 	bl	8007b90 <HAL_SDRAM_Init>
 8003822:	4603      	mov	r3, r0
 8003824:	2b00      	cmp	r3, #0
 8003826:	d003      	beq.n	8003830 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8003828:	4b0a      	ldr	r3, [pc, #40]	; (8003854 <BSP_SDRAM_Init+0xb8>)
 800382a:	2201      	movs	r2, #1
 800382c:	701a      	strb	r2, [r3, #0]
 800382e:	e002      	b.n	8003836 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8003830:	4b08      	ldr	r3, [pc, #32]	; (8003854 <BSP_SDRAM_Init+0xb8>)
 8003832:	2200      	movs	r2, #0
 8003834:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8003836:	f240 506a 	movw	r0, #1386	; 0x56a
 800383a:	f000 f80d 	bl	8003858 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 800383e:	4b05      	ldr	r3, [pc, #20]	; (8003854 <BSP_SDRAM_Init+0xb8>)
 8003840:	781b      	ldrb	r3, [r3, #0]
}
 8003842:	4618      	mov	r0, r3
 8003844:	bd80      	pop	{r7, pc}
 8003846:	bf00      	nop
 8003848:	20000304 	.word	0x20000304
 800384c:	a0000140 	.word	0xa0000140
 8003850:	20000338 	.word	0x20000338
 8003854:	2000017c 	.word	0x2000017c

08003858 <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b084      	sub	sp, #16
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd =0;
 8003860:	2300      	movs	r3, #0
 8003862:	60fb      	str	r3, [r7, #12]
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 8003864:	4b2a      	ldr	r3, [pc, #168]	; (8003910 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003866:	2201      	movs	r2, #1
 8003868:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 800386a:	4b29      	ldr	r3, [pc, #164]	; (8003910 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800386c:	2208      	movs	r2, #8
 800386e:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8003870:	4b27      	ldr	r3, [pc, #156]	; (8003910 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003872:	2201      	movs	r2, #1
 8003874:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8003876:	4b26      	ldr	r3, [pc, #152]	; (8003910 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003878:	2200      	movs	r2, #0
 800387a:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 800387c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003880:	4923      	ldr	r1, [pc, #140]	; (8003910 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003882:	4824      	ldr	r0, [pc, #144]	; (8003914 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003884:	f004 f9b8 	bl	8007bf8 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8003888:	2001      	movs	r0, #1
 800388a:	f000 fa97 	bl	8003dbc <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 800388e:	4b20      	ldr	r3, [pc, #128]	; (8003910 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003890:	2202      	movs	r2, #2
 8003892:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8003894:	4b1e      	ldr	r3, [pc, #120]	; (8003910 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003896:	2208      	movs	r2, #8
 8003898:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 800389a:	4b1d      	ldr	r3, [pc, #116]	; (8003910 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800389c:	2201      	movs	r2, #1
 800389e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 80038a0:	4b1b      	ldr	r3, [pc, #108]	; (8003910 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80038a2:	2200      	movs	r2, #0
 80038a4:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 80038a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80038aa:	4919      	ldr	r1, [pc, #100]	; (8003910 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80038ac:	4819      	ldr	r0, [pc, #100]	; (8003914 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80038ae:	f004 f9a3 	bl	8007bf8 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80038b2:	4b17      	ldr	r3, [pc, #92]	; (8003910 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80038b4:	2203      	movs	r2, #3
 80038b6:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80038b8:	4b15      	ldr	r3, [pc, #84]	; (8003910 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80038ba:	2208      	movs	r2, #8
 80038bc:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 80038be:	4b14      	ldr	r3, [pc, #80]	; (8003910 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80038c0:	2204      	movs	r2, #4
 80038c2:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 80038c4:	4b12      	ldr	r3, [pc, #72]	; (8003910 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80038c6:	2200      	movs	r2, #0
 80038c8:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 80038ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80038ce:	4910      	ldr	r1, [pc, #64]	; (8003910 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80038d0:	4810      	ldr	r0, [pc, #64]	; (8003914 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80038d2:	f004 f991 	bl	8007bf8 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 80038d6:	f44f 730c 	mov.w	r3, #560	; 0x230
 80038da:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 80038dc:	4b0c      	ldr	r3, [pc, #48]	; (8003910 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80038de:	2204      	movs	r2, #4
 80038e0:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80038e2:	4b0b      	ldr	r3, [pc, #44]	; (8003910 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80038e4:	2208      	movs	r2, #8
 80038e6:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 80038e8:	4b09      	ldr	r3, [pc, #36]	; (8003910 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80038ea:	2201      	movs	r2, #1
 80038ec:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	4a07      	ldr	r2, [pc, #28]	; (8003910 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80038f2:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 80038f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80038f8:	4905      	ldr	r1, [pc, #20]	; (8003910 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80038fa:	4806      	ldr	r0, [pc, #24]	; (8003914 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80038fc:	f004 f97c 	bl	8007bf8 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 8003900:	6879      	ldr	r1, [r7, #4]
 8003902:	4804      	ldr	r0, [pc, #16]	; (8003914 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003904:	f004 f9a3 	bl	8007c4e <HAL_SDRAM_ProgramRefreshRate>
}
 8003908:	bf00      	nop
 800390a:	3710      	adds	r7, #16
 800390c:	46bd      	mov	sp, r7
 800390e:	bd80      	pop	{r7, pc}
 8003910:	20000354 	.word	0x20000354
 8003914:	20000304 	.word	0x20000304

08003918 <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b090      	sub	sp, #64	; 0x40
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
 8003920:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2b00      	cmp	r3, #0
 8003926:	f000 80ec 	beq.w	8003b02 <BSP_SDRAM_MspInit+0x1ea>
  {
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 800392a:	2300      	movs	r3, #0
 800392c:	62bb      	str	r3, [r7, #40]	; 0x28
 800392e:	4b77      	ldr	r3, [pc, #476]	; (8003b0c <BSP_SDRAM_MspInit+0x1f4>)
 8003930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003932:	4a76      	ldr	r2, [pc, #472]	; (8003b0c <BSP_SDRAM_MspInit+0x1f4>)
 8003934:	f043 0301 	orr.w	r3, r3, #1
 8003938:	6393      	str	r3, [r2, #56]	; 0x38
 800393a:	4b74      	ldr	r3, [pc, #464]	; (8003b0c <BSP_SDRAM_MspInit+0x1f4>)
 800393c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800393e:	f003 0301 	and.w	r3, r3, #1
 8003942:	62bb      	str	r3, [r7, #40]	; 0x28
 8003944:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8003946:	2300      	movs	r3, #0
 8003948:	627b      	str	r3, [r7, #36]	; 0x24
 800394a:	4b70      	ldr	r3, [pc, #448]	; (8003b0c <BSP_SDRAM_MspInit+0x1f4>)
 800394c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800394e:	4a6f      	ldr	r2, [pc, #444]	; (8003b0c <BSP_SDRAM_MspInit+0x1f4>)
 8003950:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003954:	6313      	str	r3, [r2, #48]	; 0x30
 8003956:	4b6d      	ldr	r3, [pc, #436]	; (8003b0c <BSP_SDRAM_MspInit+0x1f4>)
 8003958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800395a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800395e:	627b      	str	r3, [r7, #36]	; 0x24
 8003960:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003962:	2300      	movs	r3, #0
 8003964:	623b      	str	r3, [r7, #32]
 8003966:	4b69      	ldr	r3, [pc, #420]	; (8003b0c <BSP_SDRAM_MspInit+0x1f4>)
 8003968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800396a:	4a68      	ldr	r2, [pc, #416]	; (8003b0c <BSP_SDRAM_MspInit+0x1f4>)
 800396c:	f043 0302 	orr.w	r3, r3, #2
 8003970:	6313      	str	r3, [r2, #48]	; 0x30
 8003972:	4b66      	ldr	r3, [pc, #408]	; (8003b0c <BSP_SDRAM_MspInit+0x1f4>)
 8003974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003976:	f003 0302 	and.w	r3, r3, #2
 800397a:	623b      	str	r3, [r7, #32]
 800397c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800397e:	2300      	movs	r3, #0
 8003980:	61fb      	str	r3, [r7, #28]
 8003982:	4b62      	ldr	r3, [pc, #392]	; (8003b0c <BSP_SDRAM_MspInit+0x1f4>)
 8003984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003986:	4a61      	ldr	r2, [pc, #388]	; (8003b0c <BSP_SDRAM_MspInit+0x1f4>)
 8003988:	f043 0304 	orr.w	r3, r3, #4
 800398c:	6313      	str	r3, [r2, #48]	; 0x30
 800398e:	4b5f      	ldr	r3, [pc, #380]	; (8003b0c <BSP_SDRAM_MspInit+0x1f4>)
 8003990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003992:	f003 0304 	and.w	r3, r3, #4
 8003996:	61fb      	str	r3, [r7, #28]
 8003998:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800399a:	2300      	movs	r3, #0
 800399c:	61bb      	str	r3, [r7, #24]
 800399e:	4b5b      	ldr	r3, [pc, #364]	; (8003b0c <BSP_SDRAM_MspInit+0x1f4>)
 80039a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039a2:	4a5a      	ldr	r2, [pc, #360]	; (8003b0c <BSP_SDRAM_MspInit+0x1f4>)
 80039a4:	f043 0308 	orr.w	r3, r3, #8
 80039a8:	6313      	str	r3, [r2, #48]	; 0x30
 80039aa:	4b58      	ldr	r3, [pc, #352]	; (8003b0c <BSP_SDRAM_MspInit+0x1f4>)
 80039ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ae:	f003 0308 	and.w	r3, r3, #8
 80039b2:	61bb      	str	r3, [r7, #24]
 80039b4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80039b6:	2300      	movs	r3, #0
 80039b8:	617b      	str	r3, [r7, #20]
 80039ba:	4b54      	ldr	r3, [pc, #336]	; (8003b0c <BSP_SDRAM_MspInit+0x1f4>)
 80039bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039be:	4a53      	ldr	r2, [pc, #332]	; (8003b0c <BSP_SDRAM_MspInit+0x1f4>)
 80039c0:	f043 0310 	orr.w	r3, r3, #16
 80039c4:	6313      	str	r3, [r2, #48]	; 0x30
 80039c6:	4b51      	ldr	r3, [pc, #324]	; (8003b0c <BSP_SDRAM_MspInit+0x1f4>)
 80039c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ca:	f003 0310 	and.w	r3, r3, #16
 80039ce:	617b      	str	r3, [r7, #20]
 80039d0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80039d2:	2300      	movs	r3, #0
 80039d4:	613b      	str	r3, [r7, #16]
 80039d6:	4b4d      	ldr	r3, [pc, #308]	; (8003b0c <BSP_SDRAM_MspInit+0x1f4>)
 80039d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039da:	4a4c      	ldr	r2, [pc, #304]	; (8003b0c <BSP_SDRAM_MspInit+0x1f4>)
 80039dc:	f043 0320 	orr.w	r3, r3, #32
 80039e0:	6313      	str	r3, [r2, #48]	; 0x30
 80039e2:	4b4a      	ldr	r3, [pc, #296]	; (8003b0c <BSP_SDRAM_MspInit+0x1f4>)
 80039e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039e6:	f003 0320 	and.w	r3, r3, #32
 80039ea:	613b      	str	r3, [r7, #16]
 80039ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80039ee:	2300      	movs	r3, #0
 80039f0:	60fb      	str	r3, [r7, #12]
 80039f2:	4b46      	ldr	r3, [pc, #280]	; (8003b0c <BSP_SDRAM_MspInit+0x1f4>)
 80039f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039f6:	4a45      	ldr	r2, [pc, #276]	; (8003b0c <BSP_SDRAM_MspInit+0x1f4>)
 80039f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80039fc:	6313      	str	r3, [r2, #48]	; 0x30
 80039fe:	4b43      	ldr	r3, [pc, #268]	; (8003b0c <BSP_SDRAM_MspInit+0x1f4>)
 8003a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a06:	60fb      	str	r3, [r7, #12]
 8003a08:	68fb      	ldr	r3, [r7, #12]
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 8003a0a:	2302      	movs	r3, #2
 8003a0c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8003a0e:	2302      	movs	r3, #2
 8003a10:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8003a12:	2300      	movs	r3, #0
 8003a14:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 8003a16:	230c      	movs	r3, #12
 8003a18:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 8003a1a:	2360      	movs	r3, #96	; 0x60
 8003a1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 8003a1e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003a22:	4619      	mov	r1, r3
 8003a24:	483a      	ldr	r0, [pc, #232]	; (8003b10 <BSP_SDRAM_MspInit+0x1f8>)
 8003a26:	f001 fc3d 	bl	80052a4 <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 8003a2e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003a32:	4619      	mov	r1, r3
 8003a34:	4837      	ldr	r0, [pc, #220]	; (8003b14 <BSP_SDRAM_MspInit+0x1fc>)
 8003a36:	f001 fc35 	bl	80052a4 <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 8003a3a:	f24c 7303 	movw	r3, #50947	; 0xc703
 8003a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8003a40:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003a44:	4619      	mov	r1, r3
 8003a46:	4834      	ldr	r0, [pc, #208]	; (8003b18 <BSP_SDRAM_MspInit+0x200>)
 8003a48:	f001 fc2c 	bl	80052a4 <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 8003a4c:	f64f 7383 	movw	r3, #65411	; 0xff83
 8003a50:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 8003a52:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003a56:	4619      	mov	r1, r3
 8003a58:	4830      	ldr	r0, [pc, #192]	; (8003b1c <BSP_SDRAM_MspInit+0x204>)
 8003a5a:	f001 fc23 	bl	80052a4 <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 8003a5e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8003a62:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8003a64:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003a68:	4619      	mov	r1, r3
 8003a6a:	482d      	ldr	r0, [pc, #180]	; (8003b20 <BSP_SDRAM_MspInit+0x208>)
 8003a6c:	f001 fc1a 	bl	80052a4 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 8003a70:	f248 1333 	movw	r3, #33075	; 0x8133
 8003a74:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8003a76:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003a7a:	4619      	mov	r1, r3
 8003a7c:	4829      	ldr	r0, [pc, #164]	; (8003b24 <BSP_SDRAM_MspInit+0x20c>)
 8003a7e:	f001 fc11 	bl	80052a4 <HAL_GPIO_Init>

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8003a82:	4b29      	ldr	r3, [pc, #164]	; (8003b28 <BSP_SDRAM_MspInit+0x210>)
 8003a84:	2200      	movs	r2, #0
 8003a86:	605a      	str	r2, [r3, #4]
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8003a88:	4b27      	ldr	r3, [pc, #156]	; (8003b28 <BSP_SDRAM_MspInit+0x210>)
 8003a8a:	2280      	movs	r2, #128	; 0x80
 8003a8c:	609a      	str	r2, [r3, #8]
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8003a8e:	4b26      	ldr	r3, [pc, #152]	; (8003b28 <BSP_SDRAM_MspInit+0x210>)
 8003a90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a94:	60da      	str	r2, [r3, #12]
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 8003a96:	4b24      	ldr	r3, [pc, #144]	; (8003b28 <BSP_SDRAM_MspInit+0x210>)
 8003a98:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003a9c:	611a      	str	r2, [r3, #16]
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003a9e:	4b22      	ldr	r3, [pc, #136]	; (8003b28 <BSP_SDRAM_MspInit+0x210>)
 8003aa0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003aa4:	615a      	str	r2, [r3, #20]
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8003aa6:	4b20      	ldr	r3, [pc, #128]	; (8003b28 <BSP_SDRAM_MspInit+0x210>)
 8003aa8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003aac:	619a      	str	r2, [r3, #24]
  dmaHandle.Init.Mode                = DMA_NORMAL;
 8003aae:	4b1e      	ldr	r3, [pc, #120]	; (8003b28 <BSP_SDRAM_MspInit+0x210>)
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	61da      	str	r2, [r3, #28]
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 8003ab4:	4b1c      	ldr	r3, [pc, #112]	; (8003b28 <BSP_SDRAM_MspInit+0x210>)
 8003ab6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003aba:	621a      	str	r2, [r3, #32]
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8003abc:	4b1a      	ldr	r3, [pc, #104]	; (8003b28 <BSP_SDRAM_MspInit+0x210>)
 8003abe:	2200      	movs	r2, #0
 8003ac0:	625a      	str	r2, [r3, #36]	; 0x24
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8003ac2:	4b19      	ldr	r3, [pc, #100]	; (8003b28 <BSP_SDRAM_MspInit+0x210>)
 8003ac4:	2203      	movs	r2, #3
 8003ac6:	629a      	str	r2, [r3, #40]	; 0x28
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8003ac8:	4b17      	ldr	r3, [pc, #92]	; (8003b28 <BSP_SDRAM_MspInit+0x210>)
 8003aca:	2200      	movs	r2, #0
 8003acc:	62da      	str	r2, [r3, #44]	; 0x2c
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8003ace:	4b16      	ldr	r3, [pc, #88]	; (8003b28 <BSP_SDRAM_MspInit+0x210>)
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	631a      	str	r2, [r3, #48]	; 0x30
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 8003ad4:	4b14      	ldr	r3, [pc, #80]	; (8003b28 <BSP_SDRAM_MspInit+0x210>)
 8003ad6:	4a15      	ldr	r2, [pc, #84]	; (8003b2c <BSP_SDRAM_MspInit+0x214>)
 8003ad8:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	4a12      	ldr	r2, [pc, #72]	; (8003b28 <BSP_SDRAM_MspInit+0x210>)
 8003ade:	631a      	str	r2, [r3, #48]	; 0x30
 8003ae0:	4a11      	ldr	r2, [pc, #68]	; (8003b28 <BSP_SDRAM_MspInit+0x210>)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 8003ae6:	4810      	ldr	r0, [pc, #64]	; (8003b28 <BSP_SDRAM_MspInit+0x210>)
 8003ae8:	f000 ff32 	bl	8004950 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle); 
 8003aec:	480e      	ldr	r0, [pc, #56]	; (8003b28 <BSP_SDRAM_MspInit+0x210>)
 8003aee:	f000 fe81 	bl	80047f4 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8003af2:	2200      	movs	r2, #0
 8003af4:	210f      	movs	r1, #15
 8003af6:	2038      	movs	r0, #56	; 0x38
 8003af8:	f000 fe36 	bl	8004768 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8003afc:	2038      	movs	r0, #56	; 0x38
 8003afe:	f000 fe4f 	bl	80047a0 <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 8003b02:	bf00      	nop
 8003b04:	3740      	adds	r7, #64	; 0x40
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}
 8003b0a:	bf00      	nop
 8003b0c:	40023800 	.word	0x40023800
 8003b10:	40020400 	.word	0x40020400
 8003b14:	40020800 	.word	0x40020800
 8003b18:	40020c00 	.word	0x40020c00
 8003b1c:	40021000 	.word	0x40021000
 8003b20:	40021400 	.word	0x40021400
 8003b24:	40021800 	.word	0x40021800
 8003b28:	20000364 	.word	0x20000364
 8003b2c:	40026410 	.word	0x40026410

08003b30 <BSP_TS_Init>:
  * @param  XSize: The maximum X size of the TS area on LCD
  * @param  YSize: The maximum Y size of the TS area on LCD  
  * @retval TS_OK: if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t XSize, uint16_t YSize)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b084      	sub	sp, #16
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	4603      	mov	r3, r0
 8003b38:	460a      	mov	r2, r1
 8003b3a:	80fb      	strh	r3, [r7, #6]
 8003b3c:	4613      	mov	r3, r2
 8003b3e:	80bb      	strh	r3, [r7, #4]
  uint8_t ret = TS_ERROR;
 8003b40:	2301      	movs	r3, #1
 8003b42:	73fb      	strb	r3, [r7, #15]

  /* Initialize x and y positions boundaries */
  TsXBoundary = XSize;
 8003b44:	4a13      	ldr	r2, [pc, #76]	; (8003b94 <BSP_TS_Init+0x64>)
 8003b46:	88fb      	ldrh	r3, [r7, #6]
 8003b48:	8013      	strh	r3, [r2, #0]
  TsYBoundary = YSize;
 8003b4a:	4a13      	ldr	r2, [pc, #76]	; (8003b98 <BSP_TS_Init+0x68>)
 8003b4c:	88bb      	ldrh	r3, [r7, #4]
 8003b4e:	8013      	strh	r3, [r2, #0]

  /* Read ID and verify if the IO expander is ready */
  if(stmpe811_ts_drv.ReadID(TS_I2C_ADDRESS) == STMPE811_ID)
 8003b50:	4b12      	ldr	r3, [pc, #72]	; (8003b9c <BSP_TS_Init+0x6c>)
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	2082      	movs	r0, #130	; 0x82
 8003b56:	4798      	blx	r3
 8003b58:	4603      	mov	r3, r0
 8003b5a:	461a      	mov	r2, r3
 8003b5c:	f640 0311 	movw	r3, #2065	; 0x811
 8003b60:	429a      	cmp	r2, r3
 8003b62:	d104      	bne.n	8003b6e <BSP_TS_Init+0x3e>
  {
    /* Initialize the TS driver structure */
    TsDrv = &stmpe811_ts_drv;
 8003b64:	4b0e      	ldr	r3, [pc, #56]	; (8003ba0 <BSP_TS_Init+0x70>)
 8003b66:	4a0d      	ldr	r2, [pc, #52]	; (8003b9c <BSP_TS_Init+0x6c>)
 8003b68:	601a      	str	r2, [r3, #0]

    ret = TS_OK;
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	73fb      	strb	r3, [r7, #15]
  }

  if(ret == TS_OK)
 8003b6e:	7bfb      	ldrb	r3, [r7, #15]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d109      	bne.n	8003b88 <BSP_TS_Init+0x58>
  {
    /* Initialize the LL TS Driver */
    TsDrv->Init(TS_I2C_ADDRESS);
 8003b74:	4b0a      	ldr	r3, [pc, #40]	; (8003ba0 <BSP_TS_Init+0x70>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	2082      	movs	r0, #130	; 0x82
 8003b7c:	4798      	blx	r3
    TsDrv->Start(TS_I2C_ADDRESS);
 8003b7e:	4b08      	ldr	r3, [pc, #32]	; (8003ba0 <BSP_TS_Init+0x70>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	68db      	ldr	r3, [r3, #12]
 8003b84:	2082      	movs	r0, #130	; 0x82
 8003b86:	4798      	blx	r3
  }

  return ret;
 8003b88:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	3710      	adds	r7, #16
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}
 8003b92:	bf00      	nop
 8003b94:	200003c8 	.word	0x200003c8
 8003b98:	200003ca 	.word	0x200003ca
 8003b9c:	20000134 	.word	0x20000134
 8003ba0:	200003c4 	.word	0x200003c4

08003ba4 <BSP_TS_ITGetStatus>:
/**
  * @brief  Gets the TS IT status.
  * @retval Interrupt status.
  */  
uint8_t BSP_TS_ITGetStatus(void)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	af00      	add	r7, sp, #0
  /* Return the TS IT status */
  return (TsDrv->GetITStatus(TS_I2C_ADDRESS));
 8003ba8:	4b03      	ldr	r3, [pc, #12]	; (8003bb8 <BSP_TS_ITGetStatus+0x14>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	6a1b      	ldr	r3, [r3, #32]
 8003bae:	2082      	movs	r0, #130	; 0x82
 8003bb0:	4798      	blx	r3
 8003bb2:	4603      	mov	r3, r0
}
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	bd80      	pop	{r7, pc}
 8003bb8:	200003c4 	.word	0x200003c4

08003bbc <BSP_TS_GetState>:
/**
  * @brief  Returns status and positions of the touch screen.
  * @param  TsState: Pointer to touch screen current state structure
  */
void BSP_TS_GetState(TS_StateTypeDef* TsState)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b086      	sub	sp, #24
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
  static uint32_t _x = 0, _y = 0;
  uint16_t xDiff, yDiff , x , y, xr, yr;
  
  TsState->TouchDetected = TsDrv->DetectTouch(TS_I2C_ADDRESS);
 8003bc4:	4b4f      	ldr	r3, [pc, #316]	; (8003d04 <BSP_TS_GetState+0x148>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	691b      	ldr	r3, [r3, #16]
 8003bca:	2082      	movs	r0, #130	; 0x82
 8003bcc:	4798      	blx	r3
 8003bce:	4603      	mov	r3, r0
 8003bd0:	b29a      	uxth	r2, r3
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	801a      	strh	r2, [r3, #0]
  
  if(TsState->TouchDetected)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	881b      	ldrh	r3, [r3, #0]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	f000 808d 	beq.w	8003cfa <BSP_TS_GetState+0x13e>
  {
    TsDrv->GetXY(TS_I2C_ADDRESS, &x, &y);
 8003be0:	4b48      	ldr	r3, [pc, #288]	; (8003d04 <BSP_TS_GetState+0x148>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	695b      	ldr	r3, [r3, #20]
 8003be6:	f107 020c 	add.w	r2, r7, #12
 8003bea:	f107 010e 	add.w	r1, r7, #14
 8003bee:	2082      	movs	r0, #130	; 0x82
 8003bf0:	4798      	blx	r3
    
    /* Y value first correction */
    y -= 360;  
 8003bf2:	89bb      	ldrh	r3, [r7, #12]
 8003bf4:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003bf8:	b29b      	uxth	r3, r3
 8003bfa:	81bb      	strh	r3, [r7, #12]
    
    /* Y value second correction */
    yr = y / 11;
 8003bfc:	89bb      	ldrh	r3, [r7, #12]
 8003bfe:	4a42      	ldr	r2, [pc, #264]	; (8003d08 <BSP_TS_GetState+0x14c>)
 8003c00:	fba2 2303 	umull	r2, r3, r2, r3
 8003c04:	08db      	lsrs	r3, r3, #3
 8003c06:	82bb      	strh	r3, [r7, #20]
    
    /* Return y position value */
    if(yr <= 0)
 8003c08:	8abb      	ldrh	r3, [r7, #20]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d102      	bne.n	8003c14 <BSP_TS_GetState+0x58>
    {
      yr = 0;
 8003c0e:	2300      	movs	r3, #0
 8003c10:	82bb      	strh	r3, [r7, #20]
 8003c12:	e008      	b.n	8003c26 <BSP_TS_GetState+0x6a>
    }
    else if (yr > TsYBoundary)
 8003c14:	4b3d      	ldr	r3, [pc, #244]	; (8003d0c <BSP_TS_GetState+0x150>)
 8003c16:	881b      	ldrh	r3, [r3, #0]
 8003c18:	8aba      	ldrh	r2, [r7, #20]
 8003c1a:	429a      	cmp	r2, r3
 8003c1c:	d903      	bls.n	8003c26 <BSP_TS_GetState+0x6a>
    {
      yr = TsYBoundary - 1;
 8003c1e:	4b3b      	ldr	r3, [pc, #236]	; (8003d0c <BSP_TS_GetState+0x150>)
 8003c20:	881b      	ldrh	r3, [r3, #0]
 8003c22:	3b01      	subs	r3, #1
 8003c24:	82bb      	strh	r3, [r7, #20]
    }
    else
    {}
    y = yr;
 8003c26:	8abb      	ldrh	r3, [r7, #20]
 8003c28:	81bb      	strh	r3, [r7, #12]
    
    /* X value first correction */
    if(x <= 3000)
 8003c2a:	89fb      	ldrh	r3, [r7, #14]
 8003c2c:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d806      	bhi.n	8003c42 <BSP_TS_GetState+0x86>
    {
      x = 3870 - x;
 8003c34:	89fb      	ldrh	r3, [r7, #14]
 8003c36:	f5c3 6371 	rsb	r3, r3, #3856	; 0xf10
 8003c3a:	330e      	adds	r3, #14
 8003c3c:	b29b      	uxth	r3, r3
 8003c3e:	81fb      	strh	r3, [r7, #14]
 8003c40:	e005      	b.n	8003c4e <BSP_TS_GetState+0x92>
    }
    else
    {
      x = 3800 - x;
 8003c42:	89fb      	ldrh	r3, [r7, #14]
 8003c44:	f5c3 636d 	rsb	r3, r3, #3792	; 0xed0
 8003c48:	3308      	adds	r3, #8
 8003c4a:	b29b      	uxth	r3, r3
 8003c4c:	81fb      	strh	r3, [r7, #14]
    }
    
    /* X value second correction */  
    xr = x / 15;
 8003c4e:	89fb      	ldrh	r3, [r7, #14]
 8003c50:	4a2f      	ldr	r2, [pc, #188]	; (8003d10 <BSP_TS_GetState+0x154>)
 8003c52:	fba2 2303 	umull	r2, r3, r2, r3
 8003c56:	08db      	lsrs	r3, r3, #3
 8003c58:	82fb      	strh	r3, [r7, #22]
    
    /* Return X position value */
    if(xr <= 0)
 8003c5a:	8afb      	ldrh	r3, [r7, #22]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d102      	bne.n	8003c66 <BSP_TS_GetState+0xaa>
    {
      xr = 0;
 8003c60:	2300      	movs	r3, #0
 8003c62:	82fb      	strh	r3, [r7, #22]
 8003c64:	e008      	b.n	8003c78 <BSP_TS_GetState+0xbc>
    }
    else if (xr > TsXBoundary)
 8003c66:	4b2b      	ldr	r3, [pc, #172]	; (8003d14 <BSP_TS_GetState+0x158>)
 8003c68:	881b      	ldrh	r3, [r3, #0]
 8003c6a:	8afa      	ldrh	r2, [r7, #22]
 8003c6c:	429a      	cmp	r2, r3
 8003c6e:	d903      	bls.n	8003c78 <BSP_TS_GetState+0xbc>
    {
      xr = TsXBoundary - 1;
 8003c70:	4b28      	ldr	r3, [pc, #160]	; (8003d14 <BSP_TS_GetState+0x158>)
 8003c72:	881b      	ldrh	r3, [r3, #0]
 8003c74:	3b01      	subs	r3, #1
 8003c76:	82fb      	strh	r3, [r7, #22]
    }
    else 
    {}
    
    x = xr;
 8003c78:	8afb      	ldrh	r3, [r7, #22]
 8003c7a:	81fb      	strh	r3, [r7, #14]
    xDiff = x > _x? (x - _x): (_x - x);
 8003c7c:	89fb      	ldrh	r3, [r7, #14]
 8003c7e:	461a      	mov	r2, r3
 8003c80:	4b25      	ldr	r3, [pc, #148]	; (8003d18 <BSP_TS_GetState+0x15c>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	429a      	cmp	r2, r3
 8003c86:	d906      	bls.n	8003c96 <BSP_TS_GetState+0xda>
 8003c88:	89fa      	ldrh	r2, [r7, #14]
 8003c8a:	4b23      	ldr	r3, [pc, #140]	; (8003d18 <BSP_TS_GetState+0x15c>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	b29b      	uxth	r3, r3
 8003c90:	1ad3      	subs	r3, r2, r3
 8003c92:	b29b      	uxth	r3, r3
 8003c94:	e005      	b.n	8003ca2 <BSP_TS_GetState+0xe6>
 8003c96:	4b20      	ldr	r3, [pc, #128]	; (8003d18 <BSP_TS_GetState+0x15c>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	b29a      	uxth	r2, r3
 8003c9c:	89fb      	ldrh	r3, [r7, #14]
 8003c9e:	1ad3      	subs	r3, r2, r3
 8003ca0:	b29b      	uxth	r3, r3
 8003ca2:	827b      	strh	r3, [r7, #18]
    yDiff = y > _y? (y - _y): (_y - y); 
 8003ca4:	89bb      	ldrh	r3, [r7, #12]
 8003ca6:	461a      	mov	r2, r3
 8003ca8:	4b1c      	ldr	r3, [pc, #112]	; (8003d1c <BSP_TS_GetState+0x160>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	429a      	cmp	r2, r3
 8003cae:	d906      	bls.n	8003cbe <BSP_TS_GetState+0x102>
 8003cb0:	89ba      	ldrh	r2, [r7, #12]
 8003cb2:	4b1a      	ldr	r3, [pc, #104]	; (8003d1c <BSP_TS_GetState+0x160>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	b29b      	uxth	r3, r3
 8003cb8:	1ad3      	subs	r3, r2, r3
 8003cba:	b29b      	uxth	r3, r3
 8003cbc:	e005      	b.n	8003cca <BSP_TS_GetState+0x10e>
 8003cbe:	4b17      	ldr	r3, [pc, #92]	; (8003d1c <BSP_TS_GetState+0x160>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	b29a      	uxth	r2, r3
 8003cc4:	89bb      	ldrh	r3, [r7, #12]
 8003cc6:	1ad3      	subs	r3, r2, r3
 8003cc8:	b29b      	uxth	r3, r3
 8003cca:	823b      	strh	r3, [r7, #16]
    
    if (xDiff + yDiff > 5)
 8003ccc:	8a7a      	ldrh	r2, [r7, #18]
 8003cce:	8a3b      	ldrh	r3, [r7, #16]
 8003cd0:	4413      	add	r3, r2
 8003cd2:	2b05      	cmp	r3, #5
 8003cd4:	dd07      	ble.n	8003ce6 <BSP_TS_GetState+0x12a>
    {
      _x = x;
 8003cd6:	89fb      	ldrh	r3, [r7, #14]
 8003cd8:	461a      	mov	r2, r3
 8003cda:	4b0f      	ldr	r3, [pc, #60]	; (8003d18 <BSP_TS_GetState+0x15c>)
 8003cdc:	601a      	str	r2, [r3, #0]
      _y = y; 
 8003cde:	89bb      	ldrh	r3, [r7, #12]
 8003ce0:	461a      	mov	r2, r3
 8003ce2:	4b0e      	ldr	r3, [pc, #56]	; (8003d1c <BSP_TS_GetState+0x160>)
 8003ce4:	601a      	str	r2, [r3, #0]
    }
    
    /* Update the X position */
    TsState->X = _x;
 8003ce6:	4b0c      	ldr	r3, [pc, #48]	; (8003d18 <BSP_TS_GetState+0x15c>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	b29a      	uxth	r2, r3
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	805a      	strh	r2, [r3, #2]
    
    /* Update the Y position */  
    TsState->Y = _y;
 8003cf0:	4b0a      	ldr	r3, [pc, #40]	; (8003d1c <BSP_TS_GetState+0x160>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	b29a      	uxth	r2, r3
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	809a      	strh	r2, [r3, #4]
  }
}
 8003cfa:	bf00      	nop
 8003cfc:	3718      	adds	r7, #24
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}
 8003d02:	bf00      	nop
 8003d04:	200003c4 	.word	0x200003c4
 8003d08:	ba2e8ba3 	.word	0xba2e8ba3
 8003d0c:	200003ca 	.word	0x200003ca
 8003d10:	88888889 	.word	0x88888889
 8003d14:	200003c8 	.word	0x200003c8
 8003d18:	200003cc 	.word	0x200003cc
 8003d1c:	200003d0 	.word	0x200003d0

08003d20 <BSP_TS_ITClear>:

/**
  * @brief  Clears all touch screen interrupts.
  */  
void BSP_TS_ITClear(void)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	af00      	add	r7, sp, #0
  /* Clear TS IT pending bits */
  TsDrv->ClearIT(TS_I2C_ADDRESS); 
 8003d24:	4b03      	ldr	r3, [pc, #12]	; (8003d34 <BSP_TS_ITClear+0x14>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	69db      	ldr	r3, [r3, #28]
 8003d2a:	2082      	movs	r0, #130	; 0x82
 8003d2c:	4798      	blx	r3
}
 8003d2e:	bf00      	nop
 8003d30:	bd80      	pop	{r7, pc}
 8003d32:	bf00      	nop
 8003d34:	200003c4 	.word	0x200003c4

08003d38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003d3c:	4b0e      	ldr	r3, [pc, #56]	; (8003d78 <HAL_Init+0x40>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a0d      	ldr	r2, [pc, #52]	; (8003d78 <HAL_Init+0x40>)
 8003d42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003d46:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003d48:	4b0b      	ldr	r3, [pc, #44]	; (8003d78 <HAL_Init+0x40>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a0a      	ldr	r2, [pc, #40]	; (8003d78 <HAL_Init+0x40>)
 8003d4e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003d52:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003d54:	4b08      	ldr	r3, [pc, #32]	; (8003d78 <HAL_Init+0x40>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a07      	ldr	r2, [pc, #28]	; (8003d78 <HAL_Init+0x40>)
 8003d5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d5e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003d60:	2003      	movs	r0, #3
 8003d62:	f000 fcf6 	bl	8004752 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003d66:	2000      	movs	r0, #0
 8003d68:	f7fd fec4 	bl	8001af4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003d6c:	f7fd fe96 	bl	8001a9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003d70:	2300      	movs	r3, #0
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	bd80      	pop	{r7, pc}
 8003d76:	bf00      	nop
 8003d78:	40023c00 	.word	0x40023c00

08003d7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003d80:	4b06      	ldr	r3, [pc, #24]	; (8003d9c <HAL_IncTick+0x20>)
 8003d82:	781b      	ldrb	r3, [r3, #0]
 8003d84:	461a      	mov	r2, r3
 8003d86:	4b06      	ldr	r3, [pc, #24]	; (8003da0 <HAL_IncTick+0x24>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4413      	add	r3, r2
 8003d8c:	4a04      	ldr	r2, [pc, #16]	; (8003da0 <HAL_IncTick+0x24>)
 8003d8e:	6013      	str	r3, [r2, #0]
}
 8003d90:	bf00      	nop
 8003d92:	46bd      	mov	sp, r7
 8003d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d98:	4770      	bx	lr
 8003d9a:	bf00      	nop
 8003d9c:	20000184 	.word	0x20000184
 8003da0:	200007fc 	.word	0x200007fc

08003da4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003da4:	b480      	push	{r7}
 8003da6:	af00      	add	r7, sp, #0
  return uwTick;
 8003da8:	4b03      	ldr	r3, [pc, #12]	; (8003db8 <HAL_GetTick+0x14>)
 8003daa:	681b      	ldr	r3, [r3, #0]
}
 8003dac:	4618      	mov	r0, r3
 8003dae:	46bd      	mov	sp, r7
 8003db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db4:	4770      	bx	lr
 8003db6:	bf00      	nop
 8003db8:	200007fc 	.word	0x200007fc

08003dbc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b084      	sub	sp, #16
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003dc4:	f7ff ffee 	bl	8003da4 <HAL_GetTick>
 8003dc8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dd4:	d005      	beq.n	8003de2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003dd6:	4b09      	ldr	r3, [pc, #36]	; (8003dfc <HAL_Delay+0x40>)
 8003dd8:	781b      	ldrb	r3, [r3, #0]
 8003dda:	461a      	mov	r2, r3
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	4413      	add	r3, r2
 8003de0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003de2:	bf00      	nop
 8003de4:	f7ff ffde 	bl	8003da4 <HAL_GetTick>
 8003de8:	4602      	mov	r2, r0
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	1ad3      	subs	r3, r2, r3
 8003dee:	68fa      	ldr	r2, [r7, #12]
 8003df0:	429a      	cmp	r2, r3
 8003df2:	d8f7      	bhi.n	8003de4 <HAL_Delay+0x28>
  {
  }
}
 8003df4:	bf00      	nop
 8003df6:	3710      	adds	r7, #16
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bd80      	pop	{r7, pc}
 8003dfc:	20000184 	.word	0x20000184

08003e00 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b084      	sub	sp, #16
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003e08:	2300      	movs	r3, #0
 8003e0a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d101      	bne.n	8003e16 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003e12:	2301      	movs	r3, #1
 8003e14:	e033      	b.n	8003e7e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d109      	bne.n	8003e32 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003e1e:	6878      	ldr	r0, [r7, #4]
 8003e20:	f7fc fc84 	bl	800072c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2200      	movs	r2, #0
 8003e28:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e36:	f003 0310 	and.w	r3, r3, #16
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d118      	bne.n	8003e70 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e42:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003e46:	f023 0302 	bic.w	r3, r3, #2
 8003e4a:	f043 0202 	orr.w	r2, r3, #2
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003e52:	6878      	ldr	r0, [r7, #4]
 8003e54:	f000 fad4 	bl	8004400 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e62:	f023 0303 	bic.w	r3, r3, #3
 8003e66:	f043 0201 	orr.w	r2, r3, #1
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	641a      	str	r2, [r3, #64]	; 0x40
 8003e6e:	e001      	b.n	8003e74 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003e70:	2301      	movs	r3, #1
 8003e72:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2200      	movs	r2, #0
 8003e78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003e7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	3710      	adds	r7, #16
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}
	...

08003e88 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	b085      	sub	sp, #20
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8003e90:	2300      	movs	r3, #0
 8003e92:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e9a:	2b01      	cmp	r3, #1
 8003e9c:	d101      	bne.n	8003ea2 <HAL_ADC_Start+0x1a>
 8003e9e:	2302      	movs	r3, #2
 8003ea0:	e0a5      	b.n	8003fee <HAL_ADC_Start+0x166>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2201      	movs	r2, #1
 8003ea6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	689b      	ldr	r3, [r3, #8]
 8003eb0:	f003 0301 	and.w	r3, r3, #1
 8003eb4:	2b01      	cmp	r3, #1
 8003eb6:	d018      	beq.n	8003eea <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	689a      	ldr	r2, [r3, #8]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f042 0201 	orr.w	r2, r2, #1
 8003ec6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003ec8:	4b4c      	ldr	r3, [pc, #304]	; (8003ffc <HAL_ADC_Start+0x174>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a4c      	ldr	r2, [pc, #304]	; (8004000 <HAL_ADC_Start+0x178>)
 8003ece:	fba2 2303 	umull	r2, r3, r2, r3
 8003ed2:	0c9a      	lsrs	r2, r3, #18
 8003ed4:	4613      	mov	r3, r2
 8003ed6:	005b      	lsls	r3, r3, #1
 8003ed8:	4413      	add	r3, r2
 8003eda:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003edc:	e002      	b.n	8003ee4 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	3b01      	subs	r3, #1
 8003ee2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d1f9      	bne.n	8003ede <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	f003 0301 	and.w	r3, r3, #1
 8003ef4:	2b01      	cmp	r3, #1
 8003ef6:	d179      	bne.n	8003fec <HAL_ADC_Start+0x164>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003efc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003f00:	f023 0301 	bic.w	r3, r3, #1
 8003f04:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d007      	beq.n	8003f2a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f1e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003f22:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f2e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f36:	d106      	bne.n	8003f46 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f3c:	f023 0206 	bic.w	r2, r3, #6
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	645a      	str	r2, [r3, #68]	; 0x44
 8003f44:	e002      	b.n	8003f4c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003f54:	4b2b      	ldr	r3, [pc, #172]	; (8004004 <HAL_ADC_Start+0x17c>)
 8003f56:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003f60:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	f003 031f 	and.w	r3, r3, #31
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d12a      	bne.n	8003fc4 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a25      	ldr	r2, [pc, #148]	; (8004008 <HAL_ADC_Start+0x180>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d015      	beq.n	8003fa4 <HAL_ADC_Start+0x11c>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a23      	ldr	r2, [pc, #140]	; (800400c <HAL_ADC_Start+0x184>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d105      	bne.n	8003f8e <HAL_ADC_Start+0x106>
 8003f82:	4b20      	ldr	r3, [pc, #128]	; (8004004 <HAL_ADC_Start+0x17c>)
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	f003 031f 	and.w	r3, r3, #31
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d00a      	beq.n	8003fa4 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a1f      	ldr	r2, [pc, #124]	; (8004010 <HAL_ADC_Start+0x188>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d129      	bne.n	8003fec <HAL_ADC_Start+0x164>
 8003f98:	4b1a      	ldr	r3, [pc, #104]	; (8004004 <HAL_ADC_Start+0x17c>)
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	f003 031f 	and.w	r3, r3, #31
 8003fa0:	2b0f      	cmp	r3, #15
 8003fa2:	d823      	bhi.n	8003fec <HAL_ADC_Start+0x164>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	689b      	ldr	r3, [r3, #8]
 8003faa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d11c      	bne.n	8003fec <HAL_ADC_Start+0x164>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	689a      	ldr	r2, [r3, #8]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003fc0:	609a      	str	r2, [r3, #8]
 8003fc2:	e013      	b.n	8003fec <HAL_ADC_Start+0x164>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a0f      	ldr	r2, [pc, #60]	; (8004008 <HAL_ADC_Start+0x180>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d10e      	bne.n	8003fec <HAL_ADC_Start+0x164>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	689b      	ldr	r3, [r3, #8]
 8003fd4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d107      	bne.n	8003fec <HAL_ADC_Start+0x164>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	689a      	ldr	r2, [r3, #8]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003fea:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8003fec:	2300      	movs	r3, #0
}
 8003fee:	4618      	mov	r0, r3
 8003ff0:	3714      	adds	r7, #20
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff8:	4770      	bx	lr
 8003ffa:	bf00      	nop
 8003ffc:	200000f8 	.word	0x200000f8
 8004000:	431bde83 	.word	0x431bde83
 8004004:	40012300 	.word	0x40012300
 8004008:	40012000 	.word	0x40012000
 800400c:	40012100 	.word	0x40012100
 8004010:	40012200 	.word	0x40012200

08004014 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8004014:	b480      	push	{r7}
 8004016:	b083      	sub	sp, #12
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004022:	2b01      	cmp	r3, #1
 8004024:	d101      	bne.n	800402a <HAL_ADC_Stop+0x16>
 8004026:	2302      	movs	r3, #2
 8004028:	e021      	b.n	800406e <HAL_ADC_Stop+0x5a>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2201      	movs	r2, #1
 800402e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	689a      	ldr	r2, [r3, #8]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f022 0201 	bic.w	r2, r2, #1
 8004040:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	689b      	ldr	r3, [r3, #8]
 8004048:	f003 0301 	and.w	r3, r3, #1
 800404c:	2b00      	cmp	r3, #0
 800404e:	d109      	bne.n	8004064 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004054:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004058:	f023 0301 	bic.w	r3, r3, #1
 800405c:	f043 0201 	orr.w	r2, r3, #1
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2200      	movs	r2, #0
 8004068:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800406c:	2300      	movs	r3, #0
}
 800406e:	4618      	mov	r0, r3
 8004070:	370c      	adds	r7, #12
 8004072:	46bd      	mov	sp, r7
 8004074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004078:	4770      	bx	lr

0800407a <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800407a:	b580      	push	{r7, lr}
 800407c:	b084      	sub	sp, #16
 800407e:	af00      	add	r7, sp, #0
 8004080:	6078      	str	r0, [r7, #4]
 8004082:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004084:	2300      	movs	r3, #0
 8004086:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	689b      	ldr	r3, [r3, #8]
 800408e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004092:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004096:	d113      	bne.n	80040c0 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80040a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040a6:	d10b      	bne.n	80040c0 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ac:	f043 0220 	orr.w	r2, r3, #32
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2200      	movs	r2, #0
 80040b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80040bc:	2301      	movs	r3, #1
 80040be:	e05c      	b.n	800417a <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80040c0:	f7ff fe70 	bl	8003da4 <HAL_GetTick>
 80040c4:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80040c6:	e01a      	b.n	80040fe <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040ce:	d016      	beq.n	80040fe <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d007      	beq.n	80040e6 <HAL_ADC_PollForConversion+0x6c>
 80040d6:	f7ff fe65 	bl	8003da4 <HAL_GetTick>
 80040da:	4602      	mov	r2, r0
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	1ad3      	subs	r3, r2, r3
 80040e0:	683a      	ldr	r2, [r7, #0]
 80040e2:	429a      	cmp	r2, r3
 80040e4:	d20b      	bcs.n	80040fe <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ea:	f043 0204 	orr.w	r2, r3, #4
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2200      	movs	r2, #0
 80040f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 80040fa:	2303      	movs	r3, #3
 80040fc:	e03d      	b.n	800417a <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f003 0302 	and.w	r3, r3, #2
 8004108:	2b02      	cmp	r3, #2
 800410a:	d1dd      	bne.n	80040c8 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f06f 0212 	mvn.w	r2, #18
 8004114:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800411a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800412c:	2b00      	cmp	r3, #0
 800412e:	d123      	bne.n	8004178 <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004134:	2b00      	cmp	r3, #0
 8004136:	d11f      	bne.n	8004178 <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800413e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004142:	2b00      	cmp	r3, #0
 8004144:	d006      	beq.n	8004154 <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004150:	2b00      	cmp	r3, #0
 8004152:	d111      	bne.n	8004178 <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004158:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004164:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004168:	2b00      	cmp	r3, #0
 800416a:	d105      	bne.n	8004178 <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004170:	f043 0201 	orr.w	r2, r3, #1
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8004178:	2300      	movs	r3, #0
}
 800417a:	4618      	mov	r0, r3
 800417c:	3710      	adds	r7, #16
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}

08004182 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8004182:	b480      	push	{r7}
 8004184:	b083      	sub	sp, #12
 8004186:	af00      	add	r7, sp, #0
 8004188:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8004190:	4618      	mov	r0, r3
 8004192:	370c      	adds	r7, #12
 8004194:	46bd      	mov	sp, r7
 8004196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419a:	4770      	bx	lr

0800419c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800419c:	b480      	push	{r7}
 800419e:	b085      	sub	sp, #20
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
 80041a4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80041a6:	2300      	movs	r3, #0
 80041a8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041b0:	2b01      	cmp	r3, #1
 80041b2:	d101      	bne.n	80041b8 <HAL_ADC_ConfigChannel+0x1c>
 80041b4:	2302      	movs	r3, #2
 80041b6:	e113      	b.n	80043e0 <HAL_ADC_ConfigChannel+0x244>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2201      	movs	r2, #1
 80041bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	2b09      	cmp	r3, #9
 80041c6:	d925      	bls.n	8004214 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	68d9      	ldr	r1, [r3, #12]
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	b29b      	uxth	r3, r3
 80041d4:	461a      	mov	r2, r3
 80041d6:	4613      	mov	r3, r2
 80041d8:	005b      	lsls	r3, r3, #1
 80041da:	4413      	add	r3, r2
 80041dc:	3b1e      	subs	r3, #30
 80041de:	2207      	movs	r2, #7
 80041e0:	fa02 f303 	lsl.w	r3, r2, r3
 80041e4:	43da      	mvns	r2, r3
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	400a      	ands	r2, r1
 80041ec:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	68d9      	ldr	r1, [r3, #12]
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	689a      	ldr	r2, [r3, #8]
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	b29b      	uxth	r3, r3
 80041fe:	4618      	mov	r0, r3
 8004200:	4603      	mov	r3, r0
 8004202:	005b      	lsls	r3, r3, #1
 8004204:	4403      	add	r3, r0
 8004206:	3b1e      	subs	r3, #30
 8004208:	409a      	lsls	r2, r3
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	430a      	orrs	r2, r1
 8004210:	60da      	str	r2, [r3, #12]
 8004212:	e022      	b.n	800425a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	6919      	ldr	r1, [r3, #16]
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	b29b      	uxth	r3, r3
 8004220:	461a      	mov	r2, r3
 8004222:	4613      	mov	r3, r2
 8004224:	005b      	lsls	r3, r3, #1
 8004226:	4413      	add	r3, r2
 8004228:	2207      	movs	r2, #7
 800422a:	fa02 f303 	lsl.w	r3, r2, r3
 800422e:	43da      	mvns	r2, r3
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	400a      	ands	r2, r1
 8004236:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	6919      	ldr	r1, [r3, #16]
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	689a      	ldr	r2, [r3, #8]
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	b29b      	uxth	r3, r3
 8004248:	4618      	mov	r0, r3
 800424a:	4603      	mov	r3, r0
 800424c:	005b      	lsls	r3, r3, #1
 800424e:	4403      	add	r3, r0
 8004250:	409a      	lsls	r2, r3
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	430a      	orrs	r2, r1
 8004258:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	2b06      	cmp	r3, #6
 8004260:	d824      	bhi.n	80042ac <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	685a      	ldr	r2, [r3, #4]
 800426c:	4613      	mov	r3, r2
 800426e:	009b      	lsls	r3, r3, #2
 8004270:	4413      	add	r3, r2
 8004272:	3b05      	subs	r3, #5
 8004274:	221f      	movs	r2, #31
 8004276:	fa02 f303 	lsl.w	r3, r2, r3
 800427a:	43da      	mvns	r2, r3
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	400a      	ands	r2, r1
 8004282:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	b29b      	uxth	r3, r3
 8004290:	4618      	mov	r0, r3
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	685a      	ldr	r2, [r3, #4]
 8004296:	4613      	mov	r3, r2
 8004298:	009b      	lsls	r3, r3, #2
 800429a:	4413      	add	r3, r2
 800429c:	3b05      	subs	r3, #5
 800429e:	fa00 f203 	lsl.w	r2, r0, r3
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	430a      	orrs	r2, r1
 80042a8:	635a      	str	r2, [r3, #52]	; 0x34
 80042aa:	e04c      	b.n	8004346 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	2b0c      	cmp	r3, #12
 80042b2:	d824      	bhi.n	80042fe <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	685a      	ldr	r2, [r3, #4]
 80042be:	4613      	mov	r3, r2
 80042c0:	009b      	lsls	r3, r3, #2
 80042c2:	4413      	add	r3, r2
 80042c4:	3b23      	subs	r3, #35	; 0x23
 80042c6:	221f      	movs	r2, #31
 80042c8:	fa02 f303 	lsl.w	r3, r2, r3
 80042cc:	43da      	mvns	r2, r3
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	400a      	ands	r2, r1
 80042d4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	b29b      	uxth	r3, r3
 80042e2:	4618      	mov	r0, r3
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	685a      	ldr	r2, [r3, #4]
 80042e8:	4613      	mov	r3, r2
 80042ea:	009b      	lsls	r3, r3, #2
 80042ec:	4413      	add	r3, r2
 80042ee:	3b23      	subs	r3, #35	; 0x23
 80042f0:	fa00 f203 	lsl.w	r2, r0, r3
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	430a      	orrs	r2, r1
 80042fa:	631a      	str	r2, [r3, #48]	; 0x30
 80042fc:	e023      	b.n	8004346 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	685a      	ldr	r2, [r3, #4]
 8004308:	4613      	mov	r3, r2
 800430a:	009b      	lsls	r3, r3, #2
 800430c:	4413      	add	r3, r2
 800430e:	3b41      	subs	r3, #65	; 0x41
 8004310:	221f      	movs	r2, #31
 8004312:	fa02 f303 	lsl.w	r3, r2, r3
 8004316:	43da      	mvns	r2, r3
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	400a      	ands	r2, r1
 800431e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	b29b      	uxth	r3, r3
 800432c:	4618      	mov	r0, r3
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	685a      	ldr	r2, [r3, #4]
 8004332:	4613      	mov	r3, r2
 8004334:	009b      	lsls	r3, r3, #2
 8004336:	4413      	add	r3, r2
 8004338:	3b41      	subs	r3, #65	; 0x41
 800433a:	fa00 f203 	lsl.w	r2, r0, r3
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	430a      	orrs	r2, r1
 8004344:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004346:	4b29      	ldr	r3, [pc, #164]	; (80043ec <HAL_ADC_ConfigChannel+0x250>)
 8004348:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a28      	ldr	r2, [pc, #160]	; (80043f0 <HAL_ADC_ConfigChannel+0x254>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d10f      	bne.n	8004374 <HAL_ADC_ConfigChannel+0x1d8>
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	2b12      	cmp	r3, #18
 800435a:	d10b      	bne.n	8004374 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a1d      	ldr	r2, [pc, #116]	; (80043f0 <HAL_ADC_ConfigChannel+0x254>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d12b      	bne.n	80043d6 <HAL_ADC_ConfigChannel+0x23a>
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a1c      	ldr	r2, [pc, #112]	; (80043f4 <HAL_ADC_ConfigChannel+0x258>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d003      	beq.n	8004390 <HAL_ADC_ConfigChannel+0x1f4>
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	2b11      	cmp	r3, #17
 800438e:	d122      	bne.n	80043d6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a11      	ldr	r2, [pc, #68]	; (80043f4 <HAL_ADC_ConfigChannel+0x258>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d111      	bne.n	80043d6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80043b2:	4b11      	ldr	r3, [pc, #68]	; (80043f8 <HAL_ADC_ConfigChannel+0x25c>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a11      	ldr	r2, [pc, #68]	; (80043fc <HAL_ADC_ConfigChannel+0x260>)
 80043b8:	fba2 2303 	umull	r2, r3, r2, r3
 80043bc:	0c9a      	lsrs	r2, r3, #18
 80043be:	4613      	mov	r3, r2
 80043c0:	009b      	lsls	r3, r3, #2
 80043c2:	4413      	add	r3, r2
 80043c4:	005b      	lsls	r3, r3, #1
 80043c6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80043c8:	e002      	b.n	80043d0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	3b01      	subs	r3, #1
 80043ce:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d1f9      	bne.n	80043ca <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2200      	movs	r2, #0
 80043da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80043de:	2300      	movs	r3, #0
}
 80043e0:	4618      	mov	r0, r3
 80043e2:	3714      	adds	r7, #20
 80043e4:	46bd      	mov	sp, r7
 80043e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ea:	4770      	bx	lr
 80043ec:	40012300 	.word	0x40012300
 80043f0:	40012000 	.word	0x40012000
 80043f4:	10000012 	.word	0x10000012
 80043f8:	200000f8 	.word	0x200000f8
 80043fc:	431bde83 	.word	0x431bde83

08004400 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004400:	b480      	push	{r7}
 8004402:	b085      	sub	sp, #20
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004408:	4b79      	ldr	r3, [pc, #484]	; (80045f0 <ADC_Init+0x1f0>)
 800440a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	685a      	ldr	r2, [r3, #4]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	431a      	orrs	r2, r3
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	685a      	ldr	r2, [r3, #4]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004434:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	6859      	ldr	r1, [r3, #4]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	691b      	ldr	r3, [r3, #16]
 8004440:	021a      	lsls	r2, r3, #8
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	430a      	orrs	r2, r1
 8004448:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	685a      	ldr	r2, [r3, #4]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004458:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	6859      	ldr	r1, [r3, #4]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	689a      	ldr	r2, [r3, #8]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	430a      	orrs	r2, r1
 800446a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	689a      	ldr	r2, [r3, #8]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800447a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	6899      	ldr	r1, [r3, #8]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	68da      	ldr	r2, [r3, #12]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	430a      	orrs	r2, r1
 800448c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004492:	4a58      	ldr	r2, [pc, #352]	; (80045f4 <ADC_Init+0x1f4>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d022      	beq.n	80044de <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	689a      	ldr	r2, [r3, #8]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80044a6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	6899      	ldr	r1, [r3, #8]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	430a      	orrs	r2, r1
 80044b8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	689a      	ldr	r2, [r3, #8]
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80044c8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	6899      	ldr	r1, [r3, #8]
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	430a      	orrs	r2, r1
 80044da:	609a      	str	r2, [r3, #8]
 80044dc:	e00f      	b.n	80044fe <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	689a      	ldr	r2, [r3, #8]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80044ec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	689a      	ldr	r2, [r3, #8]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80044fc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	689a      	ldr	r2, [r3, #8]
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f022 0202 	bic.w	r2, r2, #2
 800450c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	6899      	ldr	r1, [r3, #8]
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	7e1b      	ldrb	r3, [r3, #24]
 8004518:	005a      	lsls	r2, r3, #1
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	430a      	orrs	r2, r1
 8004520:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d01b      	beq.n	8004564 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	685a      	ldr	r2, [r3, #4]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800453a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	685a      	ldr	r2, [r3, #4]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800454a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	6859      	ldr	r1, [r3, #4]
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004556:	3b01      	subs	r3, #1
 8004558:	035a      	lsls	r2, r3, #13
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	430a      	orrs	r2, r1
 8004560:	605a      	str	r2, [r3, #4]
 8004562:	e007      	b.n	8004574 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	685a      	ldr	r2, [r3, #4]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004572:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004582:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	69db      	ldr	r3, [r3, #28]
 800458e:	3b01      	subs	r3, #1
 8004590:	051a      	lsls	r2, r3, #20
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	430a      	orrs	r2, r1
 8004598:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	689a      	ldr	r2, [r3, #8]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80045a8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	6899      	ldr	r1, [r3, #8]
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80045b6:	025a      	lsls	r2, r3, #9
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	430a      	orrs	r2, r1
 80045be:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	689a      	ldr	r2, [r3, #8]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045ce:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	6899      	ldr	r1, [r3, #8]
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	695b      	ldr	r3, [r3, #20]
 80045da:	029a      	lsls	r2, r3, #10
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	430a      	orrs	r2, r1
 80045e2:	609a      	str	r2, [r3, #8]
}
 80045e4:	bf00      	nop
 80045e6:	3714      	adds	r7, #20
 80045e8:	46bd      	mov	sp, r7
 80045ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ee:	4770      	bx	lr
 80045f0:	40012300 	.word	0x40012300
 80045f4:	0f000001 	.word	0x0f000001

080045f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80045f8:	b480      	push	{r7}
 80045fa:	b085      	sub	sp, #20
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	f003 0307 	and.w	r3, r3, #7
 8004606:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004608:	4b0c      	ldr	r3, [pc, #48]	; (800463c <__NVIC_SetPriorityGrouping+0x44>)
 800460a:	68db      	ldr	r3, [r3, #12]
 800460c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800460e:	68ba      	ldr	r2, [r7, #8]
 8004610:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004614:	4013      	ands	r3, r2
 8004616:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004620:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004624:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004628:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800462a:	4a04      	ldr	r2, [pc, #16]	; (800463c <__NVIC_SetPriorityGrouping+0x44>)
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	60d3      	str	r3, [r2, #12]
}
 8004630:	bf00      	nop
 8004632:	3714      	adds	r7, #20
 8004634:	46bd      	mov	sp, r7
 8004636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463a:	4770      	bx	lr
 800463c:	e000ed00 	.word	0xe000ed00

08004640 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004640:	b480      	push	{r7}
 8004642:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004644:	4b04      	ldr	r3, [pc, #16]	; (8004658 <__NVIC_GetPriorityGrouping+0x18>)
 8004646:	68db      	ldr	r3, [r3, #12]
 8004648:	0a1b      	lsrs	r3, r3, #8
 800464a:	f003 0307 	and.w	r3, r3, #7
}
 800464e:	4618      	mov	r0, r3
 8004650:	46bd      	mov	sp, r7
 8004652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004656:	4770      	bx	lr
 8004658:	e000ed00 	.word	0xe000ed00

0800465c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800465c:	b480      	push	{r7}
 800465e:	b083      	sub	sp, #12
 8004660:	af00      	add	r7, sp, #0
 8004662:	4603      	mov	r3, r0
 8004664:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004666:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800466a:	2b00      	cmp	r3, #0
 800466c:	db0b      	blt.n	8004686 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800466e:	79fb      	ldrb	r3, [r7, #7]
 8004670:	f003 021f 	and.w	r2, r3, #31
 8004674:	4907      	ldr	r1, [pc, #28]	; (8004694 <__NVIC_EnableIRQ+0x38>)
 8004676:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800467a:	095b      	lsrs	r3, r3, #5
 800467c:	2001      	movs	r0, #1
 800467e:	fa00 f202 	lsl.w	r2, r0, r2
 8004682:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004686:	bf00      	nop
 8004688:	370c      	adds	r7, #12
 800468a:	46bd      	mov	sp, r7
 800468c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004690:	4770      	bx	lr
 8004692:	bf00      	nop
 8004694:	e000e100 	.word	0xe000e100

08004698 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004698:	b480      	push	{r7}
 800469a:	b083      	sub	sp, #12
 800469c:	af00      	add	r7, sp, #0
 800469e:	4603      	mov	r3, r0
 80046a0:	6039      	str	r1, [r7, #0]
 80046a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80046a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	db0a      	blt.n	80046c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	b2da      	uxtb	r2, r3
 80046b0:	490c      	ldr	r1, [pc, #48]	; (80046e4 <__NVIC_SetPriority+0x4c>)
 80046b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046b6:	0112      	lsls	r2, r2, #4
 80046b8:	b2d2      	uxtb	r2, r2
 80046ba:	440b      	add	r3, r1
 80046bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80046c0:	e00a      	b.n	80046d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	b2da      	uxtb	r2, r3
 80046c6:	4908      	ldr	r1, [pc, #32]	; (80046e8 <__NVIC_SetPriority+0x50>)
 80046c8:	79fb      	ldrb	r3, [r7, #7]
 80046ca:	f003 030f 	and.w	r3, r3, #15
 80046ce:	3b04      	subs	r3, #4
 80046d0:	0112      	lsls	r2, r2, #4
 80046d2:	b2d2      	uxtb	r2, r2
 80046d4:	440b      	add	r3, r1
 80046d6:	761a      	strb	r2, [r3, #24]
}
 80046d8:	bf00      	nop
 80046da:	370c      	adds	r7, #12
 80046dc:	46bd      	mov	sp, r7
 80046de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e2:	4770      	bx	lr
 80046e4:	e000e100 	.word	0xe000e100
 80046e8:	e000ed00 	.word	0xe000ed00

080046ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80046ec:	b480      	push	{r7}
 80046ee:	b089      	sub	sp, #36	; 0x24
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	60f8      	str	r0, [r7, #12]
 80046f4:	60b9      	str	r1, [r7, #8]
 80046f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	f003 0307 	and.w	r3, r3, #7
 80046fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004700:	69fb      	ldr	r3, [r7, #28]
 8004702:	f1c3 0307 	rsb	r3, r3, #7
 8004706:	2b04      	cmp	r3, #4
 8004708:	bf28      	it	cs
 800470a:	2304      	movcs	r3, #4
 800470c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800470e:	69fb      	ldr	r3, [r7, #28]
 8004710:	3304      	adds	r3, #4
 8004712:	2b06      	cmp	r3, #6
 8004714:	d902      	bls.n	800471c <NVIC_EncodePriority+0x30>
 8004716:	69fb      	ldr	r3, [r7, #28]
 8004718:	3b03      	subs	r3, #3
 800471a:	e000      	b.n	800471e <NVIC_EncodePriority+0x32>
 800471c:	2300      	movs	r3, #0
 800471e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004720:	f04f 32ff 	mov.w	r2, #4294967295
 8004724:	69bb      	ldr	r3, [r7, #24]
 8004726:	fa02 f303 	lsl.w	r3, r2, r3
 800472a:	43da      	mvns	r2, r3
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	401a      	ands	r2, r3
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004734:	f04f 31ff 	mov.w	r1, #4294967295
 8004738:	697b      	ldr	r3, [r7, #20]
 800473a:	fa01 f303 	lsl.w	r3, r1, r3
 800473e:	43d9      	mvns	r1, r3
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004744:	4313      	orrs	r3, r2
         );
}
 8004746:	4618      	mov	r0, r3
 8004748:	3724      	adds	r7, #36	; 0x24
 800474a:	46bd      	mov	sp, r7
 800474c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004750:	4770      	bx	lr

08004752 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004752:	b580      	push	{r7, lr}
 8004754:	b082      	sub	sp, #8
 8004756:	af00      	add	r7, sp, #0
 8004758:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800475a:	6878      	ldr	r0, [r7, #4]
 800475c:	f7ff ff4c 	bl	80045f8 <__NVIC_SetPriorityGrouping>
}
 8004760:	bf00      	nop
 8004762:	3708      	adds	r7, #8
 8004764:	46bd      	mov	sp, r7
 8004766:	bd80      	pop	{r7, pc}

08004768 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004768:	b580      	push	{r7, lr}
 800476a:	b086      	sub	sp, #24
 800476c:	af00      	add	r7, sp, #0
 800476e:	4603      	mov	r3, r0
 8004770:	60b9      	str	r1, [r7, #8]
 8004772:	607a      	str	r2, [r7, #4]
 8004774:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004776:	2300      	movs	r3, #0
 8004778:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800477a:	f7ff ff61 	bl	8004640 <__NVIC_GetPriorityGrouping>
 800477e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004780:	687a      	ldr	r2, [r7, #4]
 8004782:	68b9      	ldr	r1, [r7, #8]
 8004784:	6978      	ldr	r0, [r7, #20]
 8004786:	f7ff ffb1 	bl	80046ec <NVIC_EncodePriority>
 800478a:	4602      	mov	r2, r0
 800478c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004790:	4611      	mov	r1, r2
 8004792:	4618      	mov	r0, r3
 8004794:	f7ff ff80 	bl	8004698 <__NVIC_SetPriority>
}
 8004798:	bf00      	nop
 800479a:	3718      	adds	r7, #24
 800479c:	46bd      	mov	sp, r7
 800479e:	bd80      	pop	{r7, pc}

080047a0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b082      	sub	sp, #8
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	4603      	mov	r3, r0
 80047a8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80047aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047ae:	4618      	mov	r0, r3
 80047b0:	f7ff ff54 	bl	800465c <__NVIC_EnableIRQ>
}
 80047b4:	bf00      	nop
 80047b6:	3708      	adds	r7, #8
 80047b8:	46bd      	mov	sp, r7
 80047ba:	bd80      	pop	{r7, pc}

080047bc <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b082      	sub	sp, #8
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d101      	bne.n	80047ce <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80047ca:	2301      	movs	r3, #1
 80047cc:	e00e      	b.n	80047ec <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	795b      	ldrb	r3, [r3, #5]
 80047d2:	b2db      	uxtb	r3, r3
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d105      	bne.n	80047e4 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2200      	movs	r2, #0
 80047dc:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80047de:	6878      	ldr	r0, [r7, #4]
 80047e0:	f7fc f84a 	bl	8000878 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2201      	movs	r2, #1
 80047e8:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80047ea:	2300      	movs	r3, #0
}
 80047ec:	4618      	mov	r0, r3
 80047ee:	3708      	adds	r7, #8
 80047f0:	46bd      	mov	sp, r7
 80047f2:	bd80      	pop	{r7, pc}

080047f4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b086      	sub	sp, #24
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80047fc:	2300      	movs	r3, #0
 80047fe:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004800:	f7ff fad0 	bl	8003da4 <HAL_GetTick>
 8004804:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d101      	bne.n	8004810 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800480c:	2301      	movs	r3, #1
 800480e:	e099      	b.n	8004944 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2200      	movs	r2, #0
 8004814:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2202      	movs	r2, #2
 800481c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	681a      	ldr	r2, [r3, #0]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f022 0201 	bic.w	r2, r2, #1
 800482e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004830:	e00f      	b.n	8004852 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004832:	f7ff fab7 	bl	8003da4 <HAL_GetTick>
 8004836:	4602      	mov	r2, r0
 8004838:	693b      	ldr	r3, [r7, #16]
 800483a:	1ad3      	subs	r3, r2, r3
 800483c:	2b05      	cmp	r3, #5
 800483e:	d908      	bls.n	8004852 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2220      	movs	r2, #32
 8004844:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2203      	movs	r2, #3
 800484a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800484e:	2303      	movs	r3, #3
 8004850:	e078      	b.n	8004944 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f003 0301 	and.w	r3, r3, #1
 800485c:	2b00      	cmp	r3, #0
 800485e:	d1e8      	bne.n	8004832 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004868:	697a      	ldr	r2, [r7, #20]
 800486a:	4b38      	ldr	r3, [pc, #224]	; (800494c <HAL_DMA_Init+0x158>)
 800486c:	4013      	ands	r3, r2
 800486e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	685a      	ldr	r2, [r3, #4]
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	689b      	ldr	r3, [r3, #8]
 8004878:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800487e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	691b      	ldr	r3, [r3, #16]
 8004884:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800488a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	699b      	ldr	r3, [r3, #24]
 8004890:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004896:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6a1b      	ldr	r3, [r3, #32]
 800489c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800489e:	697a      	ldr	r2, [r7, #20]
 80048a0:	4313      	orrs	r3, r2
 80048a2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048a8:	2b04      	cmp	r3, #4
 80048aa:	d107      	bne.n	80048bc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048b4:	4313      	orrs	r3, r2
 80048b6:	697a      	ldr	r2, [r7, #20]
 80048b8:	4313      	orrs	r3, r2
 80048ba:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	697a      	ldr	r2, [r7, #20]
 80048c2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	695b      	ldr	r3, [r3, #20]
 80048ca:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80048cc:	697b      	ldr	r3, [r7, #20]
 80048ce:	f023 0307 	bic.w	r3, r3, #7
 80048d2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048d8:	697a      	ldr	r2, [r7, #20]
 80048da:	4313      	orrs	r3, r2
 80048dc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e2:	2b04      	cmp	r3, #4
 80048e4:	d117      	bne.n	8004916 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048ea:	697a      	ldr	r2, [r7, #20]
 80048ec:	4313      	orrs	r3, r2
 80048ee:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d00e      	beq.n	8004916 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80048f8:	6878      	ldr	r0, [r7, #4]
 80048fa:	f000 f8bd 	bl	8004a78 <DMA_CheckFifoParam>
 80048fe:	4603      	mov	r3, r0
 8004900:	2b00      	cmp	r3, #0
 8004902:	d008      	beq.n	8004916 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2240      	movs	r2, #64	; 0x40
 8004908:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2201      	movs	r2, #1
 800490e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004912:	2301      	movs	r3, #1
 8004914:	e016      	b.n	8004944 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	697a      	ldr	r2, [r7, #20]
 800491c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800491e:	6878      	ldr	r0, [r7, #4]
 8004920:	f000 f874 	bl	8004a0c <DMA_CalcBaseAndBitshift>
 8004924:	4603      	mov	r3, r0
 8004926:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800492c:	223f      	movs	r2, #63	; 0x3f
 800492e:	409a      	lsls	r2, r3
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2200      	movs	r2, #0
 8004938:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2201      	movs	r2, #1
 800493e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004942:	2300      	movs	r3, #0
}
 8004944:	4618      	mov	r0, r3
 8004946:	3718      	adds	r7, #24
 8004948:	46bd      	mov	sp, r7
 800494a:	bd80      	pop	{r7, pc}
 800494c:	f010803f 	.word	0xf010803f

08004950 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b084      	sub	sp, #16
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d101      	bne.n	8004962 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800495e:	2301      	movs	r3, #1
 8004960:	e050      	b.n	8004a04 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004968:	b2db      	uxtb	r3, r3
 800496a:	2b02      	cmp	r3, #2
 800496c:	d101      	bne.n	8004972 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800496e:	2302      	movs	r3, #2
 8004970:	e048      	b.n	8004a04 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	681a      	ldr	r2, [r3, #0]
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f022 0201 	bic.w	r2, r2, #1
 8004980:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	2200      	movs	r2, #0
 8004988:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	2200      	movs	r2, #0
 8004990:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	2200      	movs	r2, #0
 8004998:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	2200      	movs	r2, #0
 80049a0:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	2200      	movs	r2, #0
 80049a8:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	2221      	movs	r2, #33	; 0x21
 80049b0:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80049b2:	6878      	ldr	r0, [r7, #4]
 80049b4:	f000 f82a 	bl	8004a0c <DMA_CalcBaseAndBitshift>
 80049b8:	4603      	mov	r3, r0
 80049ba:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2200      	movs	r2, #0
 80049c0:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2200      	movs	r2, #0
 80049c6:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2200      	movs	r2, #0
 80049cc:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2200      	movs	r2, #0
 80049d2:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2200      	movs	r2, #0
 80049d8:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2200      	movs	r2, #0
 80049de:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049e4:	223f      	movs	r2, #63	; 0x3f
 80049e6:	409a      	lsls	r2, r3
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2200      	movs	r2, #0
 80049f0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2200      	movs	r2, #0
 80049f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2200      	movs	r2, #0
 80049fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004a02:	2300      	movs	r3, #0
}
 8004a04:	4618      	mov	r0, r3
 8004a06:	3710      	adds	r7, #16
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bd80      	pop	{r7, pc}

08004a0c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b085      	sub	sp, #20
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	b2db      	uxtb	r3, r3
 8004a1a:	3b10      	subs	r3, #16
 8004a1c:	4a14      	ldr	r2, [pc, #80]	; (8004a70 <DMA_CalcBaseAndBitshift+0x64>)
 8004a1e:	fba2 2303 	umull	r2, r3, r2, r3
 8004a22:	091b      	lsrs	r3, r3, #4
 8004a24:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004a26:	4a13      	ldr	r2, [pc, #76]	; (8004a74 <DMA_CalcBaseAndBitshift+0x68>)
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	4413      	add	r3, r2
 8004a2c:	781b      	ldrb	r3, [r3, #0]
 8004a2e:	461a      	mov	r2, r3
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	2b03      	cmp	r3, #3
 8004a38:	d909      	bls.n	8004a4e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004a42:	f023 0303 	bic.w	r3, r3, #3
 8004a46:	1d1a      	adds	r2, r3, #4
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	659a      	str	r2, [r3, #88]	; 0x58
 8004a4c:	e007      	b.n	8004a5e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004a56:	f023 0303 	bic.w	r3, r3, #3
 8004a5a:	687a      	ldr	r2, [r7, #4]
 8004a5c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004a62:	4618      	mov	r0, r3
 8004a64:	3714      	adds	r7, #20
 8004a66:	46bd      	mov	sp, r7
 8004a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6c:	4770      	bx	lr
 8004a6e:	bf00      	nop
 8004a70:	aaaaaaab 	.word	0xaaaaaaab
 8004a74:	0800cf9c 	.word	0x0800cf9c

08004a78 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b085      	sub	sp, #20
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a80:	2300      	movs	r3, #0
 8004a82:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a88:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	699b      	ldr	r3, [r3, #24]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d11f      	bne.n	8004ad2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004a92:	68bb      	ldr	r3, [r7, #8]
 8004a94:	2b03      	cmp	r3, #3
 8004a96:	d855      	bhi.n	8004b44 <DMA_CheckFifoParam+0xcc>
 8004a98:	a201      	add	r2, pc, #4	; (adr r2, 8004aa0 <DMA_CheckFifoParam+0x28>)
 8004a9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a9e:	bf00      	nop
 8004aa0:	08004ab1 	.word	0x08004ab1
 8004aa4:	08004ac3 	.word	0x08004ac3
 8004aa8:	08004ab1 	.word	0x08004ab1
 8004aac:	08004b45 	.word	0x08004b45
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ab4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d045      	beq.n	8004b48 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8004abc:	2301      	movs	r3, #1
 8004abe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ac0:	e042      	b.n	8004b48 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ac6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004aca:	d13f      	bne.n	8004b4c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8004acc:	2301      	movs	r3, #1
 8004ace:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ad0:	e03c      	b.n	8004b4c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	699b      	ldr	r3, [r3, #24]
 8004ad6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ada:	d121      	bne.n	8004b20 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	2b03      	cmp	r3, #3
 8004ae0:	d836      	bhi.n	8004b50 <DMA_CheckFifoParam+0xd8>
 8004ae2:	a201      	add	r2, pc, #4	; (adr r2, 8004ae8 <DMA_CheckFifoParam+0x70>)
 8004ae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ae8:	08004af9 	.word	0x08004af9
 8004aec:	08004aff 	.word	0x08004aff
 8004af0:	08004af9 	.word	0x08004af9
 8004af4:	08004b11 	.word	0x08004b11
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004af8:	2301      	movs	r3, #1
 8004afa:	73fb      	strb	r3, [r7, #15]
      break;
 8004afc:	e02f      	b.n	8004b5e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b02:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d024      	beq.n	8004b54 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b0e:	e021      	b.n	8004b54 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b14:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004b18:	d11e      	bne.n	8004b58 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004b1e:	e01b      	b.n	8004b58 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	2b02      	cmp	r3, #2
 8004b24:	d902      	bls.n	8004b2c <DMA_CheckFifoParam+0xb4>
 8004b26:	2b03      	cmp	r3, #3
 8004b28:	d003      	beq.n	8004b32 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004b2a:	e018      	b.n	8004b5e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	73fb      	strb	r3, [r7, #15]
      break;
 8004b30:	e015      	b.n	8004b5e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b36:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d00e      	beq.n	8004b5c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8004b3e:	2301      	movs	r3, #1
 8004b40:	73fb      	strb	r3, [r7, #15]
      break;
 8004b42:	e00b      	b.n	8004b5c <DMA_CheckFifoParam+0xe4>
      break;
 8004b44:	bf00      	nop
 8004b46:	e00a      	b.n	8004b5e <DMA_CheckFifoParam+0xe6>
      break;
 8004b48:	bf00      	nop
 8004b4a:	e008      	b.n	8004b5e <DMA_CheckFifoParam+0xe6>
      break;
 8004b4c:	bf00      	nop
 8004b4e:	e006      	b.n	8004b5e <DMA_CheckFifoParam+0xe6>
      break;
 8004b50:	bf00      	nop
 8004b52:	e004      	b.n	8004b5e <DMA_CheckFifoParam+0xe6>
      break;
 8004b54:	bf00      	nop
 8004b56:	e002      	b.n	8004b5e <DMA_CheckFifoParam+0xe6>
      break;   
 8004b58:	bf00      	nop
 8004b5a:	e000      	b.n	8004b5e <DMA_CheckFifoParam+0xe6>
      break;
 8004b5c:	bf00      	nop
    }
  } 
  
  return status; 
 8004b5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b60:	4618      	mov	r0, r3
 8004b62:	3714      	adds	r7, #20
 8004b64:	46bd      	mov	sp, r7
 8004b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6a:	4770      	bx	lr

08004b6c <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b082      	sub	sp, #8
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d101      	bne.n	8004b7e <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	e03b      	b.n	8004bf6 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004b84:	b2db      	uxtb	r3, r3
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d106      	bne.n	8004b98 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8004b92:	6878      	ldr	r0, [r7, #4]
 8004b94:	f7fb fec4 	bl	8000920 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2202      	movs	r2, #2
 8004b9c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	685a      	ldr	r2, [r3, #4]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	430a      	orrs	r2, r1
 8004bb4:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bbc:	f023 0107 	bic.w	r1, r3, #7
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	689a      	ldr	r2, [r3, #8]
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	430a      	orrs	r2, r1
 8004bca:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bd2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004bd6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004bda:	687a      	ldr	r2, [r7, #4]
 8004bdc:	68d1      	ldr	r1, [r2, #12]
 8004bde:	687a      	ldr	r2, [r7, #4]
 8004be0:	6812      	ldr	r2, [r2, #0]
 8004be2:	430b      	orrs	r3, r1
 8004be4:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2200      	movs	r2, #0
 8004bea:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2201      	movs	r2, #1
 8004bf0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8004bf4:	2300      	movs	r3, #0
}
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	3708      	adds	r7, #8
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bd80      	pop	{r7, pc}

08004bfe <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8004bfe:	b580      	push	{r7, lr}
 8004c00:	b086      	sub	sp, #24
 8004c02:	af02      	add	r7, sp, #8
 8004c04:	60f8      	str	r0, [r7, #12]
 8004c06:	60b9      	str	r1, [r7, #8]
 8004c08:	607a      	str	r2, [r7, #4]
 8004c0a:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004c12:	2b01      	cmp	r3, #1
 8004c14:	d101      	bne.n	8004c1a <HAL_DMA2D_Start+0x1c>
 8004c16:	2302      	movs	r3, #2
 8004c18:	e018      	b.n	8004c4c <HAL_DMA2D_Start+0x4e>
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	2201      	movs	r2, #1
 8004c1e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	2202      	movs	r2, #2
 8004c26:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8004c2a:	69bb      	ldr	r3, [r7, #24]
 8004c2c:	9300      	str	r3, [sp, #0]
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	687a      	ldr	r2, [r7, #4]
 8004c32:	68b9      	ldr	r1, [r7, #8]
 8004c34:	68f8      	ldr	r0, [r7, #12]
 8004c36:	f000 fa99 	bl	800516c <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	681a      	ldr	r2, [r3, #0]
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f042 0201 	orr.w	r2, r2, #1
 8004c48:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8004c4a:	2300      	movs	r3, #0
}
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	3710      	adds	r7, #16
 8004c50:	46bd      	mov	sp, r7
 8004c52:	bd80      	pop	{r7, pc}

08004c54 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b086      	sub	sp, #24
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
 8004c5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8004c5e:	2300      	movs	r3, #0
 8004c60:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f003 0301 	and.w	r3, r3, #1
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d056      	beq.n	8004d1e <HAL_DMA2D_PollForTransfer+0xca>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 8004c70:	f7ff f898 	bl	8003da4 <HAL_GetTick>
 8004c74:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8004c76:	e04b      	b.n	8004d10 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d023      	beq.n	8004cd2 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	f003 0320 	and.w	r3, r3, #32
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d005      	beq.n	8004ca0 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c98:	f043 0202 	orr.w	r2, r3, #2
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	f003 0301 	and.w	r3, r3, #1
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d005      	beq.n	8004cb6 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cae:	f043 0201 	orr.w	r2, r3, #1
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	2221      	movs	r2, #33	; 0x21
 8004cbc:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2204      	movs	r2, #4
 8004cc2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	e0a5      	b.n	8004e1e <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cd8:	d01a      	beq.n	8004d10 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8004cda:	f7ff f863 	bl	8003da4 <HAL_GetTick>
 8004cde:	4602      	mov	r2, r0
 8004ce0:	697b      	ldr	r3, [r7, #20]
 8004ce2:	1ad3      	subs	r3, r2, r3
 8004ce4:	683a      	ldr	r2, [r7, #0]
 8004ce6:	429a      	cmp	r2, r3
 8004ce8:	d302      	bcc.n	8004cf0 <HAL_DMA2D_PollForTransfer+0x9c>
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d10f      	bne.n	8004d10 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cf4:	f043 0220 	orr.w	r2, r3, #32
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2203      	movs	r2, #3
 8004d00:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2200      	movs	r2, #0
 8004d08:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8004d0c:	2303      	movs	r3, #3
 8004d0e:	e086      	b.n	8004e1e <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	685b      	ldr	r3, [r3, #4]
 8004d16:	f003 0302 	and.w	r3, r3, #2
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d0ac      	beq.n	8004c78 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	69db      	ldr	r3, [r3, #28]
 8004d24:	f003 0320 	and.w	r3, r3, #32
 8004d28:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d30:	f003 0320 	and.w	r3, r3, #32
 8004d34:	693a      	ldr	r2, [r7, #16]
 8004d36:	4313      	orrs	r3, r2
 8004d38:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8004d3a:	693b      	ldr	r3, [r7, #16]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d061      	beq.n	8004e04 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8004d40:	f7ff f830 	bl	8003da4 <HAL_GetTick>
 8004d44:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8004d46:	e056      	b.n	8004df6 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	685b      	ldr	r3, [r3, #4]
 8004d4e:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d02e      	beq.n	8004db8 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	f003 0308 	and.w	r3, r3, #8
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d005      	beq.n	8004d70 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d68:	f043 0204 	orr.w	r2, r3, #4
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	f003 0320 	and.w	r3, r3, #32
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d005      	beq.n	8004d86 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d7e:	f043 0202 	orr.w	r2, r3, #2
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	f003 0301 	and.w	r3, r3, #1
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d005      	beq.n	8004d9c <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d94:	f043 0201 	orr.w	r2, r3, #1
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	2229      	movs	r2, #41	; 0x29
 8004da2:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2204      	movs	r2, #4
 8004da8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2200      	movs	r2, #0
 8004db0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8004db4:	2301      	movs	r3, #1
 8004db6:	e032      	b.n	8004e1e <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dbe:	d01a      	beq.n	8004df6 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8004dc0:	f7fe fff0 	bl	8003da4 <HAL_GetTick>
 8004dc4:	4602      	mov	r2, r0
 8004dc6:	697b      	ldr	r3, [r7, #20]
 8004dc8:	1ad3      	subs	r3, r2, r3
 8004dca:	683a      	ldr	r2, [r7, #0]
 8004dcc:	429a      	cmp	r2, r3
 8004dce:	d302      	bcc.n	8004dd6 <HAL_DMA2D_PollForTransfer+0x182>
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d10f      	bne.n	8004df6 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dda:	f043 0220 	orr.w	r2, r3, #32
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2203      	movs	r2, #3
 8004de6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2200      	movs	r2, #0
 8004dee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8004df2:	2303      	movs	r3, #3
 8004df4:	e013      	b.n	8004e1e <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	f003 0310 	and.w	r3, r3, #16
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d0a1      	beq.n	8004d48 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	2212      	movs	r2, #18
 8004e0a:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2201      	movs	r2, #1
 8004e10:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2200      	movs	r2, #0
 8004e18:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8004e1c:	2300      	movs	r3, #0
}
 8004e1e:	4618      	mov	r0, r3
 8004e20:	3718      	adds	r7, #24
 8004e22:	46bd      	mov	sp, r7
 8004e24:	bd80      	pop	{r7, pc}

08004e26 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8004e26:	b580      	push	{r7, lr}
 8004e28:	b084      	sub	sp, #16
 8004e2a:	af00      	add	r7, sp, #0
 8004e2c:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	685b      	ldr	r3, [r3, #4]
 8004e34:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	f003 0301 	and.w	r3, r3, #1
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d026      	beq.n	8004e96 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d021      	beq.n	8004e96 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	681a      	ldr	r2, [r3, #0]
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004e60:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e66:	f043 0201 	orr.w	r2, r3, #1
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	2201      	movs	r2, #1
 8004e74:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2204      	movs	r2, #4
 8004e7a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2200      	movs	r2, #0
 8004e82:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	695b      	ldr	r3, [r3, #20]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d003      	beq.n	8004e96 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	695b      	ldr	r3, [r3, #20]
 8004e92:	6878      	ldr	r0, [r7, #4]
 8004e94:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	f003 0320 	and.w	r3, r3, #32
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d026      	beq.n	8004eee <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8004ea0:	68bb      	ldr	r3, [r7, #8]
 8004ea2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d021      	beq.n	8004eee <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	681a      	ldr	r2, [r3, #0]
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004eb8:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	2220      	movs	r2, #32
 8004ec0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ec6:	f043 0202 	orr.w	r2, r3, #2
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2204      	movs	r2, #4
 8004ed2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2200      	movs	r2, #0
 8004eda:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	695b      	ldr	r3, [r3, #20]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d003      	beq.n	8004eee <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	695b      	ldr	r3, [r3, #20]
 8004eea:	6878      	ldr	r0, [r7, #4]
 8004eec:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	f003 0308 	and.w	r3, r3, #8
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d026      	beq.n	8004f46 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8004ef8:	68bb      	ldr	r3, [r7, #8]
 8004efa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d021      	beq.n	8004f46 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	681a      	ldr	r2, [r3, #0]
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f10:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	2208      	movs	r2, #8
 8004f18:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f1e:	f043 0204 	orr.w	r2, r3, #4
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2204      	movs	r2, #4
 8004f2a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2200      	movs	r2, #0
 8004f32:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	695b      	ldr	r3, [r3, #20]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d003      	beq.n	8004f46 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	695b      	ldr	r3, [r3, #20]
 8004f42:	6878      	ldr	r0, [r7, #4]
 8004f44:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	f003 0304 	and.w	r3, r3, #4
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d013      	beq.n	8004f78 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d00e      	beq.n	8004f78 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	681a      	ldr	r2, [r3, #0]
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f68:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	2204      	movs	r2, #4
 8004f70:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8004f72:	6878      	ldr	r0, [r7, #4]
 8004f74:	f000 f853 	bl	800501e <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	f003 0302 	and.w	r3, r3, #2
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d024      	beq.n	8004fcc <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8004f82:	68bb      	ldr	r3, [r7, #8]
 8004f84:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d01f      	beq.n	8004fcc <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	681a      	ldr	r2, [r3, #0]
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004f9a:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	2202      	movs	r2, #2
 8004fa2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2201      	movs	r2, #1
 8004fb0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferCpltCallback != NULL)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	691b      	ldr	r3, [r3, #16]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d003      	beq.n	8004fcc <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	691b      	ldr	r3, [r3, #16]
 8004fc8:	6878      	ldr	r0, [r7, #4]
 8004fca:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	f003 0310 	and.w	r3, r3, #16
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d01f      	beq.n	8005016 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8004fd6:	68bb      	ldr	r3, [r7, #8]
 8004fd8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d01a      	beq.n	8005016 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	681a      	ldr	r2, [r3, #0]
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004fee:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	2210      	movs	r2, #16
 8004ff6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2201      	movs	r2, #1
 8005004:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2200      	movs	r2, #0
 800500c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8005010:	6878      	ldr	r0, [r7, #4]
 8005012:	f000 f80e 	bl	8005032 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8005016:	bf00      	nop
 8005018:	3710      	adds	r7, #16
 800501a:	46bd      	mov	sp, r7
 800501c:	bd80      	pop	{r7, pc}

0800501e <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800501e:	b480      	push	{r7}
 8005020:	b083      	sub	sp, #12
 8005022:	af00      	add	r7, sp, #0
 8005024:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8005026:	bf00      	nop
 8005028:	370c      	adds	r7, #12
 800502a:	46bd      	mov	sp, r7
 800502c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005030:	4770      	bx	lr

08005032 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8005032:	b480      	push	{r7}
 8005034:	b083      	sub	sp, #12
 8005036:	af00      	add	r7, sp, #0
 8005038:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 800503a:	bf00      	nop
 800503c:	370c      	adds	r7, #12
 800503e:	46bd      	mov	sp, r7
 8005040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005044:	4770      	bx	lr
	...

08005048 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8005048:	b480      	push	{r7}
 800504a:	b087      	sub	sp, #28
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
 8005050:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	685b      	ldr	r3, [r3, #4]
 8005056:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005060:	2b01      	cmp	r3, #1
 8005062:	d101      	bne.n	8005068 <HAL_DMA2D_ConfigLayer+0x20>
 8005064:	2302      	movs	r3, #2
 8005066:	e079      	b.n	800515c <HAL_DMA2D_ConfigLayer+0x114>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2201      	movs	r2, #1
 800506c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2202      	movs	r2, #2
 8005074:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	011b      	lsls	r3, r3, #4
 800507c:	3318      	adds	r3, #24
 800507e:	687a      	ldr	r2, [r7, #4]
 8005080:	4413      	add	r3, r2
 8005082:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8005084:	693b      	ldr	r3, [r7, #16]
 8005086:	685a      	ldr	r2, [r3, #4]
 8005088:	693b      	ldr	r3, [r7, #16]
 800508a:	689b      	ldr	r3, [r3, #8]
 800508c:	041b      	lsls	r3, r3, #16
 800508e:	4313      	orrs	r3, r2
 8005090:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8005092:	4b35      	ldr	r3, [pc, #212]	; (8005168 <HAL_DMA2D_ConfigLayer+0x120>)
 8005094:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005096:	693b      	ldr	r3, [r7, #16]
 8005098:	685b      	ldr	r3, [r3, #4]
 800509a:	2b0a      	cmp	r3, #10
 800509c:	d003      	beq.n	80050a6 <HAL_DMA2D_ConfigLayer+0x5e>
 800509e:	693b      	ldr	r3, [r7, #16]
 80050a0:	685b      	ldr	r3, [r3, #4]
 80050a2:	2b09      	cmp	r3, #9
 80050a4:	d107      	bne.n	80050b6 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80050a6:	693b      	ldr	r3, [r7, #16]
 80050a8:	68db      	ldr	r3, [r3, #12]
 80050aa:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80050ae:	697a      	ldr	r2, [r7, #20]
 80050b0:	4313      	orrs	r3, r2
 80050b2:	617b      	str	r3, [r7, #20]
 80050b4:	e005      	b.n	80050c2 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80050b6:	693b      	ldr	r3, [r7, #16]
 80050b8:	68db      	ldr	r3, [r3, #12]
 80050ba:	061b      	lsls	r3, r3, #24
 80050bc:	697a      	ldr	r2, [r7, #20]
 80050be:	4313      	orrs	r3, r2
 80050c0:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d120      	bne.n	800510a <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	43db      	mvns	r3, r3
 80050d2:	ea02 0103 	and.w	r1, r2, r3
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	697a      	ldr	r2, [r7, #20]
 80050dc:	430a      	orrs	r2, r1
 80050de:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	693a      	ldr	r2, [r7, #16]
 80050e6:	6812      	ldr	r2, [r2, #0]
 80050e8:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80050ea:	693b      	ldr	r3, [r7, #16]
 80050ec:	685b      	ldr	r3, [r3, #4]
 80050ee:	2b0a      	cmp	r3, #10
 80050f0:	d003      	beq.n	80050fa <HAL_DMA2D_ConfigLayer+0xb2>
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	685b      	ldr	r3, [r3, #4]
 80050f6:	2b09      	cmp	r3, #9
 80050f8:	d127      	bne.n	800514a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 80050fa:	693b      	ldr	r3, [r7, #16]
 80050fc:	68da      	ldr	r2, [r3, #12]
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8005106:	629a      	str	r2, [r3, #40]	; 0x28
 8005108:	e01f      	b.n	800514a <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	69da      	ldr	r2, [r3, #28]
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	43db      	mvns	r3, r3
 8005114:	ea02 0103 	and.w	r1, r2, r3
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	697a      	ldr	r2, [r7, #20]
 800511e:	430a      	orrs	r2, r1
 8005120:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	693a      	ldr	r2, [r7, #16]
 8005128:	6812      	ldr	r2, [r2, #0]
 800512a:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800512c:	693b      	ldr	r3, [r7, #16]
 800512e:	685b      	ldr	r3, [r3, #4]
 8005130:	2b0a      	cmp	r3, #10
 8005132:	d003      	beq.n	800513c <HAL_DMA2D_ConfigLayer+0xf4>
 8005134:	693b      	ldr	r3, [r7, #16]
 8005136:	685b      	ldr	r3, [r3, #4]
 8005138:	2b09      	cmp	r3, #9
 800513a:	d106      	bne.n	800514a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 800513c:	693b      	ldr	r3, [r7, #16]
 800513e:	68da      	ldr	r2, [r3, #12]
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8005148:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2201      	movs	r2, #1
 800514e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2200      	movs	r2, #0
 8005156:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800515a:	2300      	movs	r3, #0
}
 800515c:	4618      	mov	r0, r3
 800515e:	371c      	adds	r7, #28
 8005160:	46bd      	mov	sp, r7
 8005162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005166:	4770      	bx	lr
 8005168:	ff03000f 	.word	0xff03000f

0800516c <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 800516c:	b480      	push	{r7}
 800516e:	b08b      	sub	sp, #44	; 0x2c
 8005170:	af00      	add	r7, sp, #0
 8005172:	60f8      	str	r0, [r7, #12]
 8005174:	60b9      	str	r1, [r7, #8]
 8005176:	607a      	str	r2, [r7, #4]
 8005178:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005180:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	041a      	lsls	r2, r3, #16
 8005188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800518a:	431a      	orrs	r2, r3
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	430a      	orrs	r2, r1
 8005192:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	687a      	ldr	r2, [r7, #4]
 800519a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	685b      	ldr	r3, [r3, #4]
 80051a0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80051a4:	d174      	bne.n	8005290 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 80051a6:	68bb      	ldr	r3, [r7, #8]
 80051a8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80051ac:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 80051ae:	68bb      	ldr	r3, [r7, #8]
 80051b0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80051b4:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 80051b6:	68bb      	ldr	r3, [r7, #8]
 80051b8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80051bc:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	b2db      	uxtb	r3, r3
 80051c2:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	689b      	ldr	r3, [r3, #8]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d108      	bne.n	80051de <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 80051cc:	69ba      	ldr	r2, [r7, #24]
 80051ce:	69fb      	ldr	r3, [r7, #28]
 80051d0:	431a      	orrs	r2, r3
 80051d2:	6a3b      	ldr	r3, [r7, #32]
 80051d4:	4313      	orrs	r3, r2
 80051d6:	697a      	ldr	r2, [r7, #20]
 80051d8:	4313      	orrs	r3, r2
 80051da:	627b      	str	r3, [r7, #36]	; 0x24
 80051dc:	e053      	b.n	8005286 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	689b      	ldr	r3, [r3, #8]
 80051e2:	2b01      	cmp	r3, #1
 80051e4:	d106      	bne.n	80051f4 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 80051e6:	69ba      	ldr	r2, [r7, #24]
 80051e8:	69fb      	ldr	r3, [r7, #28]
 80051ea:	4313      	orrs	r3, r2
 80051ec:	697a      	ldr	r2, [r7, #20]
 80051ee:	4313      	orrs	r3, r2
 80051f0:	627b      	str	r3, [r7, #36]	; 0x24
 80051f2:	e048      	b.n	8005286 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	689b      	ldr	r3, [r3, #8]
 80051f8:	2b02      	cmp	r3, #2
 80051fa:	d111      	bne.n	8005220 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 80051fc:	69fb      	ldr	r3, [r7, #28]
 80051fe:	0cdb      	lsrs	r3, r3, #19
 8005200:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8005202:	69bb      	ldr	r3, [r7, #24]
 8005204:	0a9b      	lsrs	r3, r3, #10
 8005206:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8005208:	697b      	ldr	r3, [r7, #20]
 800520a:	08db      	lsrs	r3, r3, #3
 800520c:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 800520e:	69bb      	ldr	r3, [r7, #24]
 8005210:	015a      	lsls	r2, r3, #5
 8005212:	69fb      	ldr	r3, [r7, #28]
 8005214:	02db      	lsls	r3, r3, #11
 8005216:	4313      	orrs	r3, r2
 8005218:	697a      	ldr	r2, [r7, #20]
 800521a:	4313      	orrs	r3, r2
 800521c:	627b      	str	r3, [r7, #36]	; 0x24
 800521e:	e032      	b.n	8005286 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	689b      	ldr	r3, [r3, #8]
 8005224:	2b03      	cmp	r3, #3
 8005226:	d117      	bne.n	8005258 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8005228:	6a3b      	ldr	r3, [r7, #32]
 800522a:	0fdb      	lsrs	r3, r3, #31
 800522c:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 800522e:	69fb      	ldr	r3, [r7, #28]
 8005230:	0cdb      	lsrs	r3, r3, #19
 8005232:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8005234:	69bb      	ldr	r3, [r7, #24]
 8005236:	0adb      	lsrs	r3, r3, #11
 8005238:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 800523a:	697b      	ldr	r3, [r7, #20]
 800523c:	08db      	lsrs	r3, r3, #3
 800523e:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8005240:	69bb      	ldr	r3, [r7, #24]
 8005242:	015a      	lsls	r2, r3, #5
 8005244:	69fb      	ldr	r3, [r7, #28]
 8005246:	029b      	lsls	r3, r3, #10
 8005248:	431a      	orrs	r2, r3
 800524a:	6a3b      	ldr	r3, [r7, #32]
 800524c:	03db      	lsls	r3, r3, #15
 800524e:	4313      	orrs	r3, r2
 8005250:	697a      	ldr	r2, [r7, #20]
 8005252:	4313      	orrs	r3, r2
 8005254:	627b      	str	r3, [r7, #36]	; 0x24
 8005256:	e016      	b.n	8005286 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8005258:	6a3b      	ldr	r3, [r7, #32]
 800525a:	0f1b      	lsrs	r3, r3, #28
 800525c:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 800525e:	69fb      	ldr	r3, [r7, #28]
 8005260:	0d1b      	lsrs	r3, r3, #20
 8005262:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8005264:	69bb      	ldr	r3, [r7, #24]
 8005266:	0b1b      	lsrs	r3, r3, #12
 8005268:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 800526a:	697b      	ldr	r3, [r7, #20]
 800526c:	091b      	lsrs	r3, r3, #4
 800526e:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8005270:	69bb      	ldr	r3, [r7, #24]
 8005272:	011a      	lsls	r2, r3, #4
 8005274:	69fb      	ldr	r3, [r7, #28]
 8005276:	021b      	lsls	r3, r3, #8
 8005278:	431a      	orrs	r2, r3
 800527a:	6a3b      	ldr	r3, [r7, #32]
 800527c:	031b      	lsls	r3, r3, #12
 800527e:	4313      	orrs	r3, r2
 8005280:	697a      	ldr	r2, [r7, #20]
 8005282:	4313      	orrs	r3, r2
 8005284:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800528c:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 800528e:	e003      	b.n	8005298 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	68ba      	ldr	r2, [r7, #8]
 8005296:	60da      	str	r2, [r3, #12]
}
 8005298:	bf00      	nop
 800529a:	372c      	adds	r7, #44	; 0x2c
 800529c:	46bd      	mov	sp, r7
 800529e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a2:	4770      	bx	lr

080052a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80052a4:	b480      	push	{r7}
 80052a6:	b089      	sub	sp, #36	; 0x24
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
 80052ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80052ae:	2300      	movs	r3, #0
 80052b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80052b2:	2300      	movs	r3, #0
 80052b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80052b6:	2300      	movs	r3, #0
 80052b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80052ba:	2300      	movs	r3, #0
 80052bc:	61fb      	str	r3, [r7, #28]
 80052be:	e177      	b.n	80055b0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80052c0:	2201      	movs	r2, #1
 80052c2:	69fb      	ldr	r3, [r7, #28]
 80052c4:	fa02 f303 	lsl.w	r3, r2, r3
 80052c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	697a      	ldr	r2, [r7, #20]
 80052d0:	4013      	ands	r3, r2
 80052d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80052d4:	693a      	ldr	r2, [r7, #16]
 80052d6:	697b      	ldr	r3, [r7, #20]
 80052d8:	429a      	cmp	r2, r3
 80052da:	f040 8166 	bne.w	80055aa <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	685b      	ldr	r3, [r3, #4]
 80052e2:	2b01      	cmp	r3, #1
 80052e4:	d00b      	beq.n	80052fe <HAL_GPIO_Init+0x5a>
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	685b      	ldr	r3, [r3, #4]
 80052ea:	2b02      	cmp	r3, #2
 80052ec:	d007      	beq.n	80052fe <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80052f2:	2b11      	cmp	r3, #17
 80052f4:	d003      	beq.n	80052fe <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	685b      	ldr	r3, [r3, #4]
 80052fa:	2b12      	cmp	r3, #18
 80052fc:	d130      	bne.n	8005360 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	689b      	ldr	r3, [r3, #8]
 8005302:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005304:	69fb      	ldr	r3, [r7, #28]
 8005306:	005b      	lsls	r3, r3, #1
 8005308:	2203      	movs	r2, #3
 800530a:	fa02 f303 	lsl.w	r3, r2, r3
 800530e:	43db      	mvns	r3, r3
 8005310:	69ba      	ldr	r2, [r7, #24]
 8005312:	4013      	ands	r3, r2
 8005314:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	68da      	ldr	r2, [r3, #12]
 800531a:	69fb      	ldr	r3, [r7, #28]
 800531c:	005b      	lsls	r3, r3, #1
 800531e:	fa02 f303 	lsl.w	r3, r2, r3
 8005322:	69ba      	ldr	r2, [r7, #24]
 8005324:	4313      	orrs	r3, r2
 8005326:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	69ba      	ldr	r2, [r7, #24]
 800532c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	685b      	ldr	r3, [r3, #4]
 8005332:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005334:	2201      	movs	r2, #1
 8005336:	69fb      	ldr	r3, [r7, #28]
 8005338:	fa02 f303 	lsl.w	r3, r2, r3
 800533c:	43db      	mvns	r3, r3
 800533e:	69ba      	ldr	r2, [r7, #24]
 8005340:	4013      	ands	r3, r2
 8005342:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	685b      	ldr	r3, [r3, #4]
 8005348:	091b      	lsrs	r3, r3, #4
 800534a:	f003 0201 	and.w	r2, r3, #1
 800534e:	69fb      	ldr	r3, [r7, #28]
 8005350:	fa02 f303 	lsl.w	r3, r2, r3
 8005354:	69ba      	ldr	r2, [r7, #24]
 8005356:	4313      	orrs	r3, r2
 8005358:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	69ba      	ldr	r2, [r7, #24]
 800535e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	68db      	ldr	r3, [r3, #12]
 8005364:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005366:	69fb      	ldr	r3, [r7, #28]
 8005368:	005b      	lsls	r3, r3, #1
 800536a:	2203      	movs	r2, #3
 800536c:	fa02 f303 	lsl.w	r3, r2, r3
 8005370:	43db      	mvns	r3, r3
 8005372:	69ba      	ldr	r2, [r7, #24]
 8005374:	4013      	ands	r3, r2
 8005376:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	689a      	ldr	r2, [r3, #8]
 800537c:	69fb      	ldr	r3, [r7, #28]
 800537e:	005b      	lsls	r3, r3, #1
 8005380:	fa02 f303 	lsl.w	r3, r2, r3
 8005384:	69ba      	ldr	r2, [r7, #24]
 8005386:	4313      	orrs	r3, r2
 8005388:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	69ba      	ldr	r2, [r7, #24]
 800538e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	685b      	ldr	r3, [r3, #4]
 8005394:	2b02      	cmp	r3, #2
 8005396:	d003      	beq.n	80053a0 <HAL_GPIO_Init+0xfc>
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	685b      	ldr	r3, [r3, #4]
 800539c:	2b12      	cmp	r3, #18
 800539e:	d123      	bne.n	80053e8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80053a0:	69fb      	ldr	r3, [r7, #28]
 80053a2:	08da      	lsrs	r2, r3, #3
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	3208      	adds	r2, #8
 80053a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80053ae:	69fb      	ldr	r3, [r7, #28]
 80053b0:	f003 0307 	and.w	r3, r3, #7
 80053b4:	009b      	lsls	r3, r3, #2
 80053b6:	220f      	movs	r2, #15
 80053b8:	fa02 f303 	lsl.w	r3, r2, r3
 80053bc:	43db      	mvns	r3, r3
 80053be:	69ba      	ldr	r2, [r7, #24]
 80053c0:	4013      	ands	r3, r2
 80053c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	691a      	ldr	r2, [r3, #16]
 80053c8:	69fb      	ldr	r3, [r7, #28]
 80053ca:	f003 0307 	and.w	r3, r3, #7
 80053ce:	009b      	lsls	r3, r3, #2
 80053d0:	fa02 f303 	lsl.w	r3, r2, r3
 80053d4:	69ba      	ldr	r2, [r7, #24]
 80053d6:	4313      	orrs	r3, r2
 80053d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80053da:	69fb      	ldr	r3, [r7, #28]
 80053dc:	08da      	lsrs	r2, r3, #3
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	3208      	adds	r2, #8
 80053e2:	69b9      	ldr	r1, [r7, #24]
 80053e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80053ee:	69fb      	ldr	r3, [r7, #28]
 80053f0:	005b      	lsls	r3, r3, #1
 80053f2:	2203      	movs	r2, #3
 80053f4:	fa02 f303 	lsl.w	r3, r2, r3
 80053f8:	43db      	mvns	r3, r3
 80053fa:	69ba      	ldr	r2, [r7, #24]
 80053fc:	4013      	ands	r3, r2
 80053fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	685b      	ldr	r3, [r3, #4]
 8005404:	f003 0203 	and.w	r2, r3, #3
 8005408:	69fb      	ldr	r3, [r7, #28]
 800540a:	005b      	lsls	r3, r3, #1
 800540c:	fa02 f303 	lsl.w	r3, r2, r3
 8005410:	69ba      	ldr	r2, [r7, #24]
 8005412:	4313      	orrs	r3, r2
 8005414:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	69ba      	ldr	r2, [r7, #24]
 800541a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	685b      	ldr	r3, [r3, #4]
 8005420:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005424:	2b00      	cmp	r3, #0
 8005426:	f000 80c0 	beq.w	80055aa <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800542a:	2300      	movs	r3, #0
 800542c:	60fb      	str	r3, [r7, #12]
 800542e:	4b65      	ldr	r3, [pc, #404]	; (80055c4 <HAL_GPIO_Init+0x320>)
 8005430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005432:	4a64      	ldr	r2, [pc, #400]	; (80055c4 <HAL_GPIO_Init+0x320>)
 8005434:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005438:	6453      	str	r3, [r2, #68]	; 0x44
 800543a:	4b62      	ldr	r3, [pc, #392]	; (80055c4 <HAL_GPIO_Init+0x320>)
 800543c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800543e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005442:	60fb      	str	r3, [r7, #12]
 8005444:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005446:	4a60      	ldr	r2, [pc, #384]	; (80055c8 <HAL_GPIO_Init+0x324>)
 8005448:	69fb      	ldr	r3, [r7, #28]
 800544a:	089b      	lsrs	r3, r3, #2
 800544c:	3302      	adds	r3, #2
 800544e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005452:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005454:	69fb      	ldr	r3, [r7, #28]
 8005456:	f003 0303 	and.w	r3, r3, #3
 800545a:	009b      	lsls	r3, r3, #2
 800545c:	220f      	movs	r2, #15
 800545e:	fa02 f303 	lsl.w	r3, r2, r3
 8005462:	43db      	mvns	r3, r3
 8005464:	69ba      	ldr	r2, [r7, #24]
 8005466:	4013      	ands	r3, r2
 8005468:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	4a57      	ldr	r2, [pc, #348]	; (80055cc <HAL_GPIO_Init+0x328>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d037      	beq.n	80054e2 <HAL_GPIO_Init+0x23e>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	4a56      	ldr	r2, [pc, #344]	; (80055d0 <HAL_GPIO_Init+0x32c>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d031      	beq.n	80054de <HAL_GPIO_Init+0x23a>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	4a55      	ldr	r2, [pc, #340]	; (80055d4 <HAL_GPIO_Init+0x330>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d02b      	beq.n	80054da <HAL_GPIO_Init+0x236>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	4a54      	ldr	r2, [pc, #336]	; (80055d8 <HAL_GPIO_Init+0x334>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d025      	beq.n	80054d6 <HAL_GPIO_Init+0x232>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	4a53      	ldr	r2, [pc, #332]	; (80055dc <HAL_GPIO_Init+0x338>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d01f      	beq.n	80054d2 <HAL_GPIO_Init+0x22e>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	4a52      	ldr	r2, [pc, #328]	; (80055e0 <HAL_GPIO_Init+0x33c>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d019      	beq.n	80054ce <HAL_GPIO_Init+0x22a>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	4a51      	ldr	r2, [pc, #324]	; (80055e4 <HAL_GPIO_Init+0x340>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d013      	beq.n	80054ca <HAL_GPIO_Init+0x226>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	4a50      	ldr	r2, [pc, #320]	; (80055e8 <HAL_GPIO_Init+0x344>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d00d      	beq.n	80054c6 <HAL_GPIO_Init+0x222>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	4a4f      	ldr	r2, [pc, #316]	; (80055ec <HAL_GPIO_Init+0x348>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d007      	beq.n	80054c2 <HAL_GPIO_Init+0x21e>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	4a4e      	ldr	r2, [pc, #312]	; (80055f0 <HAL_GPIO_Init+0x34c>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d101      	bne.n	80054be <HAL_GPIO_Init+0x21a>
 80054ba:	2309      	movs	r3, #9
 80054bc:	e012      	b.n	80054e4 <HAL_GPIO_Init+0x240>
 80054be:	230a      	movs	r3, #10
 80054c0:	e010      	b.n	80054e4 <HAL_GPIO_Init+0x240>
 80054c2:	2308      	movs	r3, #8
 80054c4:	e00e      	b.n	80054e4 <HAL_GPIO_Init+0x240>
 80054c6:	2307      	movs	r3, #7
 80054c8:	e00c      	b.n	80054e4 <HAL_GPIO_Init+0x240>
 80054ca:	2306      	movs	r3, #6
 80054cc:	e00a      	b.n	80054e4 <HAL_GPIO_Init+0x240>
 80054ce:	2305      	movs	r3, #5
 80054d0:	e008      	b.n	80054e4 <HAL_GPIO_Init+0x240>
 80054d2:	2304      	movs	r3, #4
 80054d4:	e006      	b.n	80054e4 <HAL_GPIO_Init+0x240>
 80054d6:	2303      	movs	r3, #3
 80054d8:	e004      	b.n	80054e4 <HAL_GPIO_Init+0x240>
 80054da:	2302      	movs	r3, #2
 80054dc:	e002      	b.n	80054e4 <HAL_GPIO_Init+0x240>
 80054de:	2301      	movs	r3, #1
 80054e0:	e000      	b.n	80054e4 <HAL_GPIO_Init+0x240>
 80054e2:	2300      	movs	r3, #0
 80054e4:	69fa      	ldr	r2, [r7, #28]
 80054e6:	f002 0203 	and.w	r2, r2, #3
 80054ea:	0092      	lsls	r2, r2, #2
 80054ec:	4093      	lsls	r3, r2
 80054ee:	69ba      	ldr	r2, [r7, #24]
 80054f0:	4313      	orrs	r3, r2
 80054f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80054f4:	4934      	ldr	r1, [pc, #208]	; (80055c8 <HAL_GPIO_Init+0x324>)
 80054f6:	69fb      	ldr	r3, [r7, #28]
 80054f8:	089b      	lsrs	r3, r3, #2
 80054fa:	3302      	adds	r3, #2
 80054fc:	69ba      	ldr	r2, [r7, #24]
 80054fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005502:	4b3c      	ldr	r3, [pc, #240]	; (80055f4 <HAL_GPIO_Init+0x350>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005508:	693b      	ldr	r3, [r7, #16]
 800550a:	43db      	mvns	r3, r3
 800550c:	69ba      	ldr	r2, [r7, #24]
 800550e:	4013      	ands	r3, r2
 8005510:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	685b      	ldr	r3, [r3, #4]
 8005516:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800551a:	2b00      	cmp	r3, #0
 800551c:	d003      	beq.n	8005526 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800551e:	69ba      	ldr	r2, [r7, #24]
 8005520:	693b      	ldr	r3, [r7, #16]
 8005522:	4313      	orrs	r3, r2
 8005524:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005526:	4a33      	ldr	r2, [pc, #204]	; (80055f4 <HAL_GPIO_Init+0x350>)
 8005528:	69bb      	ldr	r3, [r7, #24]
 800552a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800552c:	4b31      	ldr	r3, [pc, #196]	; (80055f4 <HAL_GPIO_Init+0x350>)
 800552e:	685b      	ldr	r3, [r3, #4]
 8005530:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005532:	693b      	ldr	r3, [r7, #16]
 8005534:	43db      	mvns	r3, r3
 8005536:	69ba      	ldr	r2, [r7, #24]
 8005538:	4013      	ands	r3, r2
 800553a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	685b      	ldr	r3, [r3, #4]
 8005540:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005544:	2b00      	cmp	r3, #0
 8005546:	d003      	beq.n	8005550 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005548:	69ba      	ldr	r2, [r7, #24]
 800554a:	693b      	ldr	r3, [r7, #16]
 800554c:	4313      	orrs	r3, r2
 800554e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005550:	4a28      	ldr	r2, [pc, #160]	; (80055f4 <HAL_GPIO_Init+0x350>)
 8005552:	69bb      	ldr	r3, [r7, #24]
 8005554:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005556:	4b27      	ldr	r3, [pc, #156]	; (80055f4 <HAL_GPIO_Init+0x350>)
 8005558:	689b      	ldr	r3, [r3, #8]
 800555a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800555c:	693b      	ldr	r3, [r7, #16]
 800555e:	43db      	mvns	r3, r3
 8005560:	69ba      	ldr	r2, [r7, #24]
 8005562:	4013      	ands	r3, r2
 8005564:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	685b      	ldr	r3, [r3, #4]
 800556a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800556e:	2b00      	cmp	r3, #0
 8005570:	d003      	beq.n	800557a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005572:	69ba      	ldr	r2, [r7, #24]
 8005574:	693b      	ldr	r3, [r7, #16]
 8005576:	4313      	orrs	r3, r2
 8005578:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800557a:	4a1e      	ldr	r2, [pc, #120]	; (80055f4 <HAL_GPIO_Init+0x350>)
 800557c:	69bb      	ldr	r3, [r7, #24]
 800557e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005580:	4b1c      	ldr	r3, [pc, #112]	; (80055f4 <HAL_GPIO_Init+0x350>)
 8005582:	68db      	ldr	r3, [r3, #12]
 8005584:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005586:	693b      	ldr	r3, [r7, #16]
 8005588:	43db      	mvns	r3, r3
 800558a:	69ba      	ldr	r2, [r7, #24]
 800558c:	4013      	ands	r3, r2
 800558e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	685b      	ldr	r3, [r3, #4]
 8005594:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005598:	2b00      	cmp	r3, #0
 800559a:	d003      	beq.n	80055a4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800559c:	69ba      	ldr	r2, [r7, #24]
 800559e:	693b      	ldr	r3, [r7, #16]
 80055a0:	4313      	orrs	r3, r2
 80055a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80055a4:	4a13      	ldr	r2, [pc, #76]	; (80055f4 <HAL_GPIO_Init+0x350>)
 80055a6:	69bb      	ldr	r3, [r7, #24]
 80055a8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80055aa:	69fb      	ldr	r3, [r7, #28]
 80055ac:	3301      	adds	r3, #1
 80055ae:	61fb      	str	r3, [r7, #28]
 80055b0:	69fb      	ldr	r3, [r7, #28]
 80055b2:	2b0f      	cmp	r3, #15
 80055b4:	f67f ae84 	bls.w	80052c0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80055b8:	bf00      	nop
 80055ba:	3724      	adds	r7, #36	; 0x24
 80055bc:	46bd      	mov	sp, r7
 80055be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c2:	4770      	bx	lr
 80055c4:	40023800 	.word	0x40023800
 80055c8:	40013800 	.word	0x40013800
 80055cc:	40020000 	.word	0x40020000
 80055d0:	40020400 	.word	0x40020400
 80055d4:	40020800 	.word	0x40020800
 80055d8:	40020c00 	.word	0x40020c00
 80055dc:	40021000 	.word	0x40021000
 80055e0:	40021400 	.word	0x40021400
 80055e4:	40021800 	.word	0x40021800
 80055e8:	40021c00 	.word	0x40021c00
 80055ec:	40022000 	.word	0x40022000
 80055f0:	40022400 	.word	0x40022400
 80055f4:	40013c00 	.word	0x40013c00

080055f8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80055f8:	b480      	push	{r7}
 80055fa:	b087      	sub	sp, #28
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
 8005600:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005602:	2300      	movs	r3, #0
 8005604:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8005606:	2300      	movs	r3, #0
 8005608:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800560a:	2300      	movs	r3, #0
 800560c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800560e:	2300      	movs	r3, #0
 8005610:	617b      	str	r3, [r7, #20]
 8005612:	e0d9      	b.n	80057c8 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005614:	2201      	movs	r2, #1
 8005616:	697b      	ldr	r3, [r7, #20]
 8005618:	fa02 f303 	lsl.w	r3, r2, r3
 800561c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800561e:	683a      	ldr	r2, [r7, #0]
 8005620:	693b      	ldr	r3, [r7, #16]
 8005622:	4013      	ands	r3, r2
 8005624:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8005626:	68fa      	ldr	r2, [r7, #12]
 8005628:	693b      	ldr	r3, [r7, #16]
 800562a:	429a      	cmp	r2, r3
 800562c:	f040 80c9 	bne.w	80057c2 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8005630:	4a6a      	ldr	r2, [pc, #424]	; (80057dc <HAL_GPIO_DeInit+0x1e4>)
 8005632:	697b      	ldr	r3, [r7, #20]
 8005634:	089b      	lsrs	r3, r3, #2
 8005636:	3302      	adds	r3, #2
 8005638:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800563c:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800563e:	697b      	ldr	r3, [r7, #20]
 8005640:	f003 0303 	and.w	r3, r3, #3
 8005644:	009b      	lsls	r3, r3, #2
 8005646:	220f      	movs	r2, #15
 8005648:	fa02 f303 	lsl.w	r3, r2, r3
 800564c:	68ba      	ldr	r2, [r7, #8]
 800564e:	4013      	ands	r3, r2
 8005650:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	4a62      	ldr	r2, [pc, #392]	; (80057e0 <HAL_GPIO_DeInit+0x1e8>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d037      	beq.n	80056ca <HAL_GPIO_DeInit+0xd2>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	4a61      	ldr	r2, [pc, #388]	; (80057e4 <HAL_GPIO_DeInit+0x1ec>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d031      	beq.n	80056c6 <HAL_GPIO_DeInit+0xce>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	4a60      	ldr	r2, [pc, #384]	; (80057e8 <HAL_GPIO_DeInit+0x1f0>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d02b      	beq.n	80056c2 <HAL_GPIO_DeInit+0xca>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	4a5f      	ldr	r2, [pc, #380]	; (80057ec <HAL_GPIO_DeInit+0x1f4>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d025      	beq.n	80056be <HAL_GPIO_DeInit+0xc6>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	4a5e      	ldr	r2, [pc, #376]	; (80057f0 <HAL_GPIO_DeInit+0x1f8>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d01f      	beq.n	80056ba <HAL_GPIO_DeInit+0xc2>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	4a5d      	ldr	r2, [pc, #372]	; (80057f4 <HAL_GPIO_DeInit+0x1fc>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d019      	beq.n	80056b6 <HAL_GPIO_DeInit+0xbe>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	4a5c      	ldr	r2, [pc, #368]	; (80057f8 <HAL_GPIO_DeInit+0x200>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d013      	beq.n	80056b2 <HAL_GPIO_DeInit+0xba>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	4a5b      	ldr	r2, [pc, #364]	; (80057fc <HAL_GPIO_DeInit+0x204>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d00d      	beq.n	80056ae <HAL_GPIO_DeInit+0xb6>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	4a5a      	ldr	r2, [pc, #360]	; (8005800 <HAL_GPIO_DeInit+0x208>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d007      	beq.n	80056aa <HAL_GPIO_DeInit+0xb2>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	4a59      	ldr	r2, [pc, #356]	; (8005804 <HAL_GPIO_DeInit+0x20c>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d101      	bne.n	80056a6 <HAL_GPIO_DeInit+0xae>
 80056a2:	2309      	movs	r3, #9
 80056a4:	e012      	b.n	80056cc <HAL_GPIO_DeInit+0xd4>
 80056a6:	230a      	movs	r3, #10
 80056a8:	e010      	b.n	80056cc <HAL_GPIO_DeInit+0xd4>
 80056aa:	2308      	movs	r3, #8
 80056ac:	e00e      	b.n	80056cc <HAL_GPIO_DeInit+0xd4>
 80056ae:	2307      	movs	r3, #7
 80056b0:	e00c      	b.n	80056cc <HAL_GPIO_DeInit+0xd4>
 80056b2:	2306      	movs	r3, #6
 80056b4:	e00a      	b.n	80056cc <HAL_GPIO_DeInit+0xd4>
 80056b6:	2305      	movs	r3, #5
 80056b8:	e008      	b.n	80056cc <HAL_GPIO_DeInit+0xd4>
 80056ba:	2304      	movs	r3, #4
 80056bc:	e006      	b.n	80056cc <HAL_GPIO_DeInit+0xd4>
 80056be:	2303      	movs	r3, #3
 80056c0:	e004      	b.n	80056cc <HAL_GPIO_DeInit+0xd4>
 80056c2:	2302      	movs	r3, #2
 80056c4:	e002      	b.n	80056cc <HAL_GPIO_DeInit+0xd4>
 80056c6:	2301      	movs	r3, #1
 80056c8:	e000      	b.n	80056cc <HAL_GPIO_DeInit+0xd4>
 80056ca:	2300      	movs	r3, #0
 80056cc:	697a      	ldr	r2, [r7, #20]
 80056ce:	f002 0203 	and.w	r2, r2, #3
 80056d2:	0092      	lsls	r2, r2, #2
 80056d4:	4093      	lsls	r3, r2
 80056d6:	68ba      	ldr	r2, [r7, #8]
 80056d8:	429a      	cmp	r2, r3
 80056da:	d132      	bne.n	8005742 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80056dc:	4b4a      	ldr	r3, [pc, #296]	; (8005808 <HAL_GPIO_DeInit+0x210>)
 80056de:	681a      	ldr	r2, [r3, #0]
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	43db      	mvns	r3, r3
 80056e4:	4948      	ldr	r1, [pc, #288]	; (8005808 <HAL_GPIO_DeInit+0x210>)
 80056e6:	4013      	ands	r3, r2
 80056e8:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80056ea:	4b47      	ldr	r3, [pc, #284]	; (8005808 <HAL_GPIO_DeInit+0x210>)
 80056ec:	685a      	ldr	r2, [r3, #4]
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	43db      	mvns	r3, r3
 80056f2:	4945      	ldr	r1, [pc, #276]	; (8005808 <HAL_GPIO_DeInit+0x210>)
 80056f4:	4013      	ands	r3, r2
 80056f6:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80056f8:	4b43      	ldr	r3, [pc, #268]	; (8005808 <HAL_GPIO_DeInit+0x210>)
 80056fa:	689a      	ldr	r2, [r3, #8]
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	43db      	mvns	r3, r3
 8005700:	4941      	ldr	r1, [pc, #260]	; (8005808 <HAL_GPIO_DeInit+0x210>)
 8005702:	4013      	ands	r3, r2
 8005704:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8005706:	4b40      	ldr	r3, [pc, #256]	; (8005808 <HAL_GPIO_DeInit+0x210>)
 8005708:	68da      	ldr	r2, [r3, #12]
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	43db      	mvns	r3, r3
 800570e:	493e      	ldr	r1, [pc, #248]	; (8005808 <HAL_GPIO_DeInit+0x210>)
 8005710:	4013      	ands	r3, r2
 8005712:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8005714:	697b      	ldr	r3, [r7, #20]
 8005716:	f003 0303 	and.w	r3, r3, #3
 800571a:	009b      	lsls	r3, r3, #2
 800571c:	220f      	movs	r2, #15
 800571e:	fa02 f303 	lsl.w	r3, r2, r3
 8005722:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8005724:	4a2d      	ldr	r2, [pc, #180]	; (80057dc <HAL_GPIO_DeInit+0x1e4>)
 8005726:	697b      	ldr	r3, [r7, #20]
 8005728:	089b      	lsrs	r3, r3, #2
 800572a:	3302      	adds	r3, #2
 800572c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	43da      	mvns	r2, r3
 8005734:	4829      	ldr	r0, [pc, #164]	; (80057dc <HAL_GPIO_DeInit+0x1e4>)
 8005736:	697b      	ldr	r3, [r7, #20]
 8005738:	089b      	lsrs	r3, r3, #2
 800573a:	400a      	ands	r2, r1
 800573c:	3302      	adds	r3, #2
 800573e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681a      	ldr	r2, [r3, #0]
 8005746:	697b      	ldr	r3, [r7, #20]
 8005748:	005b      	lsls	r3, r3, #1
 800574a:	2103      	movs	r1, #3
 800574c:	fa01 f303 	lsl.w	r3, r1, r3
 8005750:	43db      	mvns	r3, r3
 8005752:	401a      	ands	r2, r3
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005758:	697b      	ldr	r3, [r7, #20]
 800575a:	08da      	lsrs	r2, r3, #3
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	3208      	adds	r2, #8
 8005760:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005764:	697b      	ldr	r3, [r7, #20]
 8005766:	f003 0307 	and.w	r3, r3, #7
 800576a:	009b      	lsls	r3, r3, #2
 800576c:	220f      	movs	r2, #15
 800576e:	fa02 f303 	lsl.w	r3, r2, r3
 8005772:	43db      	mvns	r3, r3
 8005774:	697a      	ldr	r2, [r7, #20]
 8005776:	08d2      	lsrs	r2, r2, #3
 8005778:	4019      	ands	r1, r3
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	3208      	adds	r2, #8
 800577e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	68da      	ldr	r2, [r3, #12]
 8005786:	697b      	ldr	r3, [r7, #20]
 8005788:	005b      	lsls	r3, r3, #1
 800578a:	2103      	movs	r1, #3
 800578c:	fa01 f303 	lsl.w	r3, r1, r3
 8005790:	43db      	mvns	r3, r3
 8005792:	401a      	ands	r2, r3
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	685a      	ldr	r2, [r3, #4]
 800579c:	2101      	movs	r1, #1
 800579e:	697b      	ldr	r3, [r7, #20]
 80057a0:	fa01 f303 	lsl.w	r3, r1, r3
 80057a4:	43db      	mvns	r3, r3
 80057a6:	401a      	ands	r2, r3
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	689a      	ldr	r2, [r3, #8]
 80057b0:	697b      	ldr	r3, [r7, #20]
 80057b2:	005b      	lsls	r3, r3, #1
 80057b4:	2103      	movs	r1, #3
 80057b6:	fa01 f303 	lsl.w	r3, r1, r3
 80057ba:	43db      	mvns	r3, r3
 80057bc:	401a      	ands	r2, r3
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80057c2:	697b      	ldr	r3, [r7, #20]
 80057c4:	3301      	adds	r3, #1
 80057c6:	617b      	str	r3, [r7, #20]
 80057c8:	697b      	ldr	r3, [r7, #20]
 80057ca:	2b0f      	cmp	r3, #15
 80057cc:	f67f af22 	bls.w	8005614 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80057d0:	bf00      	nop
 80057d2:	371c      	adds	r7, #28
 80057d4:	46bd      	mov	sp, r7
 80057d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057da:	4770      	bx	lr
 80057dc:	40013800 	.word	0x40013800
 80057e0:	40020000 	.word	0x40020000
 80057e4:	40020400 	.word	0x40020400
 80057e8:	40020800 	.word	0x40020800
 80057ec:	40020c00 	.word	0x40020c00
 80057f0:	40021000 	.word	0x40021000
 80057f4:	40021400 	.word	0x40021400
 80057f8:	40021800 	.word	0x40021800
 80057fc:	40021c00 	.word	0x40021c00
 8005800:	40022000 	.word	0x40022000
 8005804:	40022400 	.word	0x40022400
 8005808:	40013c00 	.word	0x40013c00

0800580c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800580c:	b480      	push	{r7}
 800580e:	b083      	sub	sp, #12
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
 8005814:	460b      	mov	r3, r1
 8005816:	807b      	strh	r3, [r7, #2]
 8005818:	4613      	mov	r3, r2
 800581a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800581c:	787b      	ldrb	r3, [r7, #1]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d003      	beq.n	800582a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005822:	887a      	ldrh	r2, [r7, #2]
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005828:	e003      	b.n	8005832 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800582a:	887b      	ldrh	r3, [r7, #2]
 800582c:	041a      	lsls	r2, r3, #16
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	619a      	str	r2, [r3, #24]
}
 8005832:	bf00      	nop
 8005834:	370c      	adds	r7, #12
 8005836:	46bd      	mov	sp, r7
 8005838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583c:	4770      	bx	lr

0800583e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800583e:	b480      	push	{r7}
 8005840:	b083      	sub	sp, #12
 8005842:	af00      	add	r7, sp, #0
 8005844:	6078      	str	r0, [r7, #4]
 8005846:	460b      	mov	r3, r1
 8005848:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	695a      	ldr	r2, [r3, #20]
 800584e:	887b      	ldrh	r3, [r7, #2]
 8005850:	401a      	ands	r2, r3
 8005852:	887b      	ldrh	r3, [r7, #2]
 8005854:	429a      	cmp	r2, r3
 8005856:	d104      	bne.n	8005862 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005858:	887b      	ldrh	r3, [r7, #2]
 800585a:	041a      	lsls	r2, r3, #16
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8005860:	e002      	b.n	8005868 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8005862:	887a      	ldrh	r2, [r7, #2]
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	619a      	str	r2, [r3, #24]
}
 8005868:	bf00      	nop
 800586a:	370c      	adds	r7, #12
 800586c:	46bd      	mov	sp, r7
 800586e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005872:	4770      	bx	lr

08005874 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b084      	sub	sp, #16
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d101      	bne.n	8005886 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005882:	2301      	movs	r3, #1
 8005884:	e11f      	b.n	8005ac6 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800588c:	b2db      	uxtb	r3, r3
 800588e:	2b00      	cmp	r3, #0
 8005890:	d106      	bne.n	80058a0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2200      	movs	r2, #0
 8005896:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800589a:	6878      	ldr	r0, [r7, #4]
 800589c:	f7fb fac2 	bl	8000e24 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2224      	movs	r2, #36	; 0x24
 80058a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	681a      	ldr	r2, [r3, #0]
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f022 0201 	bic.w	r2, r2, #1
 80058b6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	681a      	ldr	r2, [r3, #0]
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80058c6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	681a      	ldr	r2, [r3, #0]
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80058d6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80058d8:	f001 ff42 	bl	8007760 <HAL_RCC_GetPCLK1Freq>
 80058dc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	685b      	ldr	r3, [r3, #4]
 80058e2:	4a7b      	ldr	r2, [pc, #492]	; (8005ad0 <HAL_I2C_Init+0x25c>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d807      	bhi.n	80058f8 <HAL_I2C_Init+0x84>
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	4a7a      	ldr	r2, [pc, #488]	; (8005ad4 <HAL_I2C_Init+0x260>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	bf94      	ite	ls
 80058f0:	2301      	movls	r3, #1
 80058f2:	2300      	movhi	r3, #0
 80058f4:	b2db      	uxtb	r3, r3
 80058f6:	e006      	b.n	8005906 <HAL_I2C_Init+0x92>
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	4a77      	ldr	r2, [pc, #476]	; (8005ad8 <HAL_I2C_Init+0x264>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	bf94      	ite	ls
 8005900:	2301      	movls	r3, #1
 8005902:	2300      	movhi	r3, #0
 8005904:	b2db      	uxtb	r3, r3
 8005906:	2b00      	cmp	r3, #0
 8005908:	d001      	beq.n	800590e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800590a:	2301      	movs	r3, #1
 800590c:	e0db      	b.n	8005ac6 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	4a72      	ldr	r2, [pc, #456]	; (8005adc <HAL_I2C_Init+0x268>)
 8005912:	fba2 2303 	umull	r2, r3, r2, r3
 8005916:	0c9b      	lsrs	r3, r3, #18
 8005918:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	685b      	ldr	r3, [r3, #4]
 8005920:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	68ba      	ldr	r2, [r7, #8]
 800592a:	430a      	orrs	r2, r1
 800592c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	6a1b      	ldr	r3, [r3, #32]
 8005934:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	685b      	ldr	r3, [r3, #4]
 800593c:	4a64      	ldr	r2, [pc, #400]	; (8005ad0 <HAL_I2C_Init+0x25c>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d802      	bhi.n	8005948 <HAL_I2C_Init+0xd4>
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	3301      	adds	r3, #1
 8005946:	e009      	b.n	800595c <HAL_I2C_Init+0xe8>
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800594e:	fb02 f303 	mul.w	r3, r2, r3
 8005952:	4a63      	ldr	r2, [pc, #396]	; (8005ae0 <HAL_I2C_Init+0x26c>)
 8005954:	fba2 2303 	umull	r2, r3, r2, r3
 8005958:	099b      	lsrs	r3, r3, #6
 800595a:	3301      	adds	r3, #1
 800595c:	687a      	ldr	r2, [r7, #4]
 800595e:	6812      	ldr	r2, [r2, #0]
 8005960:	430b      	orrs	r3, r1
 8005962:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	69db      	ldr	r3, [r3, #28]
 800596a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800596e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	685b      	ldr	r3, [r3, #4]
 8005976:	4956      	ldr	r1, [pc, #344]	; (8005ad0 <HAL_I2C_Init+0x25c>)
 8005978:	428b      	cmp	r3, r1
 800597a:	d80d      	bhi.n	8005998 <HAL_I2C_Init+0x124>
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	1e59      	subs	r1, r3, #1
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	685b      	ldr	r3, [r3, #4]
 8005984:	005b      	lsls	r3, r3, #1
 8005986:	fbb1 f3f3 	udiv	r3, r1, r3
 800598a:	3301      	adds	r3, #1
 800598c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005990:	2b04      	cmp	r3, #4
 8005992:	bf38      	it	cc
 8005994:	2304      	movcc	r3, #4
 8005996:	e04f      	b.n	8005a38 <HAL_I2C_Init+0x1c4>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	689b      	ldr	r3, [r3, #8]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d111      	bne.n	80059c4 <HAL_I2C_Init+0x150>
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	1e58      	subs	r0, r3, #1
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6859      	ldr	r1, [r3, #4]
 80059a8:	460b      	mov	r3, r1
 80059aa:	005b      	lsls	r3, r3, #1
 80059ac:	440b      	add	r3, r1
 80059ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80059b2:	3301      	adds	r3, #1
 80059b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	bf0c      	ite	eq
 80059bc:	2301      	moveq	r3, #1
 80059be:	2300      	movne	r3, #0
 80059c0:	b2db      	uxtb	r3, r3
 80059c2:	e012      	b.n	80059ea <HAL_I2C_Init+0x176>
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	1e58      	subs	r0, r3, #1
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6859      	ldr	r1, [r3, #4]
 80059cc:	460b      	mov	r3, r1
 80059ce:	009b      	lsls	r3, r3, #2
 80059d0:	440b      	add	r3, r1
 80059d2:	0099      	lsls	r1, r3, #2
 80059d4:	440b      	add	r3, r1
 80059d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80059da:	3301      	adds	r3, #1
 80059dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	bf0c      	ite	eq
 80059e4:	2301      	moveq	r3, #1
 80059e6:	2300      	movne	r3, #0
 80059e8:	b2db      	uxtb	r3, r3
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d001      	beq.n	80059f2 <HAL_I2C_Init+0x17e>
 80059ee:	2301      	movs	r3, #1
 80059f0:	e022      	b.n	8005a38 <HAL_I2C_Init+0x1c4>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	689b      	ldr	r3, [r3, #8]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d10e      	bne.n	8005a18 <HAL_I2C_Init+0x1a4>
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	1e58      	subs	r0, r3, #1
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6859      	ldr	r1, [r3, #4]
 8005a02:	460b      	mov	r3, r1
 8005a04:	005b      	lsls	r3, r3, #1
 8005a06:	440b      	add	r3, r1
 8005a08:	fbb0 f3f3 	udiv	r3, r0, r3
 8005a0c:	3301      	adds	r3, #1
 8005a0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a16:	e00f      	b.n	8005a38 <HAL_I2C_Init+0x1c4>
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	1e58      	subs	r0, r3, #1
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6859      	ldr	r1, [r3, #4]
 8005a20:	460b      	mov	r3, r1
 8005a22:	009b      	lsls	r3, r3, #2
 8005a24:	440b      	add	r3, r1
 8005a26:	0099      	lsls	r1, r3, #2
 8005a28:	440b      	add	r3, r1
 8005a2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8005a2e:	3301      	adds	r3, #1
 8005a30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a34:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005a38:	6879      	ldr	r1, [r7, #4]
 8005a3a:	6809      	ldr	r1, [r1, #0]
 8005a3c:	4313      	orrs	r3, r2
 8005a3e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	69da      	ldr	r2, [r3, #28]
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6a1b      	ldr	r3, [r3, #32]
 8005a52:	431a      	orrs	r2, r3
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	430a      	orrs	r2, r1
 8005a5a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	689b      	ldr	r3, [r3, #8]
 8005a62:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005a66:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005a6a:	687a      	ldr	r2, [r7, #4]
 8005a6c:	6911      	ldr	r1, [r2, #16]
 8005a6e:	687a      	ldr	r2, [r7, #4]
 8005a70:	68d2      	ldr	r2, [r2, #12]
 8005a72:	4311      	orrs	r1, r2
 8005a74:	687a      	ldr	r2, [r7, #4]
 8005a76:	6812      	ldr	r2, [r2, #0]
 8005a78:	430b      	orrs	r3, r1
 8005a7a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	68db      	ldr	r3, [r3, #12]
 8005a82:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	695a      	ldr	r2, [r3, #20]
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	699b      	ldr	r3, [r3, #24]
 8005a8e:	431a      	orrs	r2, r3
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	430a      	orrs	r2, r1
 8005a96:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	681a      	ldr	r2, [r3, #0]
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f042 0201 	orr.w	r2, r2, #1
 8005aa6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2200      	movs	r2, #0
 8005aac:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2220      	movs	r2, #32
 8005ab2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2200      	movs	r2, #0
 8005ac0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005ac4:	2300      	movs	r3, #0
}
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	3710      	adds	r7, #16
 8005aca:	46bd      	mov	sp, r7
 8005acc:	bd80      	pop	{r7, pc}
 8005ace:	bf00      	nop
 8005ad0:	000186a0 	.word	0x000186a0
 8005ad4:	001e847f 	.word	0x001e847f
 8005ad8:	003d08ff 	.word	0x003d08ff
 8005adc:	431bde83 	.word	0x431bde83
 8005ae0:	10624dd3 	.word	0x10624dd3

08005ae4 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b082      	sub	sp, #8
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d101      	bne.n	8005af6 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8005af2:	2301      	movs	r3, #1
 8005af4:	e021      	b.n	8005b3a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2224      	movs	r2, #36	; 0x24
 8005afa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	681a      	ldr	r2, [r3, #0]
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f022 0201 	bic.w	r2, r2, #1
 8005b0c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8005b0e:	6878      	ldr	r0, [r7, #4]
 8005b10:	f7fb f9f2 	bl	8000ef8 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2200      	movs	r2, #0
 8005b18:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2200      	movs	r2, #0
 8005b26:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2200      	movs	r2, #0
 8005b34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005b38:	2300      	movs	r3, #0
}
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	3708      	adds	r7, #8
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	bd80      	pop	{r7, pc}
	...

08005b44 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b088      	sub	sp, #32
 8005b48:	af02      	add	r7, sp, #8
 8005b4a:	60f8      	str	r0, [r7, #12]
 8005b4c:	4608      	mov	r0, r1
 8005b4e:	4611      	mov	r1, r2
 8005b50:	461a      	mov	r2, r3
 8005b52:	4603      	mov	r3, r0
 8005b54:	817b      	strh	r3, [r7, #10]
 8005b56:	460b      	mov	r3, r1
 8005b58:	813b      	strh	r3, [r7, #8]
 8005b5a:	4613      	mov	r3, r2
 8005b5c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005b5e:	f7fe f921 	bl	8003da4 <HAL_GetTick>
 8005b62:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b6a:	b2db      	uxtb	r3, r3
 8005b6c:	2b20      	cmp	r3, #32
 8005b6e:	f040 80d9 	bne.w	8005d24 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005b72:	697b      	ldr	r3, [r7, #20]
 8005b74:	9300      	str	r3, [sp, #0]
 8005b76:	2319      	movs	r3, #25
 8005b78:	2201      	movs	r2, #1
 8005b7a:	496d      	ldr	r1, [pc, #436]	; (8005d30 <HAL_I2C_Mem_Write+0x1ec>)
 8005b7c:	68f8      	ldr	r0, [r7, #12]
 8005b7e:	f000 fc8d 	bl	800649c <I2C_WaitOnFlagUntilTimeout>
 8005b82:	4603      	mov	r3, r0
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d001      	beq.n	8005b8c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005b88:	2302      	movs	r3, #2
 8005b8a:	e0cc      	b.n	8005d26 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b92:	2b01      	cmp	r3, #1
 8005b94:	d101      	bne.n	8005b9a <HAL_I2C_Mem_Write+0x56>
 8005b96:	2302      	movs	r3, #2
 8005b98:	e0c5      	b.n	8005d26 <HAL_I2C_Mem_Write+0x1e2>
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	2201      	movs	r2, #1
 8005b9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f003 0301 	and.w	r3, r3, #1
 8005bac:	2b01      	cmp	r3, #1
 8005bae:	d007      	beq.n	8005bc0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	681a      	ldr	r2, [r3, #0]
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f042 0201 	orr.w	r2, r2, #1
 8005bbe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	681a      	ldr	r2, [r3, #0]
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005bce:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	2221      	movs	r2, #33	; 0x21
 8005bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	2240      	movs	r2, #64	; 0x40
 8005bdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	2200      	movs	r2, #0
 8005be4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	6a3a      	ldr	r2, [r7, #32]
 8005bea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005bf0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bf6:	b29a      	uxth	r2, r3
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	4a4d      	ldr	r2, [pc, #308]	; (8005d34 <HAL_I2C_Mem_Write+0x1f0>)
 8005c00:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005c02:	88f8      	ldrh	r0, [r7, #6]
 8005c04:	893a      	ldrh	r2, [r7, #8]
 8005c06:	8979      	ldrh	r1, [r7, #10]
 8005c08:	697b      	ldr	r3, [r7, #20]
 8005c0a:	9301      	str	r3, [sp, #4]
 8005c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c0e:	9300      	str	r3, [sp, #0]
 8005c10:	4603      	mov	r3, r0
 8005c12:	68f8      	ldr	r0, [r7, #12]
 8005c14:	f000 fac4 	bl	80061a0 <I2C_RequestMemoryWrite>
 8005c18:	4603      	mov	r3, r0
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d052      	beq.n	8005cc4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005c1e:	2301      	movs	r3, #1
 8005c20:	e081      	b.n	8005d26 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c22:	697a      	ldr	r2, [r7, #20]
 8005c24:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005c26:	68f8      	ldr	r0, [r7, #12]
 8005c28:	f000 fd0e 	bl	8006648 <I2C_WaitOnTXEFlagUntilTimeout>
 8005c2c:	4603      	mov	r3, r0
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d00d      	beq.n	8005c4e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c36:	2b04      	cmp	r3, #4
 8005c38:	d107      	bne.n	8005c4a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	681a      	ldr	r2, [r3, #0]
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c48:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005c4a:	2301      	movs	r3, #1
 8005c4c:	e06b      	b.n	8005d26 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c52:	781a      	ldrb	r2, [r3, #0]
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c5e:	1c5a      	adds	r2, r3, #1
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c68:	3b01      	subs	r3, #1
 8005c6a:	b29a      	uxth	r2, r3
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c74:	b29b      	uxth	r3, r3
 8005c76:	3b01      	subs	r3, #1
 8005c78:	b29a      	uxth	r2, r3
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	695b      	ldr	r3, [r3, #20]
 8005c84:	f003 0304 	and.w	r3, r3, #4
 8005c88:	2b04      	cmp	r3, #4
 8005c8a:	d11b      	bne.n	8005cc4 <HAL_I2C_Mem_Write+0x180>
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d017      	beq.n	8005cc4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c98:	781a      	ldrb	r2, [r3, #0]
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ca4:	1c5a      	adds	r2, r3, #1
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cae:	3b01      	subs	r3, #1
 8005cb0:	b29a      	uxth	r2, r3
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cba:	b29b      	uxth	r3, r3
 8005cbc:	3b01      	subs	r3, #1
 8005cbe:	b29a      	uxth	r2, r3
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d1aa      	bne.n	8005c22 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005ccc:	697a      	ldr	r2, [r7, #20]
 8005cce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005cd0:	68f8      	ldr	r0, [r7, #12]
 8005cd2:	f000 fcfa 	bl	80066ca <I2C_WaitOnBTFFlagUntilTimeout>
 8005cd6:	4603      	mov	r3, r0
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d00d      	beq.n	8005cf8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ce0:	2b04      	cmp	r3, #4
 8005ce2:	d107      	bne.n	8005cf4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	681a      	ldr	r2, [r3, #0]
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005cf2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	e016      	b.n	8005d26 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	681a      	ldr	r2, [r3, #0]
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d06:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	2220      	movs	r2, #32
 8005d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	2200      	movs	r2, #0
 8005d14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005d20:	2300      	movs	r3, #0
 8005d22:	e000      	b.n	8005d26 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005d24:	2302      	movs	r3, #2
  }
}
 8005d26:	4618      	mov	r0, r3
 8005d28:	3718      	adds	r7, #24
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	bd80      	pop	{r7, pc}
 8005d2e:	bf00      	nop
 8005d30:	00100002 	.word	0x00100002
 8005d34:	ffff0000 	.word	0xffff0000

08005d38 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b08c      	sub	sp, #48	; 0x30
 8005d3c:	af02      	add	r7, sp, #8
 8005d3e:	60f8      	str	r0, [r7, #12]
 8005d40:	4608      	mov	r0, r1
 8005d42:	4611      	mov	r1, r2
 8005d44:	461a      	mov	r2, r3
 8005d46:	4603      	mov	r3, r0
 8005d48:	817b      	strh	r3, [r7, #10]
 8005d4a:	460b      	mov	r3, r1
 8005d4c:	813b      	strh	r3, [r7, #8]
 8005d4e:	4613      	mov	r3, r2
 8005d50:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005d52:	f7fe f827 	bl	8003da4 <HAL_GetTick>
 8005d56:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d5e:	b2db      	uxtb	r3, r3
 8005d60:	2b20      	cmp	r3, #32
 8005d62:	f040 8208 	bne.w	8006176 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d68:	9300      	str	r3, [sp, #0]
 8005d6a:	2319      	movs	r3, #25
 8005d6c:	2201      	movs	r2, #1
 8005d6e:	497b      	ldr	r1, [pc, #492]	; (8005f5c <HAL_I2C_Mem_Read+0x224>)
 8005d70:	68f8      	ldr	r0, [r7, #12]
 8005d72:	f000 fb93 	bl	800649c <I2C_WaitOnFlagUntilTimeout>
 8005d76:	4603      	mov	r3, r0
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d001      	beq.n	8005d80 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005d7c:	2302      	movs	r3, #2
 8005d7e:	e1fb      	b.n	8006178 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d86:	2b01      	cmp	r3, #1
 8005d88:	d101      	bne.n	8005d8e <HAL_I2C_Mem_Read+0x56>
 8005d8a:	2302      	movs	r3, #2
 8005d8c:	e1f4      	b.n	8006178 <HAL_I2C_Mem_Read+0x440>
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	2201      	movs	r2, #1
 8005d92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f003 0301 	and.w	r3, r3, #1
 8005da0:	2b01      	cmp	r3, #1
 8005da2:	d007      	beq.n	8005db4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	681a      	ldr	r2, [r3, #0]
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f042 0201 	orr.w	r2, r2, #1
 8005db2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	681a      	ldr	r2, [r3, #0]
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005dc2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	2222      	movs	r2, #34	; 0x22
 8005dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	2240      	movs	r2, #64	; 0x40
 8005dd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005dde:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005de4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005dea:	b29a      	uxth	r2, r3
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	4a5b      	ldr	r2, [pc, #364]	; (8005f60 <HAL_I2C_Mem_Read+0x228>)
 8005df4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005df6:	88f8      	ldrh	r0, [r7, #6]
 8005df8:	893a      	ldrh	r2, [r7, #8]
 8005dfa:	8979      	ldrh	r1, [r7, #10]
 8005dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dfe:	9301      	str	r3, [sp, #4]
 8005e00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e02:	9300      	str	r3, [sp, #0]
 8005e04:	4603      	mov	r3, r0
 8005e06:	68f8      	ldr	r0, [r7, #12]
 8005e08:	f000 fa60 	bl	80062cc <I2C_RequestMemoryRead>
 8005e0c:	4603      	mov	r3, r0
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d001      	beq.n	8005e16 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8005e12:	2301      	movs	r3, #1
 8005e14:	e1b0      	b.n	8006178 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d113      	bne.n	8005e46 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e1e:	2300      	movs	r3, #0
 8005e20:	623b      	str	r3, [r7, #32]
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	695b      	ldr	r3, [r3, #20]
 8005e28:	623b      	str	r3, [r7, #32]
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	699b      	ldr	r3, [r3, #24]
 8005e30:	623b      	str	r3, [r7, #32]
 8005e32:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	681a      	ldr	r2, [r3, #0]
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e42:	601a      	str	r2, [r3, #0]
 8005e44:	e184      	b.n	8006150 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e4a:	2b01      	cmp	r3, #1
 8005e4c:	d11b      	bne.n	8005e86 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	681a      	ldr	r2, [r3, #0]
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e5c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e5e:	2300      	movs	r3, #0
 8005e60:	61fb      	str	r3, [r7, #28]
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	695b      	ldr	r3, [r3, #20]
 8005e68:	61fb      	str	r3, [r7, #28]
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	699b      	ldr	r3, [r3, #24]
 8005e70:	61fb      	str	r3, [r7, #28]
 8005e72:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	681a      	ldr	r2, [r3, #0]
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e82:	601a      	str	r2, [r3, #0]
 8005e84:	e164      	b.n	8006150 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e8a:	2b02      	cmp	r3, #2
 8005e8c:	d11b      	bne.n	8005ec6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	681a      	ldr	r2, [r3, #0]
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e9c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	681a      	ldr	r2, [r3, #0]
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005eac:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005eae:	2300      	movs	r3, #0
 8005eb0:	61bb      	str	r3, [r7, #24]
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	695b      	ldr	r3, [r3, #20]
 8005eb8:	61bb      	str	r3, [r7, #24]
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	699b      	ldr	r3, [r3, #24]
 8005ec0:	61bb      	str	r3, [r7, #24]
 8005ec2:	69bb      	ldr	r3, [r7, #24]
 8005ec4:	e144      	b.n	8006150 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	617b      	str	r3, [r7, #20]
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	695b      	ldr	r3, [r3, #20]
 8005ed0:	617b      	str	r3, [r7, #20]
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	699b      	ldr	r3, [r3, #24]
 8005ed8:	617b      	str	r3, [r7, #20]
 8005eda:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005edc:	e138      	b.n	8006150 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ee2:	2b03      	cmp	r3, #3
 8005ee4:	f200 80f1 	bhi.w	80060ca <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005eec:	2b01      	cmp	r3, #1
 8005eee:	d123      	bne.n	8005f38 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005ef0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ef2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005ef4:	68f8      	ldr	r0, [r7, #12]
 8005ef6:	f000 fc29 	bl	800674c <I2C_WaitOnRXNEFlagUntilTimeout>
 8005efa:	4603      	mov	r3, r0
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d001      	beq.n	8005f04 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005f00:	2301      	movs	r3, #1
 8005f02:	e139      	b.n	8006178 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	691a      	ldr	r2, [r3, #16]
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f0e:	b2d2      	uxtb	r2, r2
 8005f10:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f16:	1c5a      	adds	r2, r3, #1
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f20:	3b01      	subs	r3, #1
 8005f22:	b29a      	uxth	r2, r3
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f2c:	b29b      	uxth	r3, r3
 8005f2e:	3b01      	subs	r3, #1
 8005f30:	b29a      	uxth	r2, r3
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005f36:	e10b      	b.n	8006150 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f3c:	2b02      	cmp	r3, #2
 8005f3e:	d14e      	bne.n	8005fde <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f42:	9300      	str	r3, [sp, #0]
 8005f44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f46:	2200      	movs	r2, #0
 8005f48:	4906      	ldr	r1, [pc, #24]	; (8005f64 <HAL_I2C_Mem_Read+0x22c>)
 8005f4a:	68f8      	ldr	r0, [r7, #12]
 8005f4c:	f000 faa6 	bl	800649c <I2C_WaitOnFlagUntilTimeout>
 8005f50:	4603      	mov	r3, r0
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d008      	beq.n	8005f68 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8005f56:	2301      	movs	r3, #1
 8005f58:	e10e      	b.n	8006178 <HAL_I2C_Mem_Read+0x440>
 8005f5a:	bf00      	nop
 8005f5c:	00100002 	.word	0x00100002
 8005f60:	ffff0000 	.word	0xffff0000
 8005f64:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	681a      	ldr	r2, [r3, #0]
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f76:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	691a      	ldr	r2, [r3, #16]
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f82:	b2d2      	uxtb	r2, r2
 8005f84:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f8a:	1c5a      	adds	r2, r3, #1
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f94:	3b01      	subs	r3, #1
 8005f96:	b29a      	uxth	r2, r3
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fa0:	b29b      	uxth	r3, r3
 8005fa2:	3b01      	subs	r3, #1
 8005fa4:	b29a      	uxth	r2, r3
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	691a      	ldr	r2, [r3, #16]
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fb4:	b2d2      	uxtb	r2, r2
 8005fb6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fbc:	1c5a      	adds	r2, r3, #1
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fc6:	3b01      	subs	r3, #1
 8005fc8:	b29a      	uxth	r2, r3
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fd2:	b29b      	uxth	r3, r3
 8005fd4:	3b01      	subs	r3, #1
 8005fd6:	b29a      	uxth	r2, r3
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005fdc:	e0b8      	b.n	8006150 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fe0:	9300      	str	r3, [sp, #0]
 8005fe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	4966      	ldr	r1, [pc, #408]	; (8006180 <HAL_I2C_Mem_Read+0x448>)
 8005fe8:	68f8      	ldr	r0, [r7, #12]
 8005fea:	f000 fa57 	bl	800649c <I2C_WaitOnFlagUntilTimeout>
 8005fee:	4603      	mov	r3, r0
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d001      	beq.n	8005ff8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005ff4:	2301      	movs	r3, #1
 8005ff6:	e0bf      	b.n	8006178 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	681a      	ldr	r2, [r3, #0]
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006006:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	691a      	ldr	r2, [r3, #16]
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006012:	b2d2      	uxtb	r2, r2
 8006014:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800601a:	1c5a      	adds	r2, r3, #1
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006024:	3b01      	subs	r3, #1
 8006026:	b29a      	uxth	r2, r3
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006030:	b29b      	uxth	r3, r3
 8006032:	3b01      	subs	r3, #1
 8006034:	b29a      	uxth	r2, r3
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800603a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800603c:	9300      	str	r3, [sp, #0]
 800603e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006040:	2200      	movs	r2, #0
 8006042:	494f      	ldr	r1, [pc, #316]	; (8006180 <HAL_I2C_Mem_Read+0x448>)
 8006044:	68f8      	ldr	r0, [r7, #12]
 8006046:	f000 fa29 	bl	800649c <I2C_WaitOnFlagUntilTimeout>
 800604a:	4603      	mov	r3, r0
 800604c:	2b00      	cmp	r3, #0
 800604e:	d001      	beq.n	8006054 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8006050:	2301      	movs	r3, #1
 8006052:	e091      	b.n	8006178 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	681a      	ldr	r2, [r3, #0]
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006062:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	691a      	ldr	r2, [r3, #16]
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800606e:	b2d2      	uxtb	r2, r2
 8006070:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006076:	1c5a      	adds	r2, r3, #1
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006080:	3b01      	subs	r3, #1
 8006082:	b29a      	uxth	r2, r3
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800608c:	b29b      	uxth	r3, r3
 800608e:	3b01      	subs	r3, #1
 8006090:	b29a      	uxth	r2, r3
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	691a      	ldr	r2, [r3, #16]
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060a0:	b2d2      	uxtb	r2, r2
 80060a2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060a8:	1c5a      	adds	r2, r3, #1
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060b2:	3b01      	subs	r3, #1
 80060b4:	b29a      	uxth	r2, r3
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060be:	b29b      	uxth	r3, r3
 80060c0:	3b01      	subs	r3, #1
 80060c2:	b29a      	uxth	r2, r3
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80060c8:	e042      	b.n	8006150 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80060ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060cc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80060ce:	68f8      	ldr	r0, [r7, #12]
 80060d0:	f000 fb3c 	bl	800674c <I2C_WaitOnRXNEFlagUntilTimeout>
 80060d4:	4603      	mov	r3, r0
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d001      	beq.n	80060de <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80060da:	2301      	movs	r3, #1
 80060dc:	e04c      	b.n	8006178 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	691a      	ldr	r2, [r3, #16]
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060e8:	b2d2      	uxtb	r2, r2
 80060ea:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060f0:	1c5a      	adds	r2, r3, #1
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060fa:	3b01      	subs	r3, #1
 80060fc:	b29a      	uxth	r2, r3
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006106:	b29b      	uxth	r3, r3
 8006108:	3b01      	subs	r3, #1
 800610a:	b29a      	uxth	r2, r3
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	695b      	ldr	r3, [r3, #20]
 8006116:	f003 0304 	and.w	r3, r3, #4
 800611a:	2b04      	cmp	r3, #4
 800611c:	d118      	bne.n	8006150 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	691a      	ldr	r2, [r3, #16]
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006128:	b2d2      	uxtb	r2, r2
 800612a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006130:	1c5a      	adds	r2, r3, #1
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800613a:	3b01      	subs	r3, #1
 800613c:	b29a      	uxth	r2, r3
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006146:	b29b      	uxth	r3, r3
 8006148:	3b01      	subs	r3, #1
 800614a:	b29a      	uxth	r2, r3
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006154:	2b00      	cmp	r3, #0
 8006156:	f47f aec2 	bne.w	8005ede <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	2220      	movs	r2, #32
 800615e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	2200      	movs	r2, #0
 8006166:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	2200      	movs	r2, #0
 800616e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006172:	2300      	movs	r3, #0
 8006174:	e000      	b.n	8006178 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8006176:	2302      	movs	r3, #2
  }
}
 8006178:	4618      	mov	r0, r3
 800617a:	3728      	adds	r7, #40	; 0x28
 800617c:	46bd      	mov	sp, r7
 800617e:	bd80      	pop	{r7, pc}
 8006180:	00010004 	.word	0x00010004

08006184 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8006184:	b480      	push	{r7}
 8006186:	b083      	sub	sp, #12
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006192:	b2db      	uxtb	r3, r3
}
 8006194:	4618      	mov	r0, r3
 8006196:	370c      	adds	r7, #12
 8006198:	46bd      	mov	sp, r7
 800619a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619e:	4770      	bx	lr

080061a0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b088      	sub	sp, #32
 80061a4:	af02      	add	r7, sp, #8
 80061a6:	60f8      	str	r0, [r7, #12]
 80061a8:	4608      	mov	r0, r1
 80061aa:	4611      	mov	r1, r2
 80061ac:	461a      	mov	r2, r3
 80061ae:	4603      	mov	r3, r0
 80061b0:	817b      	strh	r3, [r7, #10]
 80061b2:	460b      	mov	r3, r1
 80061b4:	813b      	strh	r3, [r7, #8]
 80061b6:	4613      	mov	r3, r2
 80061b8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	681a      	ldr	r2, [r3, #0]
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80061c8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80061ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061cc:	9300      	str	r3, [sp, #0]
 80061ce:	6a3b      	ldr	r3, [r7, #32]
 80061d0:	2200      	movs	r2, #0
 80061d2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80061d6:	68f8      	ldr	r0, [r7, #12]
 80061d8:	f000 f960 	bl	800649c <I2C_WaitOnFlagUntilTimeout>
 80061dc:	4603      	mov	r3, r0
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d00d      	beq.n	80061fe <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80061f0:	d103      	bne.n	80061fa <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80061f8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80061fa:	2303      	movs	r3, #3
 80061fc:	e05f      	b.n	80062be <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80061fe:	897b      	ldrh	r3, [r7, #10]
 8006200:	b2db      	uxtb	r3, r3
 8006202:	461a      	mov	r2, r3
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800620c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800620e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006210:	6a3a      	ldr	r2, [r7, #32]
 8006212:	492d      	ldr	r1, [pc, #180]	; (80062c8 <I2C_RequestMemoryWrite+0x128>)
 8006214:	68f8      	ldr	r0, [r7, #12]
 8006216:	f000 f998 	bl	800654a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800621a:	4603      	mov	r3, r0
 800621c:	2b00      	cmp	r3, #0
 800621e:	d001      	beq.n	8006224 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006220:	2301      	movs	r3, #1
 8006222:	e04c      	b.n	80062be <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006224:	2300      	movs	r3, #0
 8006226:	617b      	str	r3, [r7, #20]
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	695b      	ldr	r3, [r3, #20]
 800622e:	617b      	str	r3, [r7, #20]
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	699b      	ldr	r3, [r3, #24]
 8006236:	617b      	str	r3, [r7, #20]
 8006238:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800623a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800623c:	6a39      	ldr	r1, [r7, #32]
 800623e:	68f8      	ldr	r0, [r7, #12]
 8006240:	f000 fa02 	bl	8006648 <I2C_WaitOnTXEFlagUntilTimeout>
 8006244:	4603      	mov	r3, r0
 8006246:	2b00      	cmp	r3, #0
 8006248:	d00d      	beq.n	8006266 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800624e:	2b04      	cmp	r3, #4
 8006250:	d107      	bne.n	8006262 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	681a      	ldr	r2, [r3, #0]
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006260:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006262:	2301      	movs	r3, #1
 8006264:	e02b      	b.n	80062be <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006266:	88fb      	ldrh	r3, [r7, #6]
 8006268:	2b01      	cmp	r3, #1
 800626a:	d105      	bne.n	8006278 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800626c:	893b      	ldrh	r3, [r7, #8]
 800626e:	b2da      	uxtb	r2, r3
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	611a      	str	r2, [r3, #16]
 8006276:	e021      	b.n	80062bc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006278:	893b      	ldrh	r3, [r7, #8]
 800627a:	0a1b      	lsrs	r3, r3, #8
 800627c:	b29b      	uxth	r3, r3
 800627e:	b2da      	uxtb	r2, r3
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006286:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006288:	6a39      	ldr	r1, [r7, #32]
 800628a:	68f8      	ldr	r0, [r7, #12]
 800628c:	f000 f9dc 	bl	8006648 <I2C_WaitOnTXEFlagUntilTimeout>
 8006290:	4603      	mov	r3, r0
 8006292:	2b00      	cmp	r3, #0
 8006294:	d00d      	beq.n	80062b2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800629a:	2b04      	cmp	r3, #4
 800629c:	d107      	bne.n	80062ae <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	681a      	ldr	r2, [r3, #0]
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80062ac:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80062ae:	2301      	movs	r3, #1
 80062b0:	e005      	b.n	80062be <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80062b2:	893b      	ldrh	r3, [r7, #8]
 80062b4:	b2da      	uxtb	r2, r3
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80062bc:	2300      	movs	r3, #0
}
 80062be:	4618      	mov	r0, r3
 80062c0:	3718      	adds	r7, #24
 80062c2:	46bd      	mov	sp, r7
 80062c4:	bd80      	pop	{r7, pc}
 80062c6:	bf00      	nop
 80062c8:	00010002 	.word	0x00010002

080062cc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b088      	sub	sp, #32
 80062d0:	af02      	add	r7, sp, #8
 80062d2:	60f8      	str	r0, [r7, #12]
 80062d4:	4608      	mov	r0, r1
 80062d6:	4611      	mov	r1, r2
 80062d8:	461a      	mov	r2, r3
 80062da:	4603      	mov	r3, r0
 80062dc:	817b      	strh	r3, [r7, #10]
 80062de:	460b      	mov	r3, r1
 80062e0:	813b      	strh	r3, [r7, #8]
 80062e2:	4613      	mov	r3, r2
 80062e4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	681a      	ldr	r2, [r3, #0]
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80062f4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	681a      	ldr	r2, [r3, #0]
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006304:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006308:	9300      	str	r3, [sp, #0]
 800630a:	6a3b      	ldr	r3, [r7, #32]
 800630c:	2200      	movs	r2, #0
 800630e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006312:	68f8      	ldr	r0, [r7, #12]
 8006314:	f000 f8c2 	bl	800649c <I2C_WaitOnFlagUntilTimeout>
 8006318:	4603      	mov	r3, r0
 800631a:	2b00      	cmp	r3, #0
 800631c:	d00d      	beq.n	800633a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006328:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800632c:	d103      	bne.n	8006336 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006334:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006336:	2303      	movs	r3, #3
 8006338:	e0aa      	b.n	8006490 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800633a:	897b      	ldrh	r3, [r7, #10]
 800633c:	b2db      	uxtb	r3, r3
 800633e:	461a      	mov	r2, r3
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006348:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800634a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800634c:	6a3a      	ldr	r2, [r7, #32]
 800634e:	4952      	ldr	r1, [pc, #328]	; (8006498 <I2C_RequestMemoryRead+0x1cc>)
 8006350:	68f8      	ldr	r0, [r7, #12]
 8006352:	f000 f8fa 	bl	800654a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006356:	4603      	mov	r3, r0
 8006358:	2b00      	cmp	r3, #0
 800635a:	d001      	beq.n	8006360 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800635c:	2301      	movs	r3, #1
 800635e:	e097      	b.n	8006490 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006360:	2300      	movs	r3, #0
 8006362:	617b      	str	r3, [r7, #20]
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	695b      	ldr	r3, [r3, #20]
 800636a:	617b      	str	r3, [r7, #20]
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	699b      	ldr	r3, [r3, #24]
 8006372:	617b      	str	r3, [r7, #20]
 8006374:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006376:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006378:	6a39      	ldr	r1, [r7, #32]
 800637a:	68f8      	ldr	r0, [r7, #12]
 800637c:	f000 f964 	bl	8006648 <I2C_WaitOnTXEFlagUntilTimeout>
 8006380:	4603      	mov	r3, r0
 8006382:	2b00      	cmp	r3, #0
 8006384:	d00d      	beq.n	80063a2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800638a:	2b04      	cmp	r3, #4
 800638c:	d107      	bne.n	800639e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	681a      	ldr	r2, [r3, #0]
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800639c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800639e:	2301      	movs	r3, #1
 80063a0:	e076      	b.n	8006490 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80063a2:	88fb      	ldrh	r3, [r7, #6]
 80063a4:	2b01      	cmp	r3, #1
 80063a6:	d105      	bne.n	80063b4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80063a8:	893b      	ldrh	r3, [r7, #8]
 80063aa:	b2da      	uxtb	r2, r3
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	611a      	str	r2, [r3, #16]
 80063b2:	e021      	b.n	80063f8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80063b4:	893b      	ldrh	r3, [r7, #8]
 80063b6:	0a1b      	lsrs	r3, r3, #8
 80063b8:	b29b      	uxth	r3, r3
 80063ba:	b2da      	uxtb	r2, r3
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80063c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063c4:	6a39      	ldr	r1, [r7, #32]
 80063c6:	68f8      	ldr	r0, [r7, #12]
 80063c8:	f000 f93e 	bl	8006648 <I2C_WaitOnTXEFlagUntilTimeout>
 80063cc:	4603      	mov	r3, r0
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d00d      	beq.n	80063ee <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063d6:	2b04      	cmp	r3, #4
 80063d8:	d107      	bne.n	80063ea <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	681a      	ldr	r2, [r3, #0]
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80063e8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80063ea:	2301      	movs	r3, #1
 80063ec:	e050      	b.n	8006490 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80063ee:	893b      	ldrh	r3, [r7, #8]
 80063f0:	b2da      	uxtb	r2, r3
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80063f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063fa:	6a39      	ldr	r1, [r7, #32]
 80063fc:	68f8      	ldr	r0, [r7, #12]
 80063fe:	f000 f923 	bl	8006648 <I2C_WaitOnTXEFlagUntilTimeout>
 8006402:	4603      	mov	r3, r0
 8006404:	2b00      	cmp	r3, #0
 8006406:	d00d      	beq.n	8006424 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800640c:	2b04      	cmp	r3, #4
 800640e:	d107      	bne.n	8006420 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	681a      	ldr	r2, [r3, #0]
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800641e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006420:	2301      	movs	r3, #1
 8006422:	e035      	b.n	8006490 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	681a      	ldr	r2, [r3, #0]
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006432:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006436:	9300      	str	r3, [sp, #0]
 8006438:	6a3b      	ldr	r3, [r7, #32]
 800643a:	2200      	movs	r2, #0
 800643c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006440:	68f8      	ldr	r0, [r7, #12]
 8006442:	f000 f82b 	bl	800649c <I2C_WaitOnFlagUntilTimeout>
 8006446:	4603      	mov	r3, r0
 8006448:	2b00      	cmp	r3, #0
 800644a:	d00d      	beq.n	8006468 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006456:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800645a:	d103      	bne.n	8006464 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006462:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006464:	2303      	movs	r3, #3
 8006466:	e013      	b.n	8006490 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006468:	897b      	ldrh	r3, [r7, #10]
 800646a:	b2db      	uxtb	r3, r3
 800646c:	f043 0301 	orr.w	r3, r3, #1
 8006470:	b2da      	uxtb	r2, r3
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800647a:	6a3a      	ldr	r2, [r7, #32]
 800647c:	4906      	ldr	r1, [pc, #24]	; (8006498 <I2C_RequestMemoryRead+0x1cc>)
 800647e:	68f8      	ldr	r0, [r7, #12]
 8006480:	f000 f863 	bl	800654a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006484:	4603      	mov	r3, r0
 8006486:	2b00      	cmp	r3, #0
 8006488:	d001      	beq.n	800648e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800648a:	2301      	movs	r3, #1
 800648c:	e000      	b.n	8006490 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800648e:	2300      	movs	r3, #0
}
 8006490:	4618      	mov	r0, r3
 8006492:	3718      	adds	r7, #24
 8006494:	46bd      	mov	sp, r7
 8006496:	bd80      	pop	{r7, pc}
 8006498:	00010002 	.word	0x00010002

0800649c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b084      	sub	sp, #16
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	60f8      	str	r0, [r7, #12]
 80064a4:	60b9      	str	r1, [r7, #8]
 80064a6:	603b      	str	r3, [r7, #0]
 80064a8:	4613      	mov	r3, r2
 80064aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80064ac:	e025      	b.n	80064fa <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064b4:	d021      	beq.n	80064fa <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80064b6:	f7fd fc75 	bl	8003da4 <HAL_GetTick>
 80064ba:	4602      	mov	r2, r0
 80064bc:	69bb      	ldr	r3, [r7, #24]
 80064be:	1ad3      	subs	r3, r2, r3
 80064c0:	683a      	ldr	r2, [r7, #0]
 80064c2:	429a      	cmp	r2, r3
 80064c4:	d302      	bcc.n	80064cc <I2C_WaitOnFlagUntilTimeout+0x30>
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d116      	bne.n	80064fa <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	2200      	movs	r2, #0
 80064d0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	2220      	movs	r2, #32
 80064d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	2200      	movs	r2, #0
 80064de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064e6:	f043 0220 	orr.w	r2, r3, #32
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	2200      	movs	r2, #0
 80064f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80064f6:	2301      	movs	r3, #1
 80064f8:	e023      	b.n	8006542 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80064fa:	68bb      	ldr	r3, [r7, #8]
 80064fc:	0c1b      	lsrs	r3, r3, #16
 80064fe:	b2db      	uxtb	r3, r3
 8006500:	2b01      	cmp	r3, #1
 8006502:	d10d      	bne.n	8006520 <I2C_WaitOnFlagUntilTimeout+0x84>
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	695b      	ldr	r3, [r3, #20]
 800650a:	43da      	mvns	r2, r3
 800650c:	68bb      	ldr	r3, [r7, #8]
 800650e:	4013      	ands	r3, r2
 8006510:	b29b      	uxth	r3, r3
 8006512:	2b00      	cmp	r3, #0
 8006514:	bf0c      	ite	eq
 8006516:	2301      	moveq	r3, #1
 8006518:	2300      	movne	r3, #0
 800651a:	b2db      	uxtb	r3, r3
 800651c:	461a      	mov	r2, r3
 800651e:	e00c      	b.n	800653a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	699b      	ldr	r3, [r3, #24]
 8006526:	43da      	mvns	r2, r3
 8006528:	68bb      	ldr	r3, [r7, #8]
 800652a:	4013      	ands	r3, r2
 800652c:	b29b      	uxth	r3, r3
 800652e:	2b00      	cmp	r3, #0
 8006530:	bf0c      	ite	eq
 8006532:	2301      	moveq	r3, #1
 8006534:	2300      	movne	r3, #0
 8006536:	b2db      	uxtb	r3, r3
 8006538:	461a      	mov	r2, r3
 800653a:	79fb      	ldrb	r3, [r7, #7]
 800653c:	429a      	cmp	r2, r3
 800653e:	d0b6      	beq.n	80064ae <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006540:	2300      	movs	r3, #0
}
 8006542:	4618      	mov	r0, r3
 8006544:	3710      	adds	r7, #16
 8006546:	46bd      	mov	sp, r7
 8006548:	bd80      	pop	{r7, pc}

0800654a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800654a:	b580      	push	{r7, lr}
 800654c:	b084      	sub	sp, #16
 800654e:	af00      	add	r7, sp, #0
 8006550:	60f8      	str	r0, [r7, #12]
 8006552:	60b9      	str	r1, [r7, #8]
 8006554:	607a      	str	r2, [r7, #4]
 8006556:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006558:	e051      	b.n	80065fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	695b      	ldr	r3, [r3, #20]
 8006560:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006564:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006568:	d123      	bne.n	80065b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	681a      	ldr	r2, [r3, #0]
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006578:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006582:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	2200      	movs	r2, #0
 8006588:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	2220      	movs	r2, #32
 800658e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	2200      	movs	r2, #0
 8006596:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800659e:	f043 0204 	orr.w	r2, r3, #4
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	2200      	movs	r2, #0
 80065aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80065ae:	2301      	movs	r3, #1
 80065b0:	e046      	b.n	8006640 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065b8:	d021      	beq.n	80065fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80065ba:	f7fd fbf3 	bl	8003da4 <HAL_GetTick>
 80065be:	4602      	mov	r2, r0
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	1ad3      	subs	r3, r2, r3
 80065c4:	687a      	ldr	r2, [r7, #4]
 80065c6:	429a      	cmp	r2, r3
 80065c8:	d302      	bcc.n	80065d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d116      	bne.n	80065fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	2200      	movs	r2, #0
 80065d4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	2220      	movs	r2, #32
 80065da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	2200      	movs	r2, #0
 80065e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065ea:	f043 0220 	orr.w	r2, r3, #32
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	2200      	movs	r2, #0
 80065f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80065fa:	2301      	movs	r3, #1
 80065fc:	e020      	b.n	8006640 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80065fe:	68bb      	ldr	r3, [r7, #8]
 8006600:	0c1b      	lsrs	r3, r3, #16
 8006602:	b2db      	uxtb	r3, r3
 8006604:	2b01      	cmp	r3, #1
 8006606:	d10c      	bne.n	8006622 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	695b      	ldr	r3, [r3, #20]
 800660e:	43da      	mvns	r2, r3
 8006610:	68bb      	ldr	r3, [r7, #8]
 8006612:	4013      	ands	r3, r2
 8006614:	b29b      	uxth	r3, r3
 8006616:	2b00      	cmp	r3, #0
 8006618:	bf14      	ite	ne
 800661a:	2301      	movne	r3, #1
 800661c:	2300      	moveq	r3, #0
 800661e:	b2db      	uxtb	r3, r3
 8006620:	e00b      	b.n	800663a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	699b      	ldr	r3, [r3, #24]
 8006628:	43da      	mvns	r2, r3
 800662a:	68bb      	ldr	r3, [r7, #8]
 800662c:	4013      	ands	r3, r2
 800662e:	b29b      	uxth	r3, r3
 8006630:	2b00      	cmp	r3, #0
 8006632:	bf14      	ite	ne
 8006634:	2301      	movne	r3, #1
 8006636:	2300      	moveq	r3, #0
 8006638:	b2db      	uxtb	r3, r3
 800663a:	2b00      	cmp	r3, #0
 800663c:	d18d      	bne.n	800655a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800663e:	2300      	movs	r3, #0
}
 8006640:	4618      	mov	r0, r3
 8006642:	3710      	adds	r7, #16
 8006644:	46bd      	mov	sp, r7
 8006646:	bd80      	pop	{r7, pc}

08006648 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006648:	b580      	push	{r7, lr}
 800664a:	b084      	sub	sp, #16
 800664c:	af00      	add	r7, sp, #0
 800664e:	60f8      	str	r0, [r7, #12]
 8006650:	60b9      	str	r1, [r7, #8]
 8006652:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006654:	e02d      	b.n	80066b2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006656:	68f8      	ldr	r0, [r7, #12]
 8006658:	f000 f8ce 	bl	80067f8 <I2C_IsAcknowledgeFailed>
 800665c:	4603      	mov	r3, r0
 800665e:	2b00      	cmp	r3, #0
 8006660:	d001      	beq.n	8006666 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006662:	2301      	movs	r3, #1
 8006664:	e02d      	b.n	80066c2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006666:	68bb      	ldr	r3, [r7, #8]
 8006668:	f1b3 3fff 	cmp.w	r3, #4294967295
 800666c:	d021      	beq.n	80066b2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800666e:	f7fd fb99 	bl	8003da4 <HAL_GetTick>
 8006672:	4602      	mov	r2, r0
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	1ad3      	subs	r3, r2, r3
 8006678:	68ba      	ldr	r2, [r7, #8]
 800667a:	429a      	cmp	r2, r3
 800667c:	d302      	bcc.n	8006684 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800667e:	68bb      	ldr	r3, [r7, #8]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d116      	bne.n	80066b2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	2200      	movs	r2, #0
 8006688:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	2220      	movs	r2, #32
 800668e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	2200      	movs	r2, #0
 8006696:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800669e:	f043 0220 	orr.w	r2, r3, #32
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	2200      	movs	r2, #0
 80066aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80066ae:	2301      	movs	r3, #1
 80066b0:	e007      	b.n	80066c2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	695b      	ldr	r3, [r3, #20]
 80066b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066bc:	2b80      	cmp	r3, #128	; 0x80
 80066be:	d1ca      	bne.n	8006656 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80066c0:	2300      	movs	r3, #0
}
 80066c2:	4618      	mov	r0, r3
 80066c4:	3710      	adds	r7, #16
 80066c6:	46bd      	mov	sp, r7
 80066c8:	bd80      	pop	{r7, pc}

080066ca <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80066ca:	b580      	push	{r7, lr}
 80066cc:	b084      	sub	sp, #16
 80066ce:	af00      	add	r7, sp, #0
 80066d0:	60f8      	str	r0, [r7, #12]
 80066d2:	60b9      	str	r1, [r7, #8]
 80066d4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80066d6:	e02d      	b.n	8006734 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80066d8:	68f8      	ldr	r0, [r7, #12]
 80066da:	f000 f88d 	bl	80067f8 <I2C_IsAcknowledgeFailed>
 80066de:	4603      	mov	r3, r0
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d001      	beq.n	80066e8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80066e4:	2301      	movs	r3, #1
 80066e6:	e02d      	b.n	8006744 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80066e8:	68bb      	ldr	r3, [r7, #8]
 80066ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066ee:	d021      	beq.n	8006734 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066f0:	f7fd fb58 	bl	8003da4 <HAL_GetTick>
 80066f4:	4602      	mov	r2, r0
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	1ad3      	subs	r3, r2, r3
 80066fa:	68ba      	ldr	r2, [r7, #8]
 80066fc:	429a      	cmp	r2, r3
 80066fe:	d302      	bcc.n	8006706 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006700:	68bb      	ldr	r3, [r7, #8]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d116      	bne.n	8006734 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	2200      	movs	r2, #0
 800670a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	2220      	movs	r2, #32
 8006710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	2200      	movs	r2, #0
 8006718:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006720:	f043 0220 	orr.w	r2, r3, #32
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	2200      	movs	r2, #0
 800672c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006730:	2301      	movs	r3, #1
 8006732:	e007      	b.n	8006744 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	695b      	ldr	r3, [r3, #20]
 800673a:	f003 0304 	and.w	r3, r3, #4
 800673e:	2b04      	cmp	r3, #4
 8006740:	d1ca      	bne.n	80066d8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006742:	2300      	movs	r3, #0
}
 8006744:	4618      	mov	r0, r3
 8006746:	3710      	adds	r7, #16
 8006748:	46bd      	mov	sp, r7
 800674a:	bd80      	pop	{r7, pc}

0800674c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800674c:	b580      	push	{r7, lr}
 800674e:	b084      	sub	sp, #16
 8006750:	af00      	add	r7, sp, #0
 8006752:	60f8      	str	r0, [r7, #12]
 8006754:	60b9      	str	r1, [r7, #8]
 8006756:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006758:	e042      	b.n	80067e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	695b      	ldr	r3, [r3, #20]
 8006760:	f003 0310 	and.w	r3, r3, #16
 8006764:	2b10      	cmp	r3, #16
 8006766:	d119      	bne.n	800679c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f06f 0210 	mvn.w	r2, #16
 8006770:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	2200      	movs	r2, #0
 8006776:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	2220      	movs	r2, #32
 800677c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	2200      	movs	r2, #0
 8006784:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	2200      	movs	r2, #0
 8006794:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006798:	2301      	movs	r3, #1
 800679a:	e029      	b.n	80067f0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800679c:	f7fd fb02 	bl	8003da4 <HAL_GetTick>
 80067a0:	4602      	mov	r2, r0
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	1ad3      	subs	r3, r2, r3
 80067a6:	68ba      	ldr	r2, [r7, #8]
 80067a8:	429a      	cmp	r2, r3
 80067aa:	d302      	bcc.n	80067b2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80067ac:	68bb      	ldr	r3, [r7, #8]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d116      	bne.n	80067e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	2200      	movs	r2, #0
 80067b6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	2220      	movs	r2, #32
 80067bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	2200      	movs	r2, #0
 80067c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067cc:	f043 0220 	orr.w	r2, r3, #32
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	2200      	movs	r2, #0
 80067d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80067dc:	2301      	movs	r3, #1
 80067de:	e007      	b.n	80067f0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	695b      	ldr	r3, [r3, #20]
 80067e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067ea:	2b40      	cmp	r3, #64	; 0x40
 80067ec:	d1b5      	bne.n	800675a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80067ee:	2300      	movs	r3, #0
}
 80067f0:	4618      	mov	r0, r3
 80067f2:	3710      	adds	r7, #16
 80067f4:	46bd      	mov	sp, r7
 80067f6:	bd80      	pop	{r7, pc}

080067f8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80067f8:	b480      	push	{r7}
 80067fa:	b083      	sub	sp, #12
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	695b      	ldr	r3, [r3, #20]
 8006806:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800680a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800680e:	d11b      	bne.n	8006848 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006818:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2200      	movs	r2, #0
 800681e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2220      	movs	r2, #32
 8006824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2200      	movs	r2, #0
 800682c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006834:	f043 0204 	orr.w	r2, r3, #4
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2200      	movs	r2, #0
 8006840:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006844:	2301      	movs	r3, #1
 8006846:	e000      	b.n	800684a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006848:	2300      	movs	r3, #0
}
 800684a:	4618      	mov	r0, r3
 800684c:	370c      	adds	r7, #12
 800684e:	46bd      	mov	sp, r7
 8006850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006854:	4770      	bx	lr

08006856 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006856:	b480      	push	{r7}
 8006858:	b083      	sub	sp, #12
 800685a:	af00      	add	r7, sp, #0
 800685c:	6078      	str	r0, [r7, #4]
 800685e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006866:	b2db      	uxtb	r3, r3
 8006868:	2b20      	cmp	r3, #32
 800686a:	d129      	bne.n	80068c0 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2224      	movs	r2, #36	; 0x24
 8006870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	681a      	ldr	r2, [r3, #0]
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f022 0201 	bic.w	r2, r2, #1
 8006882:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f022 0210 	bic.w	r2, r2, #16
 8006892:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	683a      	ldr	r2, [r7, #0]
 80068a0:	430a      	orrs	r2, r1
 80068a2:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	681a      	ldr	r2, [r3, #0]
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f042 0201 	orr.w	r2, r2, #1
 80068b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2220      	movs	r2, #32
 80068b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80068bc:	2300      	movs	r3, #0
 80068be:	e000      	b.n	80068c2 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80068c0:	2302      	movs	r3, #2
  }
}
 80068c2:	4618      	mov	r0, r3
 80068c4:	370c      	adds	r7, #12
 80068c6:	46bd      	mov	sp, r7
 80068c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068cc:	4770      	bx	lr

080068ce <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80068ce:	b480      	push	{r7}
 80068d0:	b085      	sub	sp, #20
 80068d2:	af00      	add	r7, sp, #0
 80068d4:	6078      	str	r0, [r7, #4]
 80068d6:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80068d8:	2300      	movs	r3, #0
 80068da:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068e2:	b2db      	uxtb	r3, r3
 80068e4:	2b20      	cmp	r3, #32
 80068e6:	d12a      	bne.n	800693e <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2224      	movs	r2, #36	; 0x24
 80068ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	681a      	ldr	r2, [r3, #0]
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f022 0201 	bic.w	r2, r2, #1
 80068fe:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006906:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8006908:	89fb      	ldrh	r3, [r7, #14]
 800690a:	f023 030f 	bic.w	r3, r3, #15
 800690e:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	b29a      	uxth	r2, r3
 8006914:	89fb      	ldrh	r3, [r7, #14]
 8006916:	4313      	orrs	r3, r2
 8006918:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	89fa      	ldrh	r2, [r7, #14]
 8006920:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	681a      	ldr	r2, [r3, #0]
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f042 0201 	orr.w	r2, r2, #1
 8006930:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	2220      	movs	r2, #32
 8006936:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800693a:	2300      	movs	r3, #0
 800693c:	e000      	b.n	8006940 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 800693e:	2302      	movs	r3, #2
  }
}
 8006940:	4618      	mov	r0, r3
 8006942:	3714      	adds	r7, #20
 8006944:	46bd      	mov	sp, r7
 8006946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694a:	4770      	bx	lr

0800694c <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b084      	sub	sp, #16
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d101      	bne.n	800695e <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800695a:	2301      	movs	r3, #1
 800695c:	e0bf      	b.n	8006ade <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8006964:	b2db      	uxtb	r3, r3
 8006966:	2b00      	cmp	r3, #0
 8006968:	d106      	bne.n	8006978 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	2200      	movs	r2, #0
 800696e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8006972:	6878      	ldr	r0, [r7, #4]
 8006974:	f7fa fb96 	bl	80010a4 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2202      	movs	r2, #2
 800697c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	699a      	ldr	r2, [r3, #24]
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800698e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	6999      	ldr	r1, [r3, #24]
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	685a      	ldr	r2, [r3, #4]
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	689b      	ldr	r3, [r3, #8]
 800699e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80069a4:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	691b      	ldr	r3, [r3, #16]
 80069aa:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	430a      	orrs	r2, r1
 80069b2:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	6899      	ldr	r1, [r3, #8]
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681a      	ldr	r2, [r3, #0]
 80069be:	4b4a      	ldr	r3, [pc, #296]	; (8006ae8 <HAL_LTDC_Init+0x19c>)
 80069c0:	400b      	ands	r3, r1
 80069c2:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	695b      	ldr	r3, [r3, #20]
 80069c8:	041b      	lsls	r3, r3, #16
 80069ca:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	6899      	ldr	r1, [r3, #8]
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	699a      	ldr	r2, [r3, #24]
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	431a      	orrs	r2, r3
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	430a      	orrs	r2, r1
 80069e0:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	68d9      	ldr	r1, [r3, #12]
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681a      	ldr	r2, [r3, #0]
 80069ec:	4b3e      	ldr	r3, [pc, #248]	; (8006ae8 <HAL_LTDC_Init+0x19c>)
 80069ee:	400b      	ands	r3, r1
 80069f0:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	69db      	ldr	r3, [r3, #28]
 80069f6:	041b      	lsls	r3, r3, #16
 80069f8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	68d9      	ldr	r1, [r3, #12]
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	6a1a      	ldr	r2, [r3, #32]
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	431a      	orrs	r2, r3
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	430a      	orrs	r2, r1
 8006a0e:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	6919      	ldr	r1, [r3, #16]
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681a      	ldr	r2, [r3, #0]
 8006a1a:	4b33      	ldr	r3, [pc, #204]	; (8006ae8 <HAL_LTDC_Init+0x19c>)
 8006a1c:	400b      	ands	r3, r1
 8006a1e:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a24:	041b      	lsls	r3, r3, #16
 8006a26:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	6919      	ldr	r1, [r3, #16]
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	431a      	orrs	r2, r3
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	430a      	orrs	r2, r1
 8006a3c:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	6959      	ldr	r1, [r3, #20]
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681a      	ldr	r2, [r3, #0]
 8006a48:	4b27      	ldr	r3, [pc, #156]	; (8006ae8 <HAL_LTDC_Init+0x19c>)
 8006a4a:	400b      	ands	r3, r1
 8006a4c:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a52:	041b      	lsls	r3, r3, #16
 8006a54:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	6959      	ldr	r1, [r3, #20]
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	431a      	orrs	r2, r3
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	430a      	orrs	r2, r1
 8006a6a:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006a72:	021b      	lsls	r3, r3, #8
 8006a74:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8006a7c:	041b      	lsls	r3, r3, #16
 8006a7e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8006a8e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006a96:	68ba      	ldr	r2, [r7, #8]
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	4313      	orrs	r3, r2
 8006a9c:	687a      	ldr	r2, [r7, #4]
 8006a9e:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8006aa2:	431a      	orrs	r2, r3
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	430a      	orrs	r2, r1
 8006aaa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f042 0206 	orr.w	r2, r2, #6
 8006aba:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	699a      	ldr	r2, [r3, #24]
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f042 0201 	orr.w	r2, r2, #1
 8006aca:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2200      	movs	r2, #0
 8006ad0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2201      	movs	r2, #1
 8006ad8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8006adc:	2300      	movs	r3, #0
}
 8006ade:	4618      	mov	r0, r3
 8006ae0:	3710      	adds	r7, #16
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	bd80      	pop	{r7, pc}
 8006ae6:	bf00      	nop
 8006ae8:	f000f800 	.word	0xf000f800

08006aec <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006aec:	b5b0      	push	{r4, r5, r7, lr}
 8006aee:	b084      	sub	sp, #16
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	60f8      	str	r0, [r7, #12]
 8006af4:	60b9      	str	r1, [r7, #8]
 8006af6:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8006afe:	2b01      	cmp	r3, #1
 8006b00:	d101      	bne.n	8006b06 <HAL_LTDC_ConfigLayer+0x1a>
 8006b02:	2302      	movs	r3, #2
 8006b04:	e02c      	b.n	8006b60 <HAL_LTDC_ConfigLayer+0x74>
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	2201      	movs	r2, #1
 8006b0a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	2202      	movs	r2, #2
 8006b12:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8006b16:	68fa      	ldr	r2, [r7, #12]
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2134      	movs	r1, #52	; 0x34
 8006b1c:	fb01 f303 	mul.w	r3, r1, r3
 8006b20:	4413      	add	r3, r2
 8006b22:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8006b26:	68bb      	ldr	r3, [r7, #8]
 8006b28:	4614      	mov	r4, r2
 8006b2a:	461d      	mov	r5, r3
 8006b2c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006b2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006b30:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006b32:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006b34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006b36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006b38:	682b      	ldr	r3, [r5, #0]
 8006b3a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8006b3c:	687a      	ldr	r2, [r7, #4]
 8006b3e:	68b9      	ldr	r1, [r7, #8]
 8006b40:	68f8      	ldr	r0, [r7, #12]
 8006b42:	f000 f83b 	bl	8006bbc <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	2201      	movs	r2, #1
 8006b4c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	2201      	movs	r2, #1
 8006b52:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	2200      	movs	r2, #0
 8006b5a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8006b5e:	2300      	movs	r3, #0
}
 8006b60:	4618      	mov	r0, r3
 8006b62:	3710      	adds	r7, #16
 8006b64:	46bd      	mov	sp, r7
 8006b66:	bdb0      	pop	{r4, r5, r7, pc}

08006b68 <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 8006b68:	b480      	push	{r7}
 8006b6a:	b083      	sub	sp, #12
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8006b76:	2b01      	cmp	r3, #1
 8006b78:	d101      	bne.n	8006b7e <HAL_LTDC_EnableDither+0x16>
 8006b7a:	2302      	movs	r3, #2
 8006b7c:	e016      	b.n	8006bac <HAL_LTDC_EnableDither+0x44>
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	2201      	movs	r2, #1
 8006b82:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2202      	movs	r2, #2
 8006b8a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 8006b8e:	4b0a      	ldr	r3, [pc, #40]	; (8006bb8 <HAL_LTDC_EnableDither+0x50>)
 8006b90:	699b      	ldr	r3, [r3, #24]
 8006b92:	4a09      	ldr	r2, [pc, #36]	; (8006bb8 <HAL_LTDC_EnableDither+0x50>)
 8006b94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b98:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	2201      	movs	r2, #1
 8006b9e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8006baa:	2300      	movs	r3, #0
}
 8006bac:	4618      	mov	r0, r3
 8006bae:	370c      	adds	r7, #12
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb6:	4770      	bx	lr
 8006bb8:	40016800 	.word	0x40016800

08006bbc <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006bbc:	b480      	push	{r7}
 8006bbe:	b089      	sub	sp, #36	; 0x24
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	60f8      	str	r0, [r7, #12]
 8006bc4:	60b9      	str	r1, [r7, #8]
 8006bc6:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8006bc8:	68bb      	ldr	r3, [r7, #8]
 8006bca:	685a      	ldr	r2, [r3, #4]
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	68db      	ldr	r3, [r3, #12]
 8006bd2:	0c1b      	lsrs	r3, r3, #16
 8006bd4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006bd8:	4413      	add	r3, r2
 8006bda:	041b      	lsls	r3, r3, #16
 8006bdc:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	461a      	mov	r2, r3
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	01db      	lsls	r3, r3, #7
 8006be8:	4413      	add	r3, r2
 8006bea:	3384      	adds	r3, #132	; 0x84
 8006bec:	685b      	ldr	r3, [r3, #4]
 8006bee:	68fa      	ldr	r2, [r7, #12]
 8006bf0:	6812      	ldr	r2, [r2, #0]
 8006bf2:	4611      	mov	r1, r2
 8006bf4:	687a      	ldr	r2, [r7, #4]
 8006bf6:	01d2      	lsls	r2, r2, #7
 8006bf8:	440a      	add	r2, r1
 8006bfa:	3284      	adds	r2, #132	; 0x84
 8006bfc:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006c00:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006c02:	68bb      	ldr	r3, [r7, #8]
 8006c04:	681a      	ldr	r2, [r3, #0]
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	68db      	ldr	r3, [r3, #12]
 8006c0c:	0c1b      	lsrs	r3, r3, #16
 8006c0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006c12:	4413      	add	r3, r2
 8006c14:	1c5a      	adds	r2, r3, #1
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	4619      	mov	r1, r3
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	01db      	lsls	r3, r3, #7
 8006c20:	440b      	add	r3, r1
 8006c22:	3384      	adds	r3, #132	; 0x84
 8006c24:	4619      	mov	r1, r3
 8006c26:	69fb      	ldr	r3, [r7, #28]
 8006c28:	4313      	orrs	r3, r2
 8006c2a:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8006c2c:	68bb      	ldr	r3, [r7, #8]
 8006c2e:	68da      	ldr	r2, [r3, #12]
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	68db      	ldr	r3, [r3, #12]
 8006c36:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006c3a:	4413      	add	r3, r2
 8006c3c:	041b      	lsls	r3, r3, #16
 8006c3e:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	461a      	mov	r2, r3
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	01db      	lsls	r3, r3, #7
 8006c4a:	4413      	add	r3, r2
 8006c4c:	3384      	adds	r3, #132	; 0x84
 8006c4e:	689b      	ldr	r3, [r3, #8]
 8006c50:	68fa      	ldr	r2, [r7, #12]
 8006c52:	6812      	ldr	r2, [r2, #0]
 8006c54:	4611      	mov	r1, r2
 8006c56:	687a      	ldr	r2, [r7, #4]
 8006c58:	01d2      	lsls	r2, r2, #7
 8006c5a:	440a      	add	r2, r1
 8006c5c:	3284      	adds	r2, #132	; 0x84
 8006c5e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006c62:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8006c64:	68bb      	ldr	r3, [r7, #8]
 8006c66:	689a      	ldr	r2, [r3, #8]
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	68db      	ldr	r3, [r3, #12]
 8006c6e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006c72:	4413      	add	r3, r2
 8006c74:	1c5a      	adds	r2, r3, #1
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	4619      	mov	r1, r3
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	01db      	lsls	r3, r3, #7
 8006c80:	440b      	add	r3, r1
 8006c82:	3384      	adds	r3, #132	; 0x84
 8006c84:	4619      	mov	r1, r3
 8006c86:	69fb      	ldr	r3, [r7, #28]
 8006c88:	4313      	orrs	r3, r2
 8006c8a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	461a      	mov	r2, r3
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	01db      	lsls	r3, r3, #7
 8006c96:	4413      	add	r3, r2
 8006c98:	3384      	adds	r3, #132	; 0x84
 8006c9a:	691b      	ldr	r3, [r3, #16]
 8006c9c:	68fa      	ldr	r2, [r7, #12]
 8006c9e:	6812      	ldr	r2, [r2, #0]
 8006ca0:	4611      	mov	r1, r2
 8006ca2:	687a      	ldr	r2, [r7, #4]
 8006ca4:	01d2      	lsls	r2, r2, #7
 8006ca6:	440a      	add	r2, r1
 8006ca8:	3284      	adds	r2, #132	; 0x84
 8006caa:	f023 0307 	bic.w	r3, r3, #7
 8006cae:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	461a      	mov	r2, r3
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	01db      	lsls	r3, r3, #7
 8006cba:	4413      	add	r3, r2
 8006cbc:	3384      	adds	r3, #132	; 0x84
 8006cbe:	461a      	mov	r2, r3
 8006cc0:	68bb      	ldr	r3, [r7, #8]
 8006cc2:	691b      	ldr	r3, [r3, #16]
 8006cc4:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8006cc6:	68bb      	ldr	r3, [r7, #8]
 8006cc8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006ccc:	021b      	lsls	r3, r3, #8
 8006cce:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8006cd0:	68bb      	ldr	r3, [r7, #8]
 8006cd2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8006cd6:	041b      	lsls	r3, r3, #16
 8006cd8:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8006cda:	68bb      	ldr	r3, [r7, #8]
 8006cdc:	699b      	ldr	r3, [r3, #24]
 8006cde:	061b      	lsls	r3, r3, #24
 8006ce0:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	461a      	mov	r2, r3
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	01db      	lsls	r3, r3, #7
 8006cec:	4413      	add	r3, r2
 8006cee:	3384      	adds	r3, #132	; 0x84
 8006cf0:	699b      	ldr	r3, [r3, #24]
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	461a      	mov	r2, r3
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	01db      	lsls	r3, r3, #7
 8006cfc:	4413      	add	r3, r2
 8006cfe:	3384      	adds	r3, #132	; 0x84
 8006d00:	461a      	mov	r2, r3
 8006d02:	2300      	movs	r3, #0
 8006d04:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8006d06:	68bb      	ldr	r3, [r7, #8]
 8006d08:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006d0c:	461a      	mov	r2, r3
 8006d0e:	69fb      	ldr	r3, [r7, #28]
 8006d10:	431a      	orrs	r2, r3
 8006d12:	69bb      	ldr	r3, [r7, #24]
 8006d14:	431a      	orrs	r2, r3
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	4619      	mov	r1, r3
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	01db      	lsls	r3, r3, #7
 8006d20:	440b      	add	r3, r1
 8006d22:	3384      	adds	r3, #132	; 0x84
 8006d24:	4619      	mov	r1, r3
 8006d26:	697b      	ldr	r3, [r7, #20]
 8006d28:	4313      	orrs	r3, r2
 8006d2a:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	461a      	mov	r2, r3
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	01db      	lsls	r3, r3, #7
 8006d36:	4413      	add	r3, r2
 8006d38:	3384      	adds	r3, #132	; 0x84
 8006d3a:	695b      	ldr	r3, [r3, #20]
 8006d3c:	68fa      	ldr	r2, [r7, #12]
 8006d3e:	6812      	ldr	r2, [r2, #0]
 8006d40:	4611      	mov	r1, r2
 8006d42:	687a      	ldr	r2, [r7, #4]
 8006d44:	01d2      	lsls	r2, r2, #7
 8006d46:	440a      	add	r2, r1
 8006d48:	3284      	adds	r2, #132	; 0x84
 8006d4a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006d4e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	461a      	mov	r2, r3
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	01db      	lsls	r3, r3, #7
 8006d5a:	4413      	add	r3, r2
 8006d5c:	3384      	adds	r3, #132	; 0x84
 8006d5e:	461a      	mov	r2, r3
 8006d60:	68bb      	ldr	r3, [r7, #8]
 8006d62:	695b      	ldr	r3, [r3, #20]
 8006d64:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	461a      	mov	r2, r3
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	01db      	lsls	r3, r3, #7
 8006d70:	4413      	add	r3, r2
 8006d72:	3384      	adds	r3, #132	; 0x84
 8006d74:	69db      	ldr	r3, [r3, #28]
 8006d76:	68fa      	ldr	r2, [r7, #12]
 8006d78:	6812      	ldr	r2, [r2, #0]
 8006d7a:	4611      	mov	r1, r2
 8006d7c:	687a      	ldr	r2, [r7, #4]
 8006d7e:	01d2      	lsls	r2, r2, #7
 8006d80:	440a      	add	r2, r1
 8006d82:	3284      	adds	r2, #132	; 0x84
 8006d84:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8006d88:	f023 0307 	bic.w	r3, r3, #7
 8006d8c:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8006d8e:	68bb      	ldr	r3, [r7, #8]
 8006d90:	69da      	ldr	r2, [r3, #28]
 8006d92:	68bb      	ldr	r3, [r7, #8]
 8006d94:	6a1b      	ldr	r3, [r3, #32]
 8006d96:	68f9      	ldr	r1, [r7, #12]
 8006d98:	6809      	ldr	r1, [r1, #0]
 8006d9a:	4608      	mov	r0, r1
 8006d9c:	6879      	ldr	r1, [r7, #4]
 8006d9e:	01c9      	lsls	r1, r1, #7
 8006da0:	4401      	add	r1, r0
 8006da2:	3184      	adds	r1, #132	; 0x84
 8006da4:	4313      	orrs	r3, r2
 8006da6:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	461a      	mov	r2, r3
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	01db      	lsls	r3, r3, #7
 8006db2:	4413      	add	r3, r2
 8006db4:	3384      	adds	r3, #132	; 0x84
 8006db6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	461a      	mov	r2, r3
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	01db      	lsls	r3, r3, #7
 8006dc2:	4413      	add	r3, r2
 8006dc4:	3384      	adds	r3, #132	; 0x84
 8006dc6:	461a      	mov	r2, r3
 8006dc8:	2300      	movs	r3, #0
 8006dca:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	461a      	mov	r2, r3
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	01db      	lsls	r3, r3, #7
 8006dd6:	4413      	add	r3, r2
 8006dd8:	3384      	adds	r3, #132	; 0x84
 8006dda:	461a      	mov	r2, r3
 8006ddc:	68bb      	ldr	r3, [r7, #8]
 8006dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006de0:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8006de2:	68bb      	ldr	r3, [r7, #8]
 8006de4:	691b      	ldr	r3, [r3, #16]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d102      	bne.n	8006df0 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8006dea:	2304      	movs	r3, #4
 8006dec:	61fb      	str	r3, [r7, #28]
 8006dee:	e01b      	b.n	8006e28 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8006df0:	68bb      	ldr	r3, [r7, #8]
 8006df2:	691b      	ldr	r3, [r3, #16]
 8006df4:	2b01      	cmp	r3, #1
 8006df6:	d102      	bne.n	8006dfe <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8006df8:	2303      	movs	r3, #3
 8006dfa:	61fb      	str	r3, [r7, #28]
 8006dfc:	e014      	b.n	8006e28 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006dfe:	68bb      	ldr	r3, [r7, #8]
 8006e00:	691b      	ldr	r3, [r3, #16]
 8006e02:	2b04      	cmp	r3, #4
 8006e04:	d00b      	beq.n	8006e1e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006e06:	68bb      	ldr	r3, [r7, #8]
 8006e08:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006e0a:	2b02      	cmp	r3, #2
 8006e0c:	d007      	beq.n	8006e1e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006e0e:	68bb      	ldr	r3, [r7, #8]
 8006e10:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006e12:	2b03      	cmp	r3, #3
 8006e14:	d003      	beq.n	8006e1e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8006e16:	68bb      	ldr	r3, [r7, #8]
 8006e18:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006e1a:	2b07      	cmp	r3, #7
 8006e1c:	d102      	bne.n	8006e24 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8006e1e:	2302      	movs	r3, #2
 8006e20:	61fb      	str	r3, [r7, #28]
 8006e22:	e001      	b.n	8006e28 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8006e24:	2301      	movs	r3, #1
 8006e26:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	461a      	mov	r2, r3
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	01db      	lsls	r3, r3, #7
 8006e32:	4413      	add	r3, r2
 8006e34:	3384      	adds	r3, #132	; 0x84
 8006e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e38:	68fa      	ldr	r2, [r7, #12]
 8006e3a:	6812      	ldr	r2, [r2, #0]
 8006e3c:	4611      	mov	r1, r2
 8006e3e:	687a      	ldr	r2, [r7, #4]
 8006e40:	01d2      	lsls	r2, r2, #7
 8006e42:	440a      	add	r2, r1
 8006e44:	3284      	adds	r2, #132	; 0x84
 8006e46:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8006e4a:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8006e4c:	68bb      	ldr	r3, [r7, #8]
 8006e4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e50:	69fa      	ldr	r2, [r7, #28]
 8006e52:	fb02 f303 	mul.w	r3, r2, r3
 8006e56:	041a      	lsls	r2, r3, #16
 8006e58:	68bb      	ldr	r3, [r7, #8]
 8006e5a:	6859      	ldr	r1, [r3, #4]
 8006e5c:	68bb      	ldr	r3, [r7, #8]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	1acb      	subs	r3, r1, r3
 8006e62:	69f9      	ldr	r1, [r7, #28]
 8006e64:	fb01 f303 	mul.w	r3, r1, r3
 8006e68:	3303      	adds	r3, #3
 8006e6a:	68f9      	ldr	r1, [r7, #12]
 8006e6c:	6809      	ldr	r1, [r1, #0]
 8006e6e:	4608      	mov	r0, r1
 8006e70:	6879      	ldr	r1, [r7, #4]
 8006e72:	01c9      	lsls	r1, r1, #7
 8006e74:	4401      	add	r1, r0
 8006e76:	3184      	adds	r1, #132	; 0x84
 8006e78:	4313      	orrs	r3, r2
 8006e7a:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	461a      	mov	r2, r3
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	01db      	lsls	r3, r3, #7
 8006e86:	4413      	add	r3, r2
 8006e88:	3384      	adds	r3, #132	; 0x84
 8006e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e8c:	68fa      	ldr	r2, [r7, #12]
 8006e8e:	6812      	ldr	r2, [r2, #0]
 8006e90:	4611      	mov	r1, r2
 8006e92:	687a      	ldr	r2, [r7, #4]
 8006e94:	01d2      	lsls	r2, r2, #7
 8006e96:	440a      	add	r2, r1
 8006e98:	3284      	adds	r2, #132	; 0x84
 8006e9a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006e9e:	f023 0307 	bic.w	r3, r3, #7
 8006ea2:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	461a      	mov	r2, r3
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	01db      	lsls	r3, r3, #7
 8006eae:	4413      	add	r3, r2
 8006eb0:	3384      	adds	r3, #132	; 0x84
 8006eb2:	461a      	mov	r2, r3
 8006eb4:	68bb      	ldr	r3, [r7, #8]
 8006eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eb8:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	461a      	mov	r2, r3
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	01db      	lsls	r3, r3, #7
 8006ec4:	4413      	add	r3, r2
 8006ec6:	3384      	adds	r3, #132	; 0x84
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	68fa      	ldr	r2, [r7, #12]
 8006ecc:	6812      	ldr	r2, [r2, #0]
 8006ece:	4611      	mov	r1, r2
 8006ed0:	687a      	ldr	r2, [r7, #4]
 8006ed2:	01d2      	lsls	r2, r2, #7
 8006ed4:	440a      	add	r2, r1
 8006ed6:	3284      	adds	r2, #132	; 0x84
 8006ed8:	f043 0301 	orr.w	r3, r3, #1
 8006edc:	6013      	str	r3, [r2, #0]
}
 8006ede:	bf00      	nop
 8006ee0:	3724      	adds	r7, #36	; 0x24
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee8:	4770      	bx	lr
	...

08006eec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b086      	sub	sp, #24
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d101      	bne.n	8006efe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006efa:	2301      	movs	r3, #1
 8006efc:	e25b      	b.n	80073b6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	f003 0301 	and.w	r3, r3, #1
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d075      	beq.n	8006ff6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006f0a:	4ba3      	ldr	r3, [pc, #652]	; (8007198 <HAL_RCC_OscConfig+0x2ac>)
 8006f0c:	689b      	ldr	r3, [r3, #8]
 8006f0e:	f003 030c 	and.w	r3, r3, #12
 8006f12:	2b04      	cmp	r3, #4
 8006f14:	d00c      	beq.n	8006f30 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006f16:	4ba0      	ldr	r3, [pc, #640]	; (8007198 <HAL_RCC_OscConfig+0x2ac>)
 8006f18:	689b      	ldr	r3, [r3, #8]
 8006f1a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006f1e:	2b08      	cmp	r3, #8
 8006f20:	d112      	bne.n	8006f48 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006f22:	4b9d      	ldr	r3, [pc, #628]	; (8007198 <HAL_RCC_OscConfig+0x2ac>)
 8006f24:	685b      	ldr	r3, [r3, #4]
 8006f26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006f2a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006f2e:	d10b      	bne.n	8006f48 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006f30:	4b99      	ldr	r3, [pc, #612]	; (8007198 <HAL_RCC_OscConfig+0x2ac>)
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d05b      	beq.n	8006ff4 <HAL_RCC_OscConfig+0x108>
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	685b      	ldr	r3, [r3, #4]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d157      	bne.n	8006ff4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006f44:	2301      	movs	r3, #1
 8006f46:	e236      	b.n	80073b6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	685b      	ldr	r3, [r3, #4]
 8006f4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f50:	d106      	bne.n	8006f60 <HAL_RCC_OscConfig+0x74>
 8006f52:	4b91      	ldr	r3, [pc, #580]	; (8007198 <HAL_RCC_OscConfig+0x2ac>)
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	4a90      	ldr	r2, [pc, #576]	; (8007198 <HAL_RCC_OscConfig+0x2ac>)
 8006f58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f5c:	6013      	str	r3, [r2, #0]
 8006f5e:	e01d      	b.n	8006f9c <HAL_RCC_OscConfig+0xb0>
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	685b      	ldr	r3, [r3, #4]
 8006f64:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006f68:	d10c      	bne.n	8006f84 <HAL_RCC_OscConfig+0x98>
 8006f6a:	4b8b      	ldr	r3, [pc, #556]	; (8007198 <HAL_RCC_OscConfig+0x2ac>)
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	4a8a      	ldr	r2, [pc, #552]	; (8007198 <HAL_RCC_OscConfig+0x2ac>)
 8006f70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006f74:	6013      	str	r3, [r2, #0]
 8006f76:	4b88      	ldr	r3, [pc, #544]	; (8007198 <HAL_RCC_OscConfig+0x2ac>)
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	4a87      	ldr	r2, [pc, #540]	; (8007198 <HAL_RCC_OscConfig+0x2ac>)
 8006f7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f80:	6013      	str	r3, [r2, #0]
 8006f82:	e00b      	b.n	8006f9c <HAL_RCC_OscConfig+0xb0>
 8006f84:	4b84      	ldr	r3, [pc, #528]	; (8007198 <HAL_RCC_OscConfig+0x2ac>)
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	4a83      	ldr	r2, [pc, #524]	; (8007198 <HAL_RCC_OscConfig+0x2ac>)
 8006f8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f8e:	6013      	str	r3, [r2, #0]
 8006f90:	4b81      	ldr	r3, [pc, #516]	; (8007198 <HAL_RCC_OscConfig+0x2ac>)
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	4a80      	ldr	r2, [pc, #512]	; (8007198 <HAL_RCC_OscConfig+0x2ac>)
 8006f96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006f9a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	685b      	ldr	r3, [r3, #4]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d013      	beq.n	8006fcc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006fa4:	f7fc fefe 	bl	8003da4 <HAL_GetTick>
 8006fa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006faa:	e008      	b.n	8006fbe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006fac:	f7fc fefa 	bl	8003da4 <HAL_GetTick>
 8006fb0:	4602      	mov	r2, r0
 8006fb2:	693b      	ldr	r3, [r7, #16]
 8006fb4:	1ad3      	subs	r3, r2, r3
 8006fb6:	2b64      	cmp	r3, #100	; 0x64
 8006fb8:	d901      	bls.n	8006fbe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006fba:	2303      	movs	r3, #3
 8006fbc:	e1fb      	b.n	80073b6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006fbe:	4b76      	ldr	r3, [pc, #472]	; (8007198 <HAL_RCC_OscConfig+0x2ac>)
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d0f0      	beq.n	8006fac <HAL_RCC_OscConfig+0xc0>
 8006fca:	e014      	b.n	8006ff6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006fcc:	f7fc feea 	bl	8003da4 <HAL_GetTick>
 8006fd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006fd2:	e008      	b.n	8006fe6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006fd4:	f7fc fee6 	bl	8003da4 <HAL_GetTick>
 8006fd8:	4602      	mov	r2, r0
 8006fda:	693b      	ldr	r3, [r7, #16]
 8006fdc:	1ad3      	subs	r3, r2, r3
 8006fde:	2b64      	cmp	r3, #100	; 0x64
 8006fe0:	d901      	bls.n	8006fe6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006fe2:	2303      	movs	r3, #3
 8006fe4:	e1e7      	b.n	80073b6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006fe6:	4b6c      	ldr	r3, [pc, #432]	; (8007198 <HAL_RCC_OscConfig+0x2ac>)
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d1f0      	bne.n	8006fd4 <HAL_RCC_OscConfig+0xe8>
 8006ff2:	e000      	b.n	8006ff6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ff4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f003 0302 	and.w	r3, r3, #2
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d063      	beq.n	80070ca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007002:	4b65      	ldr	r3, [pc, #404]	; (8007198 <HAL_RCC_OscConfig+0x2ac>)
 8007004:	689b      	ldr	r3, [r3, #8]
 8007006:	f003 030c 	and.w	r3, r3, #12
 800700a:	2b00      	cmp	r3, #0
 800700c:	d00b      	beq.n	8007026 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800700e:	4b62      	ldr	r3, [pc, #392]	; (8007198 <HAL_RCC_OscConfig+0x2ac>)
 8007010:	689b      	ldr	r3, [r3, #8]
 8007012:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007016:	2b08      	cmp	r3, #8
 8007018:	d11c      	bne.n	8007054 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800701a:	4b5f      	ldr	r3, [pc, #380]	; (8007198 <HAL_RCC_OscConfig+0x2ac>)
 800701c:	685b      	ldr	r3, [r3, #4]
 800701e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007022:	2b00      	cmp	r3, #0
 8007024:	d116      	bne.n	8007054 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007026:	4b5c      	ldr	r3, [pc, #368]	; (8007198 <HAL_RCC_OscConfig+0x2ac>)
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f003 0302 	and.w	r3, r3, #2
 800702e:	2b00      	cmp	r3, #0
 8007030:	d005      	beq.n	800703e <HAL_RCC_OscConfig+0x152>
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	68db      	ldr	r3, [r3, #12]
 8007036:	2b01      	cmp	r3, #1
 8007038:	d001      	beq.n	800703e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800703a:	2301      	movs	r3, #1
 800703c:	e1bb      	b.n	80073b6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800703e:	4b56      	ldr	r3, [pc, #344]	; (8007198 <HAL_RCC_OscConfig+0x2ac>)
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	691b      	ldr	r3, [r3, #16]
 800704a:	00db      	lsls	r3, r3, #3
 800704c:	4952      	ldr	r1, [pc, #328]	; (8007198 <HAL_RCC_OscConfig+0x2ac>)
 800704e:	4313      	orrs	r3, r2
 8007050:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007052:	e03a      	b.n	80070ca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	68db      	ldr	r3, [r3, #12]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d020      	beq.n	800709e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800705c:	4b4f      	ldr	r3, [pc, #316]	; (800719c <HAL_RCC_OscConfig+0x2b0>)
 800705e:	2201      	movs	r2, #1
 8007060:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007062:	f7fc fe9f 	bl	8003da4 <HAL_GetTick>
 8007066:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007068:	e008      	b.n	800707c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800706a:	f7fc fe9b 	bl	8003da4 <HAL_GetTick>
 800706e:	4602      	mov	r2, r0
 8007070:	693b      	ldr	r3, [r7, #16]
 8007072:	1ad3      	subs	r3, r2, r3
 8007074:	2b02      	cmp	r3, #2
 8007076:	d901      	bls.n	800707c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007078:	2303      	movs	r3, #3
 800707a:	e19c      	b.n	80073b6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800707c:	4b46      	ldr	r3, [pc, #280]	; (8007198 <HAL_RCC_OscConfig+0x2ac>)
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	f003 0302 	and.w	r3, r3, #2
 8007084:	2b00      	cmp	r3, #0
 8007086:	d0f0      	beq.n	800706a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007088:	4b43      	ldr	r3, [pc, #268]	; (8007198 <HAL_RCC_OscConfig+0x2ac>)
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	691b      	ldr	r3, [r3, #16]
 8007094:	00db      	lsls	r3, r3, #3
 8007096:	4940      	ldr	r1, [pc, #256]	; (8007198 <HAL_RCC_OscConfig+0x2ac>)
 8007098:	4313      	orrs	r3, r2
 800709a:	600b      	str	r3, [r1, #0]
 800709c:	e015      	b.n	80070ca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800709e:	4b3f      	ldr	r3, [pc, #252]	; (800719c <HAL_RCC_OscConfig+0x2b0>)
 80070a0:	2200      	movs	r2, #0
 80070a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070a4:	f7fc fe7e 	bl	8003da4 <HAL_GetTick>
 80070a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80070aa:	e008      	b.n	80070be <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80070ac:	f7fc fe7a 	bl	8003da4 <HAL_GetTick>
 80070b0:	4602      	mov	r2, r0
 80070b2:	693b      	ldr	r3, [r7, #16]
 80070b4:	1ad3      	subs	r3, r2, r3
 80070b6:	2b02      	cmp	r3, #2
 80070b8:	d901      	bls.n	80070be <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80070ba:	2303      	movs	r3, #3
 80070bc:	e17b      	b.n	80073b6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80070be:	4b36      	ldr	r3, [pc, #216]	; (8007198 <HAL_RCC_OscConfig+0x2ac>)
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	f003 0302 	and.w	r3, r3, #2
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d1f0      	bne.n	80070ac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	f003 0308 	and.w	r3, r3, #8
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d030      	beq.n	8007138 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	695b      	ldr	r3, [r3, #20]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d016      	beq.n	800710c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80070de:	4b30      	ldr	r3, [pc, #192]	; (80071a0 <HAL_RCC_OscConfig+0x2b4>)
 80070e0:	2201      	movs	r2, #1
 80070e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80070e4:	f7fc fe5e 	bl	8003da4 <HAL_GetTick>
 80070e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80070ea:	e008      	b.n	80070fe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80070ec:	f7fc fe5a 	bl	8003da4 <HAL_GetTick>
 80070f0:	4602      	mov	r2, r0
 80070f2:	693b      	ldr	r3, [r7, #16]
 80070f4:	1ad3      	subs	r3, r2, r3
 80070f6:	2b02      	cmp	r3, #2
 80070f8:	d901      	bls.n	80070fe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80070fa:	2303      	movs	r3, #3
 80070fc:	e15b      	b.n	80073b6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80070fe:	4b26      	ldr	r3, [pc, #152]	; (8007198 <HAL_RCC_OscConfig+0x2ac>)
 8007100:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007102:	f003 0302 	and.w	r3, r3, #2
 8007106:	2b00      	cmp	r3, #0
 8007108:	d0f0      	beq.n	80070ec <HAL_RCC_OscConfig+0x200>
 800710a:	e015      	b.n	8007138 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800710c:	4b24      	ldr	r3, [pc, #144]	; (80071a0 <HAL_RCC_OscConfig+0x2b4>)
 800710e:	2200      	movs	r2, #0
 8007110:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007112:	f7fc fe47 	bl	8003da4 <HAL_GetTick>
 8007116:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007118:	e008      	b.n	800712c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800711a:	f7fc fe43 	bl	8003da4 <HAL_GetTick>
 800711e:	4602      	mov	r2, r0
 8007120:	693b      	ldr	r3, [r7, #16]
 8007122:	1ad3      	subs	r3, r2, r3
 8007124:	2b02      	cmp	r3, #2
 8007126:	d901      	bls.n	800712c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007128:	2303      	movs	r3, #3
 800712a:	e144      	b.n	80073b6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800712c:	4b1a      	ldr	r3, [pc, #104]	; (8007198 <HAL_RCC_OscConfig+0x2ac>)
 800712e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007130:	f003 0302 	and.w	r3, r3, #2
 8007134:	2b00      	cmp	r3, #0
 8007136:	d1f0      	bne.n	800711a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	f003 0304 	and.w	r3, r3, #4
 8007140:	2b00      	cmp	r3, #0
 8007142:	f000 80a0 	beq.w	8007286 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007146:	2300      	movs	r3, #0
 8007148:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800714a:	4b13      	ldr	r3, [pc, #76]	; (8007198 <HAL_RCC_OscConfig+0x2ac>)
 800714c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800714e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007152:	2b00      	cmp	r3, #0
 8007154:	d10f      	bne.n	8007176 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007156:	2300      	movs	r3, #0
 8007158:	60bb      	str	r3, [r7, #8]
 800715a:	4b0f      	ldr	r3, [pc, #60]	; (8007198 <HAL_RCC_OscConfig+0x2ac>)
 800715c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800715e:	4a0e      	ldr	r2, [pc, #56]	; (8007198 <HAL_RCC_OscConfig+0x2ac>)
 8007160:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007164:	6413      	str	r3, [r2, #64]	; 0x40
 8007166:	4b0c      	ldr	r3, [pc, #48]	; (8007198 <HAL_RCC_OscConfig+0x2ac>)
 8007168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800716a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800716e:	60bb      	str	r3, [r7, #8]
 8007170:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007172:	2301      	movs	r3, #1
 8007174:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007176:	4b0b      	ldr	r3, [pc, #44]	; (80071a4 <HAL_RCC_OscConfig+0x2b8>)
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800717e:	2b00      	cmp	r3, #0
 8007180:	d121      	bne.n	80071c6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007182:	4b08      	ldr	r3, [pc, #32]	; (80071a4 <HAL_RCC_OscConfig+0x2b8>)
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	4a07      	ldr	r2, [pc, #28]	; (80071a4 <HAL_RCC_OscConfig+0x2b8>)
 8007188:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800718c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800718e:	f7fc fe09 	bl	8003da4 <HAL_GetTick>
 8007192:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007194:	e011      	b.n	80071ba <HAL_RCC_OscConfig+0x2ce>
 8007196:	bf00      	nop
 8007198:	40023800 	.word	0x40023800
 800719c:	42470000 	.word	0x42470000
 80071a0:	42470e80 	.word	0x42470e80
 80071a4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80071a8:	f7fc fdfc 	bl	8003da4 <HAL_GetTick>
 80071ac:	4602      	mov	r2, r0
 80071ae:	693b      	ldr	r3, [r7, #16]
 80071b0:	1ad3      	subs	r3, r2, r3
 80071b2:	2b02      	cmp	r3, #2
 80071b4:	d901      	bls.n	80071ba <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80071b6:	2303      	movs	r3, #3
 80071b8:	e0fd      	b.n	80073b6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80071ba:	4b81      	ldr	r3, [pc, #516]	; (80073c0 <HAL_RCC_OscConfig+0x4d4>)
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d0f0      	beq.n	80071a8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	689b      	ldr	r3, [r3, #8]
 80071ca:	2b01      	cmp	r3, #1
 80071cc:	d106      	bne.n	80071dc <HAL_RCC_OscConfig+0x2f0>
 80071ce:	4b7d      	ldr	r3, [pc, #500]	; (80073c4 <HAL_RCC_OscConfig+0x4d8>)
 80071d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071d2:	4a7c      	ldr	r2, [pc, #496]	; (80073c4 <HAL_RCC_OscConfig+0x4d8>)
 80071d4:	f043 0301 	orr.w	r3, r3, #1
 80071d8:	6713      	str	r3, [r2, #112]	; 0x70
 80071da:	e01c      	b.n	8007216 <HAL_RCC_OscConfig+0x32a>
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	689b      	ldr	r3, [r3, #8]
 80071e0:	2b05      	cmp	r3, #5
 80071e2:	d10c      	bne.n	80071fe <HAL_RCC_OscConfig+0x312>
 80071e4:	4b77      	ldr	r3, [pc, #476]	; (80073c4 <HAL_RCC_OscConfig+0x4d8>)
 80071e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071e8:	4a76      	ldr	r2, [pc, #472]	; (80073c4 <HAL_RCC_OscConfig+0x4d8>)
 80071ea:	f043 0304 	orr.w	r3, r3, #4
 80071ee:	6713      	str	r3, [r2, #112]	; 0x70
 80071f0:	4b74      	ldr	r3, [pc, #464]	; (80073c4 <HAL_RCC_OscConfig+0x4d8>)
 80071f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071f4:	4a73      	ldr	r2, [pc, #460]	; (80073c4 <HAL_RCC_OscConfig+0x4d8>)
 80071f6:	f043 0301 	orr.w	r3, r3, #1
 80071fa:	6713      	str	r3, [r2, #112]	; 0x70
 80071fc:	e00b      	b.n	8007216 <HAL_RCC_OscConfig+0x32a>
 80071fe:	4b71      	ldr	r3, [pc, #452]	; (80073c4 <HAL_RCC_OscConfig+0x4d8>)
 8007200:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007202:	4a70      	ldr	r2, [pc, #448]	; (80073c4 <HAL_RCC_OscConfig+0x4d8>)
 8007204:	f023 0301 	bic.w	r3, r3, #1
 8007208:	6713      	str	r3, [r2, #112]	; 0x70
 800720a:	4b6e      	ldr	r3, [pc, #440]	; (80073c4 <HAL_RCC_OscConfig+0x4d8>)
 800720c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800720e:	4a6d      	ldr	r2, [pc, #436]	; (80073c4 <HAL_RCC_OscConfig+0x4d8>)
 8007210:	f023 0304 	bic.w	r3, r3, #4
 8007214:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	689b      	ldr	r3, [r3, #8]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d015      	beq.n	800724a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800721e:	f7fc fdc1 	bl	8003da4 <HAL_GetTick>
 8007222:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007224:	e00a      	b.n	800723c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007226:	f7fc fdbd 	bl	8003da4 <HAL_GetTick>
 800722a:	4602      	mov	r2, r0
 800722c:	693b      	ldr	r3, [r7, #16]
 800722e:	1ad3      	subs	r3, r2, r3
 8007230:	f241 3288 	movw	r2, #5000	; 0x1388
 8007234:	4293      	cmp	r3, r2
 8007236:	d901      	bls.n	800723c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8007238:	2303      	movs	r3, #3
 800723a:	e0bc      	b.n	80073b6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800723c:	4b61      	ldr	r3, [pc, #388]	; (80073c4 <HAL_RCC_OscConfig+0x4d8>)
 800723e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007240:	f003 0302 	and.w	r3, r3, #2
 8007244:	2b00      	cmp	r3, #0
 8007246:	d0ee      	beq.n	8007226 <HAL_RCC_OscConfig+0x33a>
 8007248:	e014      	b.n	8007274 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800724a:	f7fc fdab 	bl	8003da4 <HAL_GetTick>
 800724e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007250:	e00a      	b.n	8007268 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007252:	f7fc fda7 	bl	8003da4 <HAL_GetTick>
 8007256:	4602      	mov	r2, r0
 8007258:	693b      	ldr	r3, [r7, #16]
 800725a:	1ad3      	subs	r3, r2, r3
 800725c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007260:	4293      	cmp	r3, r2
 8007262:	d901      	bls.n	8007268 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8007264:	2303      	movs	r3, #3
 8007266:	e0a6      	b.n	80073b6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007268:	4b56      	ldr	r3, [pc, #344]	; (80073c4 <HAL_RCC_OscConfig+0x4d8>)
 800726a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800726c:	f003 0302 	and.w	r3, r3, #2
 8007270:	2b00      	cmp	r3, #0
 8007272:	d1ee      	bne.n	8007252 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007274:	7dfb      	ldrb	r3, [r7, #23]
 8007276:	2b01      	cmp	r3, #1
 8007278:	d105      	bne.n	8007286 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800727a:	4b52      	ldr	r3, [pc, #328]	; (80073c4 <HAL_RCC_OscConfig+0x4d8>)
 800727c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800727e:	4a51      	ldr	r2, [pc, #324]	; (80073c4 <HAL_RCC_OscConfig+0x4d8>)
 8007280:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007284:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	699b      	ldr	r3, [r3, #24]
 800728a:	2b00      	cmp	r3, #0
 800728c:	f000 8092 	beq.w	80073b4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007290:	4b4c      	ldr	r3, [pc, #304]	; (80073c4 <HAL_RCC_OscConfig+0x4d8>)
 8007292:	689b      	ldr	r3, [r3, #8]
 8007294:	f003 030c 	and.w	r3, r3, #12
 8007298:	2b08      	cmp	r3, #8
 800729a:	d05c      	beq.n	8007356 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	699b      	ldr	r3, [r3, #24]
 80072a0:	2b02      	cmp	r3, #2
 80072a2:	d141      	bne.n	8007328 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80072a4:	4b48      	ldr	r3, [pc, #288]	; (80073c8 <HAL_RCC_OscConfig+0x4dc>)
 80072a6:	2200      	movs	r2, #0
 80072a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80072aa:	f7fc fd7b 	bl	8003da4 <HAL_GetTick>
 80072ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80072b0:	e008      	b.n	80072c4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80072b2:	f7fc fd77 	bl	8003da4 <HAL_GetTick>
 80072b6:	4602      	mov	r2, r0
 80072b8:	693b      	ldr	r3, [r7, #16]
 80072ba:	1ad3      	subs	r3, r2, r3
 80072bc:	2b02      	cmp	r3, #2
 80072be:	d901      	bls.n	80072c4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80072c0:	2303      	movs	r3, #3
 80072c2:	e078      	b.n	80073b6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80072c4:	4b3f      	ldr	r3, [pc, #252]	; (80073c4 <HAL_RCC_OscConfig+0x4d8>)
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d1f0      	bne.n	80072b2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	69da      	ldr	r2, [r3, #28]
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	6a1b      	ldr	r3, [r3, #32]
 80072d8:	431a      	orrs	r2, r3
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072de:	019b      	lsls	r3, r3, #6
 80072e0:	431a      	orrs	r2, r3
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072e6:	085b      	lsrs	r3, r3, #1
 80072e8:	3b01      	subs	r3, #1
 80072ea:	041b      	lsls	r3, r3, #16
 80072ec:	431a      	orrs	r2, r3
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072f2:	061b      	lsls	r3, r3, #24
 80072f4:	4933      	ldr	r1, [pc, #204]	; (80073c4 <HAL_RCC_OscConfig+0x4d8>)
 80072f6:	4313      	orrs	r3, r2
 80072f8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80072fa:	4b33      	ldr	r3, [pc, #204]	; (80073c8 <HAL_RCC_OscConfig+0x4dc>)
 80072fc:	2201      	movs	r2, #1
 80072fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007300:	f7fc fd50 	bl	8003da4 <HAL_GetTick>
 8007304:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007306:	e008      	b.n	800731a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007308:	f7fc fd4c 	bl	8003da4 <HAL_GetTick>
 800730c:	4602      	mov	r2, r0
 800730e:	693b      	ldr	r3, [r7, #16]
 8007310:	1ad3      	subs	r3, r2, r3
 8007312:	2b02      	cmp	r3, #2
 8007314:	d901      	bls.n	800731a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8007316:	2303      	movs	r3, #3
 8007318:	e04d      	b.n	80073b6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800731a:	4b2a      	ldr	r3, [pc, #168]	; (80073c4 <HAL_RCC_OscConfig+0x4d8>)
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007322:	2b00      	cmp	r3, #0
 8007324:	d0f0      	beq.n	8007308 <HAL_RCC_OscConfig+0x41c>
 8007326:	e045      	b.n	80073b4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007328:	4b27      	ldr	r3, [pc, #156]	; (80073c8 <HAL_RCC_OscConfig+0x4dc>)
 800732a:	2200      	movs	r2, #0
 800732c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800732e:	f7fc fd39 	bl	8003da4 <HAL_GetTick>
 8007332:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007334:	e008      	b.n	8007348 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007336:	f7fc fd35 	bl	8003da4 <HAL_GetTick>
 800733a:	4602      	mov	r2, r0
 800733c:	693b      	ldr	r3, [r7, #16]
 800733e:	1ad3      	subs	r3, r2, r3
 8007340:	2b02      	cmp	r3, #2
 8007342:	d901      	bls.n	8007348 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8007344:	2303      	movs	r3, #3
 8007346:	e036      	b.n	80073b6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007348:	4b1e      	ldr	r3, [pc, #120]	; (80073c4 <HAL_RCC_OscConfig+0x4d8>)
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007350:	2b00      	cmp	r3, #0
 8007352:	d1f0      	bne.n	8007336 <HAL_RCC_OscConfig+0x44a>
 8007354:	e02e      	b.n	80073b4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	699b      	ldr	r3, [r3, #24]
 800735a:	2b01      	cmp	r3, #1
 800735c:	d101      	bne.n	8007362 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800735e:	2301      	movs	r3, #1
 8007360:	e029      	b.n	80073b6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007362:	4b18      	ldr	r3, [pc, #96]	; (80073c4 <HAL_RCC_OscConfig+0x4d8>)
 8007364:	685b      	ldr	r3, [r3, #4]
 8007366:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	69db      	ldr	r3, [r3, #28]
 8007372:	429a      	cmp	r2, r3
 8007374:	d11c      	bne.n	80073b0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007380:	429a      	cmp	r2, r3
 8007382:	d115      	bne.n	80073b0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8007384:	68fa      	ldr	r2, [r7, #12]
 8007386:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800738a:	4013      	ands	r3, r2
 800738c:	687a      	ldr	r2, [r7, #4]
 800738e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007390:	4293      	cmp	r3, r2
 8007392:	d10d      	bne.n	80073b0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800739e:	429a      	cmp	r2, r3
 80073a0:	d106      	bne.n	80073b0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80073ac:	429a      	cmp	r2, r3
 80073ae:	d001      	beq.n	80073b4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80073b0:	2301      	movs	r3, #1
 80073b2:	e000      	b.n	80073b6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80073b4:	2300      	movs	r3, #0
}
 80073b6:	4618      	mov	r0, r3
 80073b8:	3718      	adds	r7, #24
 80073ba:	46bd      	mov	sp, r7
 80073bc:	bd80      	pop	{r7, pc}
 80073be:	bf00      	nop
 80073c0:	40007000 	.word	0x40007000
 80073c4:	40023800 	.word	0x40023800
 80073c8:	42470060 	.word	0x42470060

080073cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b084      	sub	sp, #16
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
 80073d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d101      	bne.n	80073e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80073dc:	2301      	movs	r3, #1
 80073de:	e0cc      	b.n	800757a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80073e0:	4b68      	ldr	r3, [pc, #416]	; (8007584 <HAL_RCC_ClockConfig+0x1b8>)
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	f003 030f 	and.w	r3, r3, #15
 80073e8:	683a      	ldr	r2, [r7, #0]
 80073ea:	429a      	cmp	r2, r3
 80073ec:	d90c      	bls.n	8007408 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80073ee:	4b65      	ldr	r3, [pc, #404]	; (8007584 <HAL_RCC_ClockConfig+0x1b8>)
 80073f0:	683a      	ldr	r2, [r7, #0]
 80073f2:	b2d2      	uxtb	r2, r2
 80073f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80073f6:	4b63      	ldr	r3, [pc, #396]	; (8007584 <HAL_RCC_ClockConfig+0x1b8>)
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	f003 030f 	and.w	r3, r3, #15
 80073fe:	683a      	ldr	r2, [r7, #0]
 8007400:	429a      	cmp	r2, r3
 8007402:	d001      	beq.n	8007408 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007404:	2301      	movs	r3, #1
 8007406:	e0b8      	b.n	800757a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	f003 0302 	and.w	r3, r3, #2
 8007410:	2b00      	cmp	r3, #0
 8007412:	d020      	beq.n	8007456 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	f003 0304 	and.w	r3, r3, #4
 800741c:	2b00      	cmp	r3, #0
 800741e:	d005      	beq.n	800742c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007420:	4b59      	ldr	r3, [pc, #356]	; (8007588 <HAL_RCC_ClockConfig+0x1bc>)
 8007422:	689b      	ldr	r3, [r3, #8]
 8007424:	4a58      	ldr	r2, [pc, #352]	; (8007588 <HAL_RCC_ClockConfig+0x1bc>)
 8007426:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800742a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f003 0308 	and.w	r3, r3, #8
 8007434:	2b00      	cmp	r3, #0
 8007436:	d005      	beq.n	8007444 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007438:	4b53      	ldr	r3, [pc, #332]	; (8007588 <HAL_RCC_ClockConfig+0x1bc>)
 800743a:	689b      	ldr	r3, [r3, #8]
 800743c:	4a52      	ldr	r2, [pc, #328]	; (8007588 <HAL_RCC_ClockConfig+0x1bc>)
 800743e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007442:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007444:	4b50      	ldr	r3, [pc, #320]	; (8007588 <HAL_RCC_ClockConfig+0x1bc>)
 8007446:	689b      	ldr	r3, [r3, #8]
 8007448:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	689b      	ldr	r3, [r3, #8]
 8007450:	494d      	ldr	r1, [pc, #308]	; (8007588 <HAL_RCC_ClockConfig+0x1bc>)
 8007452:	4313      	orrs	r3, r2
 8007454:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f003 0301 	and.w	r3, r3, #1
 800745e:	2b00      	cmp	r3, #0
 8007460:	d044      	beq.n	80074ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	685b      	ldr	r3, [r3, #4]
 8007466:	2b01      	cmp	r3, #1
 8007468:	d107      	bne.n	800747a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800746a:	4b47      	ldr	r3, [pc, #284]	; (8007588 <HAL_RCC_ClockConfig+0x1bc>)
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007472:	2b00      	cmp	r3, #0
 8007474:	d119      	bne.n	80074aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007476:	2301      	movs	r3, #1
 8007478:	e07f      	b.n	800757a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	685b      	ldr	r3, [r3, #4]
 800747e:	2b02      	cmp	r3, #2
 8007480:	d003      	beq.n	800748a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007486:	2b03      	cmp	r3, #3
 8007488:	d107      	bne.n	800749a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800748a:	4b3f      	ldr	r3, [pc, #252]	; (8007588 <HAL_RCC_ClockConfig+0x1bc>)
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007492:	2b00      	cmp	r3, #0
 8007494:	d109      	bne.n	80074aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007496:	2301      	movs	r3, #1
 8007498:	e06f      	b.n	800757a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800749a:	4b3b      	ldr	r3, [pc, #236]	; (8007588 <HAL_RCC_ClockConfig+0x1bc>)
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	f003 0302 	and.w	r3, r3, #2
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d101      	bne.n	80074aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80074a6:	2301      	movs	r3, #1
 80074a8:	e067      	b.n	800757a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80074aa:	4b37      	ldr	r3, [pc, #220]	; (8007588 <HAL_RCC_ClockConfig+0x1bc>)
 80074ac:	689b      	ldr	r3, [r3, #8]
 80074ae:	f023 0203 	bic.w	r2, r3, #3
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	685b      	ldr	r3, [r3, #4]
 80074b6:	4934      	ldr	r1, [pc, #208]	; (8007588 <HAL_RCC_ClockConfig+0x1bc>)
 80074b8:	4313      	orrs	r3, r2
 80074ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80074bc:	f7fc fc72 	bl	8003da4 <HAL_GetTick>
 80074c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80074c2:	e00a      	b.n	80074da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80074c4:	f7fc fc6e 	bl	8003da4 <HAL_GetTick>
 80074c8:	4602      	mov	r2, r0
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	1ad3      	subs	r3, r2, r3
 80074ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80074d2:	4293      	cmp	r3, r2
 80074d4:	d901      	bls.n	80074da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80074d6:	2303      	movs	r3, #3
 80074d8:	e04f      	b.n	800757a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80074da:	4b2b      	ldr	r3, [pc, #172]	; (8007588 <HAL_RCC_ClockConfig+0x1bc>)
 80074dc:	689b      	ldr	r3, [r3, #8]
 80074de:	f003 020c 	and.w	r2, r3, #12
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	685b      	ldr	r3, [r3, #4]
 80074e6:	009b      	lsls	r3, r3, #2
 80074e8:	429a      	cmp	r2, r3
 80074ea:	d1eb      	bne.n	80074c4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80074ec:	4b25      	ldr	r3, [pc, #148]	; (8007584 <HAL_RCC_ClockConfig+0x1b8>)
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	f003 030f 	and.w	r3, r3, #15
 80074f4:	683a      	ldr	r2, [r7, #0]
 80074f6:	429a      	cmp	r2, r3
 80074f8:	d20c      	bcs.n	8007514 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80074fa:	4b22      	ldr	r3, [pc, #136]	; (8007584 <HAL_RCC_ClockConfig+0x1b8>)
 80074fc:	683a      	ldr	r2, [r7, #0]
 80074fe:	b2d2      	uxtb	r2, r2
 8007500:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007502:	4b20      	ldr	r3, [pc, #128]	; (8007584 <HAL_RCC_ClockConfig+0x1b8>)
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	f003 030f 	and.w	r3, r3, #15
 800750a:	683a      	ldr	r2, [r7, #0]
 800750c:	429a      	cmp	r2, r3
 800750e:	d001      	beq.n	8007514 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007510:	2301      	movs	r3, #1
 8007512:	e032      	b.n	800757a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	f003 0304 	and.w	r3, r3, #4
 800751c:	2b00      	cmp	r3, #0
 800751e:	d008      	beq.n	8007532 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007520:	4b19      	ldr	r3, [pc, #100]	; (8007588 <HAL_RCC_ClockConfig+0x1bc>)
 8007522:	689b      	ldr	r3, [r3, #8]
 8007524:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	68db      	ldr	r3, [r3, #12]
 800752c:	4916      	ldr	r1, [pc, #88]	; (8007588 <HAL_RCC_ClockConfig+0x1bc>)
 800752e:	4313      	orrs	r3, r2
 8007530:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	f003 0308 	and.w	r3, r3, #8
 800753a:	2b00      	cmp	r3, #0
 800753c:	d009      	beq.n	8007552 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800753e:	4b12      	ldr	r3, [pc, #72]	; (8007588 <HAL_RCC_ClockConfig+0x1bc>)
 8007540:	689b      	ldr	r3, [r3, #8]
 8007542:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	691b      	ldr	r3, [r3, #16]
 800754a:	00db      	lsls	r3, r3, #3
 800754c:	490e      	ldr	r1, [pc, #56]	; (8007588 <HAL_RCC_ClockConfig+0x1bc>)
 800754e:	4313      	orrs	r3, r2
 8007550:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007552:	f000 f821 	bl	8007598 <HAL_RCC_GetSysClockFreq>
 8007556:	4601      	mov	r1, r0
 8007558:	4b0b      	ldr	r3, [pc, #44]	; (8007588 <HAL_RCC_ClockConfig+0x1bc>)
 800755a:	689b      	ldr	r3, [r3, #8]
 800755c:	091b      	lsrs	r3, r3, #4
 800755e:	f003 030f 	and.w	r3, r3, #15
 8007562:	4a0a      	ldr	r2, [pc, #40]	; (800758c <HAL_RCC_ClockConfig+0x1c0>)
 8007564:	5cd3      	ldrb	r3, [r2, r3]
 8007566:	fa21 f303 	lsr.w	r3, r1, r3
 800756a:	4a09      	ldr	r2, [pc, #36]	; (8007590 <HAL_RCC_ClockConfig+0x1c4>)
 800756c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800756e:	4b09      	ldr	r3, [pc, #36]	; (8007594 <HAL_RCC_ClockConfig+0x1c8>)
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	4618      	mov	r0, r3
 8007574:	f7fa fabe 	bl	8001af4 <HAL_InitTick>

  return HAL_OK;
 8007578:	2300      	movs	r3, #0
}
 800757a:	4618      	mov	r0, r3
 800757c:	3710      	adds	r7, #16
 800757e:	46bd      	mov	sp, r7
 8007580:	bd80      	pop	{r7, pc}
 8007582:	bf00      	nop
 8007584:	40023c00 	.word	0x40023c00
 8007588:	40023800 	.word	0x40023800
 800758c:	0800a478 	.word	0x0800a478
 8007590:	200000f8 	.word	0x200000f8
 8007594:	20000180 	.word	0x20000180

08007598 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007598:	b5f0      	push	{r4, r5, r6, r7, lr}
 800759a:	b085      	sub	sp, #20
 800759c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800759e:	2300      	movs	r3, #0
 80075a0:	607b      	str	r3, [r7, #4]
 80075a2:	2300      	movs	r3, #0
 80075a4:	60fb      	str	r3, [r7, #12]
 80075a6:	2300      	movs	r3, #0
 80075a8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80075aa:	2300      	movs	r3, #0
 80075ac:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80075ae:	4b63      	ldr	r3, [pc, #396]	; (800773c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80075b0:	689b      	ldr	r3, [r3, #8]
 80075b2:	f003 030c 	and.w	r3, r3, #12
 80075b6:	2b04      	cmp	r3, #4
 80075b8:	d007      	beq.n	80075ca <HAL_RCC_GetSysClockFreq+0x32>
 80075ba:	2b08      	cmp	r3, #8
 80075bc:	d008      	beq.n	80075d0 <HAL_RCC_GetSysClockFreq+0x38>
 80075be:	2b00      	cmp	r3, #0
 80075c0:	f040 80b4 	bne.w	800772c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80075c4:	4b5e      	ldr	r3, [pc, #376]	; (8007740 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80075c6:	60bb      	str	r3, [r7, #8]
       break;
 80075c8:	e0b3      	b.n	8007732 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80075ca:	4b5e      	ldr	r3, [pc, #376]	; (8007744 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80075cc:	60bb      	str	r3, [r7, #8]
      break;
 80075ce:	e0b0      	b.n	8007732 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80075d0:	4b5a      	ldr	r3, [pc, #360]	; (800773c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80075d2:	685b      	ldr	r3, [r3, #4]
 80075d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80075d8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80075da:	4b58      	ldr	r3, [pc, #352]	; (800773c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80075dc:	685b      	ldr	r3, [r3, #4]
 80075de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d04a      	beq.n	800767c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80075e6:	4b55      	ldr	r3, [pc, #340]	; (800773c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80075e8:	685b      	ldr	r3, [r3, #4]
 80075ea:	099b      	lsrs	r3, r3, #6
 80075ec:	f04f 0400 	mov.w	r4, #0
 80075f0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80075f4:	f04f 0200 	mov.w	r2, #0
 80075f8:	ea03 0501 	and.w	r5, r3, r1
 80075fc:	ea04 0602 	and.w	r6, r4, r2
 8007600:	4629      	mov	r1, r5
 8007602:	4632      	mov	r2, r6
 8007604:	f04f 0300 	mov.w	r3, #0
 8007608:	f04f 0400 	mov.w	r4, #0
 800760c:	0154      	lsls	r4, r2, #5
 800760e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8007612:	014b      	lsls	r3, r1, #5
 8007614:	4619      	mov	r1, r3
 8007616:	4622      	mov	r2, r4
 8007618:	1b49      	subs	r1, r1, r5
 800761a:	eb62 0206 	sbc.w	r2, r2, r6
 800761e:	f04f 0300 	mov.w	r3, #0
 8007622:	f04f 0400 	mov.w	r4, #0
 8007626:	0194      	lsls	r4, r2, #6
 8007628:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800762c:	018b      	lsls	r3, r1, #6
 800762e:	1a5b      	subs	r3, r3, r1
 8007630:	eb64 0402 	sbc.w	r4, r4, r2
 8007634:	f04f 0100 	mov.w	r1, #0
 8007638:	f04f 0200 	mov.w	r2, #0
 800763c:	00e2      	lsls	r2, r4, #3
 800763e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8007642:	00d9      	lsls	r1, r3, #3
 8007644:	460b      	mov	r3, r1
 8007646:	4614      	mov	r4, r2
 8007648:	195b      	adds	r3, r3, r5
 800764a:	eb44 0406 	adc.w	r4, r4, r6
 800764e:	f04f 0100 	mov.w	r1, #0
 8007652:	f04f 0200 	mov.w	r2, #0
 8007656:	0262      	lsls	r2, r4, #9
 8007658:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800765c:	0259      	lsls	r1, r3, #9
 800765e:	460b      	mov	r3, r1
 8007660:	4614      	mov	r4, r2
 8007662:	4618      	mov	r0, r3
 8007664:	4621      	mov	r1, r4
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	f04f 0400 	mov.w	r4, #0
 800766c:	461a      	mov	r2, r3
 800766e:	4623      	mov	r3, r4
 8007670:	f7f8 fe0e 	bl	8000290 <__aeabi_uldivmod>
 8007674:	4603      	mov	r3, r0
 8007676:	460c      	mov	r4, r1
 8007678:	60fb      	str	r3, [r7, #12]
 800767a:	e049      	b.n	8007710 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800767c:	4b2f      	ldr	r3, [pc, #188]	; (800773c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800767e:	685b      	ldr	r3, [r3, #4]
 8007680:	099b      	lsrs	r3, r3, #6
 8007682:	f04f 0400 	mov.w	r4, #0
 8007686:	f240 11ff 	movw	r1, #511	; 0x1ff
 800768a:	f04f 0200 	mov.w	r2, #0
 800768e:	ea03 0501 	and.w	r5, r3, r1
 8007692:	ea04 0602 	and.w	r6, r4, r2
 8007696:	4629      	mov	r1, r5
 8007698:	4632      	mov	r2, r6
 800769a:	f04f 0300 	mov.w	r3, #0
 800769e:	f04f 0400 	mov.w	r4, #0
 80076a2:	0154      	lsls	r4, r2, #5
 80076a4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80076a8:	014b      	lsls	r3, r1, #5
 80076aa:	4619      	mov	r1, r3
 80076ac:	4622      	mov	r2, r4
 80076ae:	1b49      	subs	r1, r1, r5
 80076b0:	eb62 0206 	sbc.w	r2, r2, r6
 80076b4:	f04f 0300 	mov.w	r3, #0
 80076b8:	f04f 0400 	mov.w	r4, #0
 80076bc:	0194      	lsls	r4, r2, #6
 80076be:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80076c2:	018b      	lsls	r3, r1, #6
 80076c4:	1a5b      	subs	r3, r3, r1
 80076c6:	eb64 0402 	sbc.w	r4, r4, r2
 80076ca:	f04f 0100 	mov.w	r1, #0
 80076ce:	f04f 0200 	mov.w	r2, #0
 80076d2:	00e2      	lsls	r2, r4, #3
 80076d4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80076d8:	00d9      	lsls	r1, r3, #3
 80076da:	460b      	mov	r3, r1
 80076dc:	4614      	mov	r4, r2
 80076de:	195b      	adds	r3, r3, r5
 80076e0:	eb44 0406 	adc.w	r4, r4, r6
 80076e4:	f04f 0100 	mov.w	r1, #0
 80076e8:	f04f 0200 	mov.w	r2, #0
 80076ec:	02a2      	lsls	r2, r4, #10
 80076ee:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80076f2:	0299      	lsls	r1, r3, #10
 80076f4:	460b      	mov	r3, r1
 80076f6:	4614      	mov	r4, r2
 80076f8:	4618      	mov	r0, r3
 80076fa:	4621      	mov	r1, r4
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	f04f 0400 	mov.w	r4, #0
 8007702:	461a      	mov	r2, r3
 8007704:	4623      	mov	r3, r4
 8007706:	f7f8 fdc3 	bl	8000290 <__aeabi_uldivmod>
 800770a:	4603      	mov	r3, r0
 800770c:	460c      	mov	r4, r1
 800770e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007710:	4b0a      	ldr	r3, [pc, #40]	; (800773c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007712:	685b      	ldr	r3, [r3, #4]
 8007714:	0c1b      	lsrs	r3, r3, #16
 8007716:	f003 0303 	and.w	r3, r3, #3
 800771a:	3301      	adds	r3, #1
 800771c:	005b      	lsls	r3, r3, #1
 800771e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8007720:	68fa      	ldr	r2, [r7, #12]
 8007722:	683b      	ldr	r3, [r7, #0]
 8007724:	fbb2 f3f3 	udiv	r3, r2, r3
 8007728:	60bb      	str	r3, [r7, #8]
      break;
 800772a:	e002      	b.n	8007732 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800772c:	4b04      	ldr	r3, [pc, #16]	; (8007740 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800772e:	60bb      	str	r3, [r7, #8]
      break;
 8007730:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007732:	68bb      	ldr	r3, [r7, #8]
}
 8007734:	4618      	mov	r0, r3
 8007736:	3714      	adds	r7, #20
 8007738:	46bd      	mov	sp, r7
 800773a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800773c:	40023800 	.word	0x40023800
 8007740:	00f42400 	.word	0x00f42400
 8007744:	007a1200 	.word	0x007a1200

08007748 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007748:	b480      	push	{r7}
 800774a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800774c:	4b03      	ldr	r3, [pc, #12]	; (800775c <HAL_RCC_GetHCLKFreq+0x14>)
 800774e:	681b      	ldr	r3, [r3, #0]
}
 8007750:	4618      	mov	r0, r3
 8007752:	46bd      	mov	sp, r7
 8007754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007758:	4770      	bx	lr
 800775a:	bf00      	nop
 800775c:	200000f8 	.word	0x200000f8

08007760 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007760:	b580      	push	{r7, lr}
 8007762:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007764:	f7ff fff0 	bl	8007748 <HAL_RCC_GetHCLKFreq>
 8007768:	4601      	mov	r1, r0
 800776a:	4b05      	ldr	r3, [pc, #20]	; (8007780 <HAL_RCC_GetPCLK1Freq+0x20>)
 800776c:	689b      	ldr	r3, [r3, #8]
 800776e:	0a9b      	lsrs	r3, r3, #10
 8007770:	f003 0307 	and.w	r3, r3, #7
 8007774:	4a03      	ldr	r2, [pc, #12]	; (8007784 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007776:	5cd3      	ldrb	r3, [r2, r3]
 8007778:	fa21 f303 	lsr.w	r3, r1, r3
}
 800777c:	4618      	mov	r0, r3
 800777e:	bd80      	pop	{r7, pc}
 8007780:	40023800 	.word	0x40023800
 8007784:	0800a488 	.word	0x0800a488

08007788 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007788:	b580      	push	{r7, lr}
 800778a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800778c:	f7ff ffdc 	bl	8007748 <HAL_RCC_GetHCLKFreq>
 8007790:	4601      	mov	r1, r0
 8007792:	4b05      	ldr	r3, [pc, #20]	; (80077a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007794:	689b      	ldr	r3, [r3, #8]
 8007796:	0b5b      	lsrs	r3, r3, #13
 8007798:	f003 0307 	and.w	r3, r3, #7
 800779c:	4a03      	ldr	r2, [pc, #12]	; (80077ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800779e:	5cd3      	ldrb	r3, [r2, r3]
 80077a0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80077a4:	4618      	mov	r0, r3
 80077a6:	bd80      	pop	{r7, pc}
 80077a8:	40023800 	.word	0x40023800
 80077ac:	0800a488 	.word	0x0800a488

080077b0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80077b0:	b480      	push	{r7}
 80077b2:	b083      	sub	sp, #12
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
 80077b8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	220f      	movs	r2, #15
 80077be:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80077c0:	4b12      	ldr	r3, [pc, #72]	; (800780c <HAL_RCC_GetClockConfig+0x5c>)
 80077c2:	689b      	ldr	r3, [r3, #8]
 80077c4:	f003 0203 	and.w	r2, r3, #3
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80077cc:	4b0f      	ldr	r3, [pc, #60]	; (800780c <HAL_RCC_GetClockConfig+0x5c>)
 80077ce:	689b      	ldr	r3, [r3, #8]
 80077d0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80077d8:	4b0c      	ldr	r3, [pc, #48]	; (800780c <HAL_RCC_GetClockConfig+0x5c>)
 80077da:	689b      	ldr	r3, [r3, #8]
 80077dc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80077e4:	4b09      	ldr	r3, [pc, #36]	; (800780c <HAL_RCC_GetClockConfig+0x5c>)
 80077e6:	689b      	ldr	r3, [r3, #8]
 80077e8:	08db      	lsrs	r3, r3, #3
 80077ea:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80077f2:	4b07      	ldr	r3, [pc, #28]	; (8007810 <HAL_RCC_GetClockConfig+0x60>)
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	f003 020f 	and.w	r2, r3, #15
 80077fa:	683b      	ldr	r3, [r7, #0]
 80077fc:	601a      	str	r2, [r3, #0]
}
 80077fe:	bf00      	nop
 8007800:	370c      	adds	r7, #12
 8007802:	46bd      	mov	sp, r7
 8007804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007808:	4770      	bx	lr
 800780a:	bf00      	nop
 800780c:	40023800 	.word	0x40023800
 8007810:	40023c00 	.word	0x40023c00

08007814 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007814:	b580      	push	{r7, lr}
 8007816:	b086      	sub	sp, #24
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800781c:	2300      	movs	r3, #0
 800781e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8007820:	2300      	movs	r3, #0
 8007822:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	f003 0301 	and.w	r3, r3, #1
 800782c:	2b00      	cmp	r3, #0
 800782e:	d10b      	bne.n	8007848 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007838:	2b00      	cmp	r3, #0
 800783a:	d105      	bne.n	8007848 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8007844:	2b00      	cmp	r3, #0
 8007846:	d075      	beq.n	8007934 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007848:	4bad      	ldr	r3, [pc, #692]	; (8007b00 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800784a:	2200      	movs	r2, #0
 800784c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800784e:	f7fc faa9 	bl	8003da4 <HAL_GetTick>
 8007852:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007854:	e008      	b.n	8007868 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007856:	f7fc faa5 	bl	8003da4 <HAL_GetTick>
 800785a:	4602      	mov	r2, r0
 800785c:	697b      	ldr	r3, [r7, #20]
 800785e:	1ad3      	subs	r3, r2, r3
 8007860:	2b02      	cmp	r3, #2
 8007862:	d901      	bls.n	8007868 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007864:	2303      	movs	r3, #3
 8007866:	e18b      	b.n	8007b80 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007868:	4ba6      	ldr	r3, [pc, #664]	; (8007b04 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007870:	2b00      	cmp	r3, #0
 8007872:	d1f0      	bne.n	8007856 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	f003 0301 	and.w	r3, r3, #1
 800787c:	2b00      	cmp	r3, #0
 800787e:	d009      	beq.n	8007894 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	685b      	ldr	r3, [r3, #4]
 8007884:	019a      	lsls	r2, r3, #6
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	689b      	ldr	r3, [r3, #8]
 800788a:	071b      	lsls	r3, r3, #28
 800788c:	499d      	ldr	r1, [pc, #628]	; (8007b04 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800788e:	4313      	orrs	r3, r2
 8007890:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	f003 0302 	and.w	r3, r3, #2
 800789c:	2b00      	cmp	r3, #0
 800789e:	d01f      	beq.n	80078e0 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80078a0:	4b98      	ldr	r3, [pc, #608]	; (8007b04 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80078a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80078a6:	0f1b      	lsrs	r3, r3, #28
 80078a8:	f003 0307 	and.w	r3, r3, #7
 80078ac:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	685b      	ldr	r3, [r3, #4]
 80078b2:	019a      	lsls	r2, r3, #6
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	68db      	ldr	r3, [r3, #12]
 80078b8:	061b      	lsls	r3, r3, #24
 80078ba:	431a      	orrs	r2, r3
 80078bc:	693b      	ldr	r3, [r7, #16]
 80078be:	071b      	lsls	r3, r3, #28
 80078c0:	4990      	ldr	r1, [pc, #576]	; (8007b04 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80078c2:	4313      	orrs	r3, r2
 80078c4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80078c8:	4b8e      	ldr	r3, [pc, #568]	; (8007b04 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80078ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80078ce:	f023 021f 	bic.w	r2, r3, #31
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	69db      	ldr	r3, [r3, #28]
 80078d6:	3b01      	subs	r3, #1
 80078d8:	498a      	ldr	r1, [pc, #552]	; (8007b04 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80078da:	4313      	orrs	r3, r2
 80078dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d00d      	beq.n	8007908 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	685b      	ldr	r3, [r3, #4]
 80078f0:	019a      	lsls	r2, r3, #6
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	68db      	ldr	r3, [r3, #12]
 80078f6:	061b      	lsls	r3, r3, #24
 80078f8:	431a      	orrs	r2, r3
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	689b      	ldr	r3, [r3, #8]
 80078fe:	071b      	lsls	r3, r3, #28
 8007900:	4980      	ldr	r1, [pc, #512]	; (8007b04 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007902:	4313      	orrs	r3, r2
 8007904:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007908:	4b7d      	ldr	r3, [pc, #500]	; (8007b00 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800790a:	2201      	movs	r2, #1
 800790c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800790e:	f7fc fa49 	bl	8003da4 <HAL_GetTick>
 8007912:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007914:	e008      	b.n	8007928 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007916:	f7fc fa45 	bl	8003da4 <HAL_GetTick>
 800791a:	4602      	mov	r2, r0
 800791c:	697b      	ldr	r3, [r7, #20]
 800791e:	1ad3      	subs	r3, r2, r3
 8007920:	2b02      	cmp	r3, #2
 8007922:	d901      	bls.n	8007928 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007924:	2303      	movs	r3, #3
 8007926:	e12b      	b.n	8007b80 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007928:	4b76      	ldr	r3, [pc, #472]	; (8007b04 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007930:	2b00      	cmp	r3, #0
 8007932:	d0f0      	beq.n	8007916 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	f003 0304 	and.w	r3, r3, #4
 800793c:	2b00      	cmp	r3, #0
 800793e:	d105      	bne.n	800794c <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8007948:	2b00      	cmp	r3, #0
 800794a:	d079      	beq.n	8007a40 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800794c:	4b6e      	ldr	r3, [pc, #440]	; (8007b08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800794e:	2200      	movs	r2, #0
 8007950:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007952:	f7fc fa27 	bl	8003da4 <HAL_GetTick>
 8007956:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007958:	e008      	b.n	800796c <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800795a:	f7fc fa23 	bl	8003da4 <HAL_GetTick>
 800795e:	4602      	mov	r2, r0
 8007960:	697b      	ldr	r3, [r7, #20]
 8007962:	1ad3      	subs	r3, r2, r3
 8007964:	2b02      	cmp	r3, #2
 8007966:	d901      	bls.n	800796c <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007968:	2303      	movs	r3, #3
 800796a:	e109      	b.n	8007b80 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800796c:	4b65      	ldr	r3, [pc, #404]	; (8007b04 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007974:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007978:	d0ef      	beq.n	800795a <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	f003 0304 	and.w	r3, r3, #4
 8007982:	2b00      	cmp	r3, #0
 8007984:	d020      	beq.n	80079c8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007986:	4b5f      	ldr	r3, [pc, #380]	; (8007b04 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007988:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800798c:	0f1b      	lsrs	r3, r3, #28
 800798e:	f003 0307 	and.w	r3, r3, #7
 8007992:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	691b      	ldr	r3, [r3, #16]
 8007998:	019a      	lsls	r2, r3, #6
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	695b      	ldr	r3, [r3, #20]
 800799e:	061b      	lsls	r3, r3, #24
 80079a0:	431a      	orrs	r2, r3
 80079a2:	693b      	ldr	r3, [r7, #16]
 80079a4:	071b      	lsls	r3, r3, #28
 80079a6:	4957      	ldr	r1, [pc, #348]	; (8007b04 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80079a8:	4313      	orrs	r3, r2
 80079aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80079ae:	4b55      	ldr	r3, [pc, #340]	; (8007b04 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80079b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80079b4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	6a1b      	ldr	r3, [r3, #32]
 80079bc:	3b01      	subs	r3, #1
 80079be:	021b      	lsls	r3, r3, #8
 80079c0:	4950      	ldr	r1, [pc, #320]	; (8007b04 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80079c2:	4313      	orrs	r3, r2
 80079c4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	f003 0308 	and.w	r3, r3, #8
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d01e      	beq.n	8007a12 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80079d4:	4b4b      	ldr	r3, [pc, #300]	; (8007b04 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80079d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80079da:	0e1b      	lsrs	r3, r3, #24
 80079dc:	f003 030f 	and.w	r3, r3, #15
 80079e0:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	691b      	ldr	r3, [r3, #16]
 80079e6:	019a      	lsls	r2, r3, #6
 80079e8:	693b      	ldr	r3, [r7, #16]
 80079ea:	061b      	lsls	r3, r3, #24
 80079ec:	431a      	orrs	r2, r3
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	699b      	ldr	r3, [r3, #24]
 80079f2:	071b      	lsls	r3, r3, #28
 80079f4:	4943      	ldr	r1, [pc, #268]	; (8007b04 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80079f6:	4313      	orrs	r3, r2
 80079f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80079fc:	4b41      	ldr	r3, [pc, #260]	; (8007b04 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80079fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a02:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a0a:	493e      	ldr	r1, [pc, #248]	; (8007b04 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007a0c:	4313      	orrs	r3, r2
 8007a0e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007a12:	4b3d      	ldr	r3, [pc, #244]	; (8007b08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007a14:	2201      	movs	r2, #1
 8007a16:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007a18:	f7fc f9c4 	bl	8003da4 <HAL_GetTick>
 8007a1c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007a1e:	e008      	b.n	8007a32 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8007a20:	f7fc f9c0 	bl	8003da4 <HAL_GetTick>
 8007a24:	4602      	mov	r2, r0
 8007a26:	697b      	ldr	r3, [r7, #20]
 8007a28:	1ad3      	subs	r3, r2, r3
 8007a2a:	2b02      	cmp	r3, #2
 8007a2c:	d901      	bls.n	8007a32 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007a2e:	2303      	movs	r3, #3
 8007a30:	e0a6      	b.n	8007b80 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007a32:	4b34      	ldr	r3, [pc, #208]	; (8007b04 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007a3a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007a3e:	d1ef      	bne.n	8007a20 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	f003 0320 	and.w	r3, r3, #32
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	f000 808d 	beq.w	8007b68 <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007a4e:	2300      	movs	r3, #0
 8007a50:	60fb      	str	r3, [r7, #12]
 8007a52:	4b2c      	ldr	r3, [pc, #176]	; (8007b04 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a56:	4a2b      	ldr	r2, [pc, #172]	; (8007b04 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007a58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007a5c:	6413      	str	r3, [r2, #64]	; 0x40
 8007a5e:	4b29      	ldr	r3, [pc, #164]	; (8007b04 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a66:	60fb      	str	r3, [r7, #12]
 8007a68:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8007a6a:	4b28      	ldr	r3, [pc, #160]	; (8007b0c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	4a27      	ldr	r2, [pc, #156]	; (8007b0c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8007a70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007a74:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007a76:	f7fc f995 	bl	8003da4 <HAL_GetTick>
 8007a7a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007a7c:	e008      	b.n	8007a90 <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007a7e:	f7fc f991 	bl	8003da4 <HAL_GetTick>
 8007a82:	4602      	mov	r2, r0
 8007a84:	697b      	ldr	r3, [r7, #20]
 8007a86:	1ad3      	subs	r3, r2, r3
 8007a88:	2b02      	cmp	r3, #2
 8007a8a:	d901      	bls.n	8007a90 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 8007a8c:	2303      	movs	r3, #3
 8007a8e:	e077      	b.n	8007b80 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007a90:	4b1e      	ldr	r3, [pc, #120]	; (8007b0c <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d0f0      	beq.n	8007a7e <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007a9c:	4b19      	ldr	r3, [pc, #100]	; (8007b04 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007a9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007aa0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007aa4:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007aa6:	693b      	ldr	r3, [r7, #16]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d039      	beq.n	8007b20 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ab0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007ab4:	693a      	ldr	r2, [r7, #16]
 8007ab6:	429a      	cmp	r2, r3
 8007ab8:	d032      	beq.n	8007b20 <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007aba:	4b12      	ldr	r3, [pc, #72]	; (8007b04 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007abc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007abe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ac2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007ac4:	4b12      	ldr	r3, [pc, #72]	; (8007b10 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8007ac6:	2201      	movs	r2, #1
 8007ac8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007aca:	4b11      	ldr	r3, [pc, #68]	; (8007b10 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8007acc:	2200      	movs	r2, #0
 8007ace:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007ad0:	4a0c      	ldr	r2, [pc, #48]	; (8007b04 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007ad2:	693b      	ldr	r3, [r7, #16]
 8007ad4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007ad6:	4b0b      	ldr	r3, [pc, #44]	; (8007b04 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8007ad8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ada:	f003 0301 	and.w	r3, r3, #1
 8007ade:	2b01      	cmp	r3, #1
 8007ae0:	d11e      	bne.n	8007b20 <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8007ae2:	f7fc f95f 	bl	8003da4 <HAL_GetTick>
 8007ae6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007ae8:	e014      	b.n	8007b14 <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007aea:	f7fc f95b 	bl	8003da4 <HAL_GetTick>
 8007aee:	4602      	mov	r2, r0
 8007af0:	697b      	ldr	r3, [r7, #20]
 8007af2:	1ad3      	subs	r3, r2, r3
 8007af4:	f241 3288 	movw	r2, #5000	; 0x1388
 8007af8:	4293      	cmp	r3, r2
 8007afa:	d90b      	bls.n	8007b14 <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 8007afc:	2303      	movs	r3, #3
 8007afe:	e03f      	b.n	8007b80 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 8007b00:	42470068 	.word	0x42470068
 8007b04:	40023800 	.word	0x40023800
 8007b08:	42470070 	.word	0x42470070
 8007b0c:	40007000 	.word	0x40007000
 8007b10:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007b14:	4b1c      	ldr	r3, [pc, #112]	; (8007b88 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007b16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b18:	f003 0302 	and.w	r3, r3, #2
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d0e4      	beq.n	8007aea <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b24:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007b28:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007b2c:	d10d      	bne.n	8007b4a <HAL_RCCEx_PeriphCLKConfig+0x336>
 8007b2e:	4b16      	ldr	r3, [pc, #88]	; (8007b88 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007b30:	689b      	ldr	r3, [r3, #8]
 8007b32:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b3a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007b3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b42:	4911      	ldr	r1, [pc, #68]	; (8007b88 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007b44:	4313      	orrs	r3, r2
 8007b46:	608b      	str	r3, [r1, #8]
 8007b48:	e005      	b.n	8007b56 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8007b4a:	4b0f      	ldr	r3, [pc, #60]	; (8007b88 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007b4c:	689b      	ldr	r3, [r3, #8]
 8007b4e:	4a0e      	ldr	r2, [pc, #56]	; (8007b88 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007b50:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007b54:	6093      	str	r3, [r2, #8]
 8007b56:	4b0c      	ldr	r3, [pc, #48]	; (8007b88 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007b58:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007b62:	4909      	ldr	r1, [pc, #36]	; (8007b88 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007b64:	4313      	orrs	r3, r2
 8007b66:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	f003 0310 	and.w	r3, r3, #16
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d004      	beq.n	8007b7e <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8007b7a:	4b04      	ldr	r3, [pc, #16]	; (8007b8c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8007b7c:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8007b7e:	2300      	movs	r3, #0
}
 8007b80:	4618      	mov	r0, r3
 8007b82:	3718      	adds	r7, #24
 8007b84:	46bd      	mov	sp, r7
 8007b86:	bd80      	pop	{r7, pc}
 8007b88:	40023800 	.word	0x40023800
 8007b8c:	424711e0 	.word	0x424711e0

08007b90 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8007b90:	b580      	push	{r7, lr}
 8007b92:	b082      	sub	sp, #8
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]
 8007b98:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d101      	bne.n	8007ba4 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8007ba0:	2301      	movs	r3, #1
 8007ba2:	e025      	b.n	8007bf0 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007baa:	b2db      	uxtb	r3, r3
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d106      	bne.n	8007bbe <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8007bb8:	6878      	ldr	r0, [r7, #4]
 8007bba:	f7f8 ffbb 	bl	8000b34 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	2202      	movs	r2, #2
 8007bc2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681a      	ldr	r2, [r3, #0]
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	3304      	adds	r3, #4
 8007bce:	4619      	mov	r1, r3
 8007bd0:	4610      	mov	r0, r2
 8007bd2:	f001 fe93 	bl	80098fc <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	6818      	ldr	r0, [r3, #0]
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	685b      	ldr	r3, [r3, #4]
 8007bde:	461a      	mov	r2, r3
 8007be0:	6839      	ldr	r1, [r7, #0]
 8007be2:	f001 fefe 	bl	80099e2 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	2201      	movs	r2, #1
 8007bea:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8007bee:	2300      	movs	r3, #0
}
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	3708      	adds	r7, #8
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	bd80      	pop	{r7, pc}

08007bf8 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b084      	sub	sp, #16
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	60f8      	str	r0, [r7, #12]
 8007c00:	60b9      	str	r1, [r7, #8]
 8007c02:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007c0a:	b2db      	uxtb	r3, r3
 8007c0c:	2b02      	cmp	r3, #2
 8007c0e:	d101      	bne.n	8007c14 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8007c10:	2302      	movs	r3, #2
 8007c12:	e018      	b.n	8007c46 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	2202      	movs	r2, #2
 8007c18:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	687a      	ldr	r2, [r7, #4]
 8007c22:	68b9      	ldr	r1, [r7, #8]
 8007c24:	4618      	mov	r0, r3
 8007c26:	f001 ff5b 	bl	8009ae0 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8007c2a:	68bb      	ldr	r3, [r7, #8]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	2b02      	cmp	r3, #2
 8007c30:	d104      	bne.n	8007c3c <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	2205      	movs	r2, #5
 8007c36:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8007c3a:	e003      	b.n	8007c44 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	2201      	movs	r2, #1
 8007c40:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8007c44:	2300      	movs	r3, #0
}
 8007c46:	4618      	mov	r0, r3
 8007c48:	3710      	adds	r7, #16
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	bd80      	pop	{r7, pc}

08007c4e <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8007c4e:	b580      	push	{r7, lr}
 8007c50:	b082      	sub	sp, #8
 8007c52:	af00      	add	r7, sp, #0
 8007c54:	6078      	str	r0, [r7, #4]
 8007c56:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007c5e:	b2db      	uxtb	r3, r3
 8007c60:	2b02      	cmp	r3, #2
 8007c62:	d101      	bne.n	8007c68 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8007c64:	2302      	movs	r3, #2
 8007c66:	e00e      	b.n	8007c86 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2202      	movs	r2, #2
 8007c6c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	6839      	ldr	r1, [r7, #0]
 8007c76:	4618      	mov	r0, r3
 8007c78:	f001 ff6e 	bl	8009b58 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	2201      	movs	r2, #1
 8007c80:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8007c84:	2300      	movs	r3, #0
}
 8007c86:	4618      	mov	r0, r3
 8007c88:	3708      	adds	r7, #8
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	bd80      	pop	{r7, pc}

08007c8e <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007c8e:	b580      	push	{r7, lr}
 8007c90:	b082      	sub	sp, #8
 8007c92:	af00      	add	r7, sp, #0
 8007c94:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d101      	bne.n	8007ca0 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007c9c:	2301      	movs	r3, #1
 8007c9e:	e056      	b.n	8007d4e <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007cac:	b2db      	uxtb	r3, r3
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d106      	bne.n	8007cc0 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	2200      	movs	r2, #0
 8007cb6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007cba:	6878      	ldr	r0, [r7, #4]
 8007cbc:	f7f9 fe62 	bl	8001984 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2202      	movs	r2, #2
 8007cc4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	681a      	ldr	r2, [r3, #0]
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007cd6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	685a      	ldr	r2, [r3, #4]
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	689b      	ldr	r3, [r3, #8]
 8007ce0:	431a      	orrs	r2, r3
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	68db      	ldr	r3, [r3, #12]
 8007ce6:	431a      	orrs	r2, r3
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	691b      	ldr	r3, [r3, #16]
 8007cec:	431a      	orrs	r2, r3
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	695b      	ldr	r3, [r3, #20]
 8007cf2:	431a      	orrs	r2, r3
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	699b      	ldr	r3, [r3, #24]
 8007cf8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007cfc:	431a      	orrs	r2, r3
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	69db      	ldr	r3, [r3, #28]
 8007d02:	431a      	orrs	r2, r3
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	6a1b      	ldr	r3, [r3, #32]
 8007d08:	ea42 0103 	orr.w	r1, r2, r3
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	430a      	orrs	r2, r1
 8007d16:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	699b      	ldr	r3, [r3, #24]
 8007d1c:	0c1b      	lsrs	r3, r3, #16
 8007d1e:	f003 0104 	and.w	r1, r3, #4
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	430a      	orrs	r2, r1
 8007d2c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	69da      	ldr	r2, [r3, #28]
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007d3c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	2200      	movs	r2, #0
 8007d42:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2201      	movs	r2, #1
 8007d48:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007d4c:	2300      	movs	r3, #0
}
 8007d4e:	4618      	mov	r0, r3
 8007d50:	3708      	adds	r7, #8
 8007d52:	46bd      	mov	sp, r7
 8007d54:	bd80      	pop	{r7, pc}

08007d56 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8007d56:	b580      	push	{r7, lr}
 8007d58:	b082      	sub	sp, #8
 8007d5a:	af00      	add	r7, sp, #0
 8007d5c:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d101      	bne.n	8007d68 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8007d64:	2301      	movs	r3, #1
 8007d66:	e01a      	b.n	8007d9e <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2202      	movs	r2, #2
 8007d6c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	681a      	ldr	r2, [r3, #0]
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007d7e:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8007d80:	6878      	ldr	r0, [r7, #4]
 8007d82:	f7f9 fe67 	bl	8001a54 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	2200      	movs	r2, #0
 8007d8a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2200      	movs	r2, #0
 8007d90:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	2200      	movs	r2, #0
 8007d98:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8007d9c:	2300      	movs	r3, #0
}
 8007d9e:	4618      	mov	r0, r3
 8007da0:	3708      	adds	r7, #8
 8007da2:	46bd      	mov	sp, r7
 8007da4:	bd80      	pop	{r7, pc}

08007da6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007da6:	b580      	push	{r7, lr}
 8007da8:	b088      	sub	sp, #32
 8007daa:	af00      	add	r7, sp, #0
 8007dac:	60f8      	str	r0, [r7, #12]
 8007dae:	60b9      	str	r1, [r7, #8]
 8007db0:	603b      	str	r3, [r7, #0]
 8007db2:	4613      	mov	r3, r2
 8007db4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007db6:	2300      	movs	r3, #0
 8007db8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007dc0:	2b01      	cmp	r3, #1
 8007dc2:	d101      	bne.n	8007dc8 <HAL_SPI_Transmit+0x22>
 8007dc4:	2302      	movs	r3, #2
 8007dc6:	e11e      	b.n	8008006 <HAL_SPI_Transmit+0x260>
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	2201      	movs	r2, #1
 8007dcc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007dd0:	f7fb ffe8 	bl	8003da4 <HAL_GetTick>
 8007dd4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007dd6:	88fb      	ldrh	r3, [r7, #6]
 8007dd8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007de0:	b2db      	uxtb	r3, r3
 8007de2:	2b01      	cmp	r3, #1
 8007de4:	d002      	beq.n	8007dec <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007de6:	2302      	movs	r3, #2
 8007de8:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007dea:	e103      	b.n	8007ff4 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8007dec:	68bb      	ldr	r3, [r7, #8]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d002      	beq.n	8007df8 <HAL_SPI_Transmit+0x52>
 8007df2:	88fb      	ldrh	r3, [r7, #6]
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d102      	bne.n	8007dfe <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007df8:	2301      	movs	r3, #1
 8007dfa:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007dfc:	e0fa      	b.n	8007ff4 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	2203      	movs	r2, #3
 8007e02:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	2200      	movs	r2, #0
 8007e0a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	68ba      	ldr	r2, [r7, #8]
 8007e10:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	88fa      	ldrh	r2, [r7, #6]
 8007e16:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	88fa      	ldrh	r2, [r7, #6]
 8007e1c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	2200      	movs	r2, #0
 8007e22:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	2200      	movs	r2, #0
 8007e28:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	2200      	movs	r2, #0
 8007e2e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	2200      	movs	r2, #0
 8007e34:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	2200      	movs	r2, #0
 8007e3a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	689b      	ldr	r3, [r3, #8]
 8007e40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007e44:	d107      	bne.n	8007e56 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	681a      	ldr	r2, [r3, #0]
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007e54:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e60:	2b40      	cmp	r3, #64	; 0x40
 8007e62:	d007      	beq.n	8007e74 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	681a      	ldr	r2, [r3, #0]
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007e72:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	68db      	ldr	r3, [r3, #12]
 8007e78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007e7c:	d14b      	bne.n	8007f16 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	685b      	ldr	r3, [r3, #4]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d002      	beq.n	8007e8c <HAL_SPI_Transmit+0xe6>
 8007e86:	8afb      	ldrh	r3, [r7, #22]
 8007e88:	2b01      	cmp	r3, #1
 8007e8a:	d13e      	bne.n	8007f0a <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e90:	881a      	ldrh	r2, [r3, #0]
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e9c:	1c9a      	adds	r2, r3, #2
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007ea6:	b29b      	uxth	r3, r3
 8007ea8:	3b01      	subs	r3, #1
 8007eaa:	b29a      	uxth	r2, r3
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007eb0:	e02b      	b.n	8007f0a <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	689b      	ldr	r3, [r3, #8]
 8007eb8:	f003 0302 	and.w	r3, r3, #2
 8007ebc:	2b02      	cmp	r3, #2
 8007ebe:	d112      	bne.n	8007ee6 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ec4:	881a      	ldrh	r2, [r3, #0]
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ed0:	1c9a      	adds	r2, r3, #2
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007eda:	b29b      	uxth	r3, r3
 8007edc:	3b01      	subs	r3, #1
 8007ede:	b29a      	uxth	r2, r3
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	86da      	strh	r2, [r3, #54]	; 0x36
 8007ee4:	e011      	b.n	8007f0a <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007ee6:	f7fb ff5d 	bl	8003da4 <HAL_GetTick>
 8007eea:	4602      	mov	r2, r0
 8007eec:	69bb      	ldr	r3, [r7, #24]
 8007eee:	1ad3      	subs	r3, r2, r3
 8007ef0:	683a      	ldr	r2, [r7, #0]
 8007ef2:	429a      	cmp	r2, r3
 8007ef4:	d803      	bhi.n	8007efe <HAL_SPI_Transmit+0x158>
 8007ef6:	683b      	ldr	r3, [r7, #0]
 8007ef8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007efc:	d102      	bne.n	8007f04 <HAL_SPI_Transmit+0x15e>
 8007efe:	683b      	ldr	r3, [r7, #0]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d102      	bne.n	8007f0a <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8007f04:	2303      	movs	r3, #3
 8007f06:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007f08:	e074      	b.n	8007ff4 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007f0e:	b29b      	uxth	r3, r3
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d1ce      	bne.n	8007eb2 <HAL_SPI_Transmit+0x10c>
 8007f14:	e04c      	b.n	8007fb0 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	685b      	ldr	r3, [r3, #4]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d002      	beq.n	8007f24 <HAL_SPI_Transmit+0x17e>
 8007f1e:	8afb      	ldrh	r3, [r7, #22]
 8007f20:	2b01      	cmp	r3, #1
 8007f22:	d140      	bne.n	8007fa6 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	330c      	adds	r3, #12
 8007f2e:	7812      	ldrb	r2, [r2, #0]
 8007f30:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f36:	1c5a      	adds	r2, r3, #1
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007f40:	b29b      	uxth	r3, r3
 8007f42:	3b01      	subs	r3, #1
 8007f44:	b29a      	uxth	r2, r3
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007f4a:	e02c      	b.n	8007fa6 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	689b      	ldr	r3, [r3, #8]
 8007f52:	f003 0302 	and.w	r3, r3, #2
 8007f56:	2b02      	cmp	r3, #2
 8007f58:	d113      	bne.n	8007f82 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	330c      	adds	r3, #12
 8007f64:	7812      	ldrb	r2, [r2, #0]
 8007f66:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f6c:	1c5a      	adds	r2, r3, #1
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007f76:	b29b      	uxth	r3, r3
 8007f78:	3b01      	subs	r3, #1
 8007f7a:	b29a      	uxth	r2, r3
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	86da      	strh	r2, [r3, #54]	; 0x36
 8007f80:	e011      	b.n	8007fa6 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007f82:	f7fb ff0f 	bl	8003da4 <HAL_GetTick>
 8007f86:	4602      	mov	r2, r0
 8007f88:	69bb      	ldr	r3, [r7, #24]
 8007f8a:	1ad3      	subs	r3, r2, r3
 8007f8c:	683a      	ldr	r2, [r7, #0]
 8007f8e:	429a      	cmp	r2, r3
 8007f90:	d803      	bhi.n	8007f9a <HAL_SPI_Transmit+0x1f4>
 8007f92:	683b      	ldr	r3, [r7, #0]
 8007f94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f98:	d102      	bne.n	8007fa0 <HAL_SPI_Transmit+0x1fa>
 8007f9a:	683b      	ldr	r3, [r7, #0]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d102      	bne.n	8007fa6 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8007fa0:	2303      	movs	r3, #3
 8007fa2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007fa4:	e026      	b.n	8007ff4 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007faa:	b29b      	uxth	r3, r3
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d1cd      	bne.n	8007f4c <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007fb0:	69ba      	ldr	r2, [r7, #24]
 8007fb2:	6839      	ldr	r1, [r7, #0]
 8007fb4:	68f8      	ldr	r0, [r7, #12]
 8007fb6:	f000 fbb3 	bl	8008720 <SPI_EndRxTxTransaction>
 8007fba:	4603      	mov	r3, r0
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d002      	beq.n	8007fc6 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	2220      	movs	r2, #32
 8007fc4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	689b      	ldr	r3, [r3, #8]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d10a      	bne.n	8007fe4 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007fce:	2300      	movs	r3, #0
 8007fd0:	613b      	str	r3, [r7, #16]
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	68db      	ldr	r3, [r3, #12]
 8007fd8:	613b      	str	r3, [r7, #16]
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	689b      	ldr	r3, [r3, #8]
 8007fe0:	613b      	str	r3, [r7, #16]
 8007fe2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d002      	beq.n	8007ff2 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8007fec:	2301      	movs	r3, #1
 8007fee:	77fb      	strb	r3, [r7, #31]
 8007ff0:	e000      	b.n	8007ff4 <HAL_SPI_Transmit+0x24e>
  }

error:
 8007ff2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	2201      	movs	r2, #1
 8007ff8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	2200      	movs	r2, #0
 8008000:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008004:	7ffb      	ldrb	r3, [r7, #31]
}
 8008006:	4618      	mov	r0, r3
 8008008:	3720      	adds	r7, #32
 800800a:	46bd      	mov	sp, r7
 800800c:	bd80      	pop	{r7, pc}

0800800e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800800e:	b580      	push	{r7, lr}
 8008010:	b088      	sub	sp, #32
 8008012:	af02      	add	r7, sp, #8
 8008014:	60f8      	str	r0, [r7, #12]
 8008016:	60b9      	str	r1, [r7, #8]
 8008018:	603b      	str	r3, [r7, #0]
 800801a:	4613      	mov	r3, r2
 800801c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800801e:	2300      	movs	r3, #0
 8008020:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	685b      	ldr	r3, [r3, #4]
 8008026:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800802a:	d112      	bne.n	8008052 <HAL_SPI_Receive+0x44>
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	689b      	ldr	r3, [r3, #8]
 8008030:	2b00      	cmp	r3, #0
 8008032:	d10e      	bne.n	8008052 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	2204      	movs	r2, #4
 8008038:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800803c:	88fa      	ldrh	r2, [r7, #6]
 800803e:	683b      	ldr	r3, [r7, #0]
 8008040:	9300      	str	r3, [sp, #0]
 8008042:	4613      	mov	r3, r2
 8008044:	68ba      	ldr	r2, [r7, #8]
 8008046:	68b9      	ldr	r1, [r7, #8]
 8008048:	68f8      	ldr	r0, [r7, #12]
 800804a:	f000 f8e9 	bl	8008220 <HAL_SPI_TransmitReceive>
 800804e:	4603      	mov	r3, r0
 8008050:	e0e2      	b.n	8008218 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008058:	2b01      	cmp	r3, #1
 800805a:	d101      	bne.n	8008060 <HAL_SPI_Receive+0x52>
 800805c:	2302      	movs	r3, #2
 800805e:	e0db      	b.n	8008218 <HAL_SPI_Receive+0x20a>
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	2201      	movs	r2, #1
 8008064:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008068:	f7fb fe9c 	bl	8003da4 <HAL_GetTick>
 800806c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008074:	b2db      	uxtb	r3, r3
 8008076:	2b01      	cmp	r3, #1
 8008078:	d002      	beq.n	8008080 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800807a:	2302      	movs	r3, #2
 800807c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800807e:	e0c2      	b.n	8008206 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8008080:	68bb      	ldr	r3, [r7, #8]
 8008082:	2b00      	cmp	r3, #0
 8008084:	d002      	beq.n	800808c <HAL_SPI_Receive+0x7e>
 8008086:	88fb      	ldrh	r3, [r7, #6]
 8008088:	2b00      	cmp	r3, #0
 800808a:	d102      	bne.n	8008092 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800808c:	2301      	movs	r3, #1
 800808e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008090:	e0b9      	b.n	8008206 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	2204      	movs	r2, #4
 8008096:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	2200      	movs	r2, #0
 800809e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	68ba      	ldr	r2, [r7, #8]
 80080a4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	88fa      	ldrh	r2, [r7, #6]
 80080aa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	88fa      	ldrh	r2, [r7, #6]
 80080b0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	2200      	movs	r2, #0
 80080b6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	2200      	movs	r2, #0
 80080bc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	2200      	movs	r2, #0
 80080c2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	2200      	movs	r2, #0
 80080c8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	2200      	movs	r2, #0
 80080ce:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	689b      	ldr	r3, [r3, #8]
 80080d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80080d8:	d107      	bne.n	80080ea <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	681a      	ldr	r2, [r3, #0]
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80080e8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080f4:	2b40      	cmp	r3, #64	; 0x40
 80080f6:	d007      	beq.n	8008108 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	681a      	ldr	r2, [r3, #0]
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008106:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	68db      	ldr	r3, [r3, #12]
 800810c:	2b00      	cmp	r3, #0
 800810e:	d162      	bne.n	80081d6 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8008110:	e02e      	b.n	8008170 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	689b      	ldr	r3, [r3, #8]
 8008118:	f003 0301 	and.w	r3, r3, #1
 800811c:	2b01      	cmp	r3, #1
 800811e:	d115      	bne.n	800814c <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	f103 020c 	add.w	r2, r3, #12
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800812c:	7812      	ldrb	r2, [r2, #0]
 800812e:	b2d2      	uxtb	r2, r2
 8008130:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008136:	1c5a      	adds	r2, r3, #1
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008140:	b29b      	uxth	r3, r3
 8008142:	3b01      	subs	r3, #1
 8008144:	b29a      	uxth	r2, r3
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	87da      	strh	r2, [r3, #62]	; 0x3e
 800814a:	e011      	b.n	8008170 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800814c:	f7fb fe2a 	bl	8003da4 <HAL_GetTick>
 8008150:	4602      	mov	r2, r0
 8008152:	693b      	ldr	r3, [r7, #16]
 8008154:	1ad3      	subs	r3, r2, r3
 8008156:	683a      	ldr	r2, [r7, #0]
 8008158:	429a      	cmp	r2, r3
 800815a:	d803      	bhi.n	8008164 <HAL_SPI_Receive+0x156>
 800815c:	683b      	ldr	r3, [r7, #0]
 800815e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008162:	d102      	bne.n	800816a <HAL_SPI_Receive+0x15c>
 8008164:	683b      	ldr	r3, [r7, #0]
 8008166:	2b00      	cmp	r3, #0
 8008168:	d102      	bne.n	8008170 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 800816a:	2303      	movs	r3, #3
 800816c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800816e:	e04a      	b.n	8008206 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008174:	b29b      	uxth	r3, r3
 8008176:	2b00      	cmp	r3, #0
 8008178:	d1cb      	bne.n	8008112 <HAL_SPI_Receive+0x104>
 800817a:	e031      	b.n	80081e0 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	689b      	ldr	r3, [r3, #8]
 8008182:	f003 0301 	and.w	r3, r3, #1
 8008186:	2b01      	cmp	r3, #1
 8008188:	d113      	bne.n	80081b2 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	68da      	ldr	r2, [r3, #12]
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008194:	b292      	uxth	r2, r2
 8008196:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800819c:	1c9a      	adds	r2, r3, #2
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80081a6:	b29b      	uxth	r3, r3
 80081a8:	3b01      	subs	r3, #1
 80081aa:	b29a      	uxth	r2, r3
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	87da      	strh	r2, [r3, #62]	; 0x3e
 80081b0:	e011      	b.n	80081d6 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80081b2:	f7fb fdf7 	bl	8003da4 <HAL_GetTick>
 80081b6:	4602      	mov	r2, r0
 80081b8:	693b      	ldr	r3, [r7, #16]
 80081ba:	1ad3      	subs	r3, r2, r3
 80081bc:	683a      	ldr	r2, [r7, #0]
 80081be:	429a      	cmp	r2, r3
 80081c0:	d803      	bhi.n	80081ca <HAL_SPI_Receive+0x1bc>
 80081c2:	683b      	ldr	r3, [r7, #0]
 80081c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081c8:	d102      	bne.n	80081d0 <HAL_SPI_Receive+0x1c2>
 80081ca:	683b      	ldr	r3, [r7, #0]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d102      	bne.n	80081d6 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 80081d0:	2303      	movs	r3, #3
 80081d2:	75fb      	strb	r3, [r7, #23]
          goto error;
 80081d4:	e017      	b.n	8008206 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80081da:	b29b      	uxth	r3, r3
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d1cd      	bne.n	800817c <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80081e0:	693a      	ldr	r2, [r7, #16]
 80081e2:	6839      	ldr	r1, [r7, #0]
 80081e4:	68f8      	ldr	r0, [r7, #12]
 80081e6:	f000 fa35 	bl	8008654 <SPI_EndRxTransaction>
 80081ea:	4603      	mov	r3, r0
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d002      	beq.n	80081f6 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	2220      	movs	r2, #32
 80081f4:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d002      	beq.n	8008204 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 80081fe:	2301      	movs	r3, #1
 8008200:	75fb      	strb	r3, [r7, #23]
 8008202:	e000      	b.n	8008206 <HAL_SPI_Receive+0x1f8>
  }

error :
 8008204:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	2201      	movs	r2, #1
 800820a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	2200      	movs	r2, #0
 8008212:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008216:	7dfb      	ldrb	r3, [r7, #23]
}
 8008218:	4618      	mov	r0, r3
 800821a:	3718      	adds	r7, #24
 800821c:	46bd      	mov	sp, r7
 800821e:	bd80      	pop	{r7, pc}

08008220 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008220:	b580      	push	{r7, lr}
 8008222:	b08c      	sub	sp, #48	; 0x30
 8008224:	af00      	add	r7, sp, #0
 8008226:	60f8      	str	r0, [r7, #12]
 8008228:	60b9      	str	r1, [r7, #8]
 800822a:	607a      	str	r2, [r7, #4]
 800822c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800822e:	2301      	movs	r3, #1
 8008230:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008232:	2300      	movs	r3, #0
 8008234:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800823e:	2b01      	cmp	r3, #1
 8008240:	d101      	bne.n	8008246 <HAL_SPI_TransmitReceive+0x26>
 8008242:	2302      	movs	r3, #2
 8008244:	e18a      	b.n	800855c <HAL_SPI_TransmitReceive+0x33c>
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	2201      	movs	r2, #1
 800824a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800824e:	f7fb fda9 	bl	8003da4 <HAL_GetTick>
 8008252:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800825a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	685b      	ldr	r3, [r3, #4]
 8008262:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8008264:	887b      	ldrh	r3, [r7, #2]
 8008266:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008268:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800826c:	2b01      	cmp	r3, #1
 800826e:	d00f      	beq.n	8008290 <HAL_SPI_TransmitReceive+0x70>
 8008270:	69fb      	ldr	r3, [r7, #28]
 8008272:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008276:	d107      	bne.n	8008288 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	689b      	ldr	r3, [r3, #8]
 800827c:	2b00      	cmp	r3, #0
 800827e:	d103      	bne.n	8008288 <HAL_SPI_TransmitReceive+0x68>
 8008280:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008284:	2b04      	cmp	r3, #4
 8008286:	d003      	beq.n	8008290 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8008288:	2302      	movs	r3, #2
 800828a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800828e:	e15b      	b.n	8008548 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008290:	68bb      	ldr	r3, [r7, #8]
 8008292:	2b00      	cmp	r3, #0
 8008294:	d005      	beq.n	80082a2 <HAL_SPI_TransmitReceive+0x82>
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	2b00      	cmp	r3, #0
 800829a:	d002      	beq.n	80082a2 <HAL_SPI_TransmitReceive+0x82>
 800829c:	887b      	ldrh	r3, [r7, #2]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d103      	bne.n	80082aa <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80082a2:	2301      	movs	r3, #1
 80082a4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80082a8:	e14e      	b.n	8008548 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80082b0:	b2db      	uxtb	r3, r3
 80082b2:	2b04      	cmp	r3, #4
 80082b4:	d003      	beq.n	80082be <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	2205      	movs	r2, #5
 80082ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	2200      	movs	r2, #0
 80082c2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	687a      	ldr	r2, [r7, #4]
 80082c8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	887a      	ldrh	r2, [r7, #2]
 80082ce:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	887a      	ldrh	r2, [r7, #2]
 80082d4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	68ba      	ldr	r2, [r7, #8]
 80082da:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	887a      	ldrh	r2, [r7, #2]
 80082e0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	887a      	ldrh	r2, [r7, #2]
 80082e6:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	2200      	movs	r2, #0
 80082ec:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	2200      	movs	r2, #0
 80082f2:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082fe:	2b40      	cmp	r3, #64	; 0x40
 8008300:	d007      	beq.n	8008312 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	681a      	ldr	r2, [r3, #0]
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008310:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	68db      	ldr	r3, [r3, #12]
 8008316:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800831a:	d178      	bne.n	800840e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	685b      	ldr	r3, [r3, #4]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d002      	beq.n	800832a <HAL_SPI_TransmitReceive+0x10a>
 8008324:	8b7b      	ldrh	r3, [r7, #26]
 8008326:	2b01      	cmp	r3, #1
 8008328:	d166      	bne.n	80083f8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800832e:	881a      	ldrh	r2, [r3, #0]
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800833a:	1c9a      	adds	r2, r3, #2
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008344:	b29b      	uxth	r3, r3
 8008346:	3b01      	subs	r3, #1
 8008348:	b29a      	uxth	r2, r3
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800834e:	e053      	b.n	80083f8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	689b      	ldr	r3, [r3, #8]
 8008356:	f003 0302 	and.w	r3, r3, #2
 800835a:	2b02      	cmp	r3, #2
 800835c:	d11b      	bne.n	8008396 <HAL_SPI_TransmitReceive+0x176>
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008362:	b29b      	uxth	r3, r3
 8008364:	2b00      	cmp	r3, #0
 8008366:	d016      	beq.n	8008396 <HAL_SPI_TransmitReceive+0x176>
 8008368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800836a:	2b01      	cmp	r3, #1
 800836c:	d113      	bne.n	8008396 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008372:	881a      	ldrh	r2, [r3, #0]
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800837e:	1c9a      	adds	r2, r3, #2
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008388:	b29b      	uxth	r3, r3
 800838a:	3b01      	subs	r3, #1
 800838c:	b29a      	uxth	r2, r3
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008392:	2300      	movs	r3, #0
 8008394:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	689b      	ldr	r3, [r3, #8]
 800839c:	f003 0301 	and.w	r3, r3, #1
 80083a0:	2b01      	cmp	r3, #1
 80083a2:	d119      	bne.n	80083d8 <HAL_SPI_TransmitReceive+0x1b8>
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80083a8:	b29b      	uxth	r3, r3
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d014      	beq.n	80083d8 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	68da      	ldr	r2, [r3, #12]
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083b8:	b292      	uxth	r2, r2
 80083ba:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083c0:	1c9a      	adds	r2, r3, #2
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80083ca:	b29b      	uxth	r3, r3
 80083cc:	3b01      	subs	r3, #1
 80083ce:	b29a      	uxth	r2, r3
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80083d4:	2301      	movs	r3, #1
 80083d6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80083d8:	f7fb fce4 	bl	8003da4 <HAL_GetTick>
 80083dc:	4602      	mov	r2, r0
 80083de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083e0:	1ad3      	subs	r3, r2, r3
 80083e2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80083e4:	429a      	cmp	r2, r3
 80083e6:	d807      	bhi.n	80083f8 <HAL_SPI_TransmitReceive+0x1d8>
 80083e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083ee:	d003      	beq.n	80083f8 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80083f0:	2303      	movs	r3, #3
 80083f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80083f6:	e0a7      	b.n	8008548 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80083fc:	b29b      	uxth	r3, r3
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d1a6      	bne.n	8008350 <HAL_SPI_TransmitReceive+0x130>
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008406:	b29b      	uxth	r3, r3
 8008408:	2b00      	cmp	r3, #0
 800840a:	d1a1      	bne.n	8008350 <HAL_SPI_TransmitReceive+0x130>
 800840c:	e07c      	b.n	8008508 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	685b      	ldr	r3, [r3, #4]
 8008412:	2b00      	cmp	r3, #0
 8008414:	d002      	beq.n	800841c <HAL_SPI_TransmitReceive+0x1fc>
 8008416:	8b7b      	ldrh	r3, [r7, #26]
 8008418:	2b01      	cmp	r3, #1
 800841a:	d16b      	bne.n	80084f4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	330c      	adds	r3, #12
 8008426:	7812      	ldrb	r2, [r2, #0]
 8008428:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800842e:	1c5a      	adds	r2, r3, #1
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008438:	b29b      	uxth	r3, r3
 800843a:	3b01      	subs	r3, #1
 800843c:	b29a      	uxth	r2, r3
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008442:	e057      	b.n	80084f4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	689b      	ldr	r3, [r3, #8]
 800844a:	f003 0302 	and.w	r3, r3, #2
 800844e:	2b02      	cmp	r3, #2
 8008450:	d11c      	bne.n	800848c <HAL_SPI_TransmitReceive+0x26c>
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008456:	b29b      	uxth	r3, r3
 8008458:	2b00      	cmp	r3, #0
 800845a:	d017      	beq.n	800848c <HAL_SPI_TransmitReceive+0x26c>
 800845c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800845e:	2b01      	cmp	r3, #1
 8008460:	d114      	bne.n	800848c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	330c      	adds	r3, #12
 800846c:	7812      	ldrb	r2, [r2, #0]
 800846e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008474:	1c5a      	adds	r2, r3, #1
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800847e:	b29b      	uxth	r3, r3
 8008480:	3b01      	subs	r3, #1
 8008482:	b29a      	uxth	r2, r3
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008488:	2300      	movs	r3, #0
 800848a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	689b      	ldr	r3, [r3, #8]
 8008492:	f003 0301 	and.w	r3, r3, #1
 8008496:	2b01      	cmp	r3, #1
 8008498:	d119      	bne.n	80084ce <HAL_SPI_TransmitReceive+0x2ae>
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800849e:	b29b      	uxth	r3, r3
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d014      	beq.n	80084ce <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	68da      	ldr	r2, [r3, #12]
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084ae:	b2d2      	uxtb	r2, r2
 80084b0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084b6:	1c5a      	adds	r2, r3, #1
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80084c0:	b29b      	uxth	r3, r3
 80084c2:	3b01      	subs	r3, #1
 80084c4:	b29a      	uxth	r2, r3
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80084ca:	2301      	movs	r3, #1
 80084cc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80084ce:	f7fb fc69 	bl	8003da4 <HAL_GetTick>
 80084d2:	4602      	mov	r2, r0
 80084d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084d6:	1ad3      	subs	r3, r2, r3
 80084d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80084da:	429a      	cmp	r2, r3
 80084dc:	d803      	bhi.n	80084e6 <HAL_SPI_TransmitReceive+0x2c6>
 80084de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084e4:	d102      	bne.n	80084ec <HAL_SPI_TransmitReceive+0x2cc>
 80084e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d103      	bne.n	80084f4 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80084ec:	2303      	movs	r3, #3
 80084ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80084f2:	e029      	b.n	8008548 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80084f8:	b29b      	uxth	r3, r3
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d1a2      	bne.n	8008444 <HAL_SPI_TransmitReceive+0x224>
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008502:	b29b      	uxth	r3, r3
 8008504:	2b00      	cmp	r3, #0
 8008506:	d19d      	bne.n	8008444 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008508:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800850a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800850c:	68f8      	ldr	r0, [r7, #12]
 800850e:	f000 f907 	bl	8008720 <SPI_EndRxTxTransaction>
 8008512:	4603      	mov	r3, r0
 8008514:	2b00      	cmp	r3, #0
 8008516:	d006      	beq.n	8008526 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8008518:	2301      	movs	r3, #1
 800851a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	2220      	movs	r2, #32
 8008522:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8008524:	e010      	b.n	8008548 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	689b      	ldr	r3, [r3, #8]
 800852a:	2b00      	cmp	r3, #0
 800852c:	d10b      	bne.n	8008546 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800852e:	2300      	movs	r3, #0
 8008530:	617b      	str	r3, [r7, #20]
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	68db      	ldr	r3, [r3, #12]
 8008538:	617b      	str	r3, [r7, #20]
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	689b      	ldr	r3, [r3, #8]
 8008540:	617b      	str	r3, [r7, #20]
 8008542:	697b      	ldr	r3, [r7, #20]
 8008544:	e000      	b.n	8008548 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8008546:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	2201      	movs	r2, #1
 800854c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	2200      	movs	r2, #0
 8008554:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008558:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800855c:	4618      	mov	r0, r3
 800855e:	3730      	adds	r7, #48	; 0x30
 8008560:	46bd      	mov	sp, r7
 8008562:	bd80      	pop	{r7, pc}

08008564 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8008564:	b480      	push	{r7}
 8008566:	b083      	sub	sp, #12
 8008568:	af00      	add	r7, sp, #0
 800856a:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008572:	b2db      	uxtb	r3, r3
}
 8008574:	4618      	mov	r0, r3
 8008576:	370c      	adds	r7, #12
 8008578:	46bd      	mov	sp, r7
 800857a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857e:	4770      	bx	lr

08008580 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008580:	b580      	push	{r7, lr}
 8008582:	b084      	sub	sp, #16
 8008584:	af00      	add	r7, sp, #0
 8008586:	60f8      	str	r0, [r7, #12]
 8008588:	60b9      	str	r1, [r7, #8]
 800858a:	603b      	str	r3, [r7, #0]
 800858c:	4613      	mov	r3, r2
 800858e:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008590:	e04c      	b.n	800862c <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008592:	683b      	ldr	r3, [r7, #0]
 8008594:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008598:	d048      	beq.n	800862c <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800859a:	f7fb fc03 	bl	8003da4 <HAL_GetTick>
 800859e:	4602      	mov	r2, r0
 80085a0:	69bb      	ldr	r3, [r7, #24]
 80085a2:	1ad3      	subs	r3, r2, r3
 80085a4:	683a      	ldr	r2, [r7, #0]
 80085a6:	429a      	cmp	r2, r3
 80085a8:	d902      	bls.n	80085b0 <SPI_WaitFlagStateUntilTimeout+0x30>
 80085aa:	683b      	ldr	r3, [r7, #0]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d13d      	bne.n	800862c <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	685a      	ldr	r2, [r3, #4]
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80085be:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	685b      	ldr	r3, [r3, #4]
 80085c4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80085c8:	d111      	bne.n	80085ee <SPI_WaitFlagStateUntilTimeout+0x6e>
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	689b      	ldr	r3, [r3, #8]
 80085ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80085d2:	d004      	beq.n	80085de <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	689b      	ldr	r3, [r3, #8]
 80085d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80085dc:	d107      	bne.n	80085ee <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	681a      	ldr	r2, [r3, #0]
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80085ec:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80085f6:	d10f      	bne.n	8008618 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	681a      	ldr	r2, [r3, #0]
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008606:	601a      	str	r2, [r3, #0]
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	681a      	ldr	r2, [r3, #0]
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008616:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	2201      	movs	r2, #1
 800861c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	2200      	movs	r2, #0
 8008624:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8008628:	2303      	movs	r3, #3
 800862a:	e00f      	b.n	800864c <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	689a      	ldr	r2, [r3, #8]
 8008632:	68bb      	ldr	r3, [r7, #8]
 8008634:	4013      	ands	r3, r2
 8008636:	68ba      	ldr	r2, [r7, #8]
 8008638:	429a      	cmp	r2, r3
 800863a:	bf0c      	ite	eq
 800863c:	2301      	moveq	r3, #1
 800863e:	2300      	movne	r3, #0
 8008640:	b2db      	uxtb	r3, r3
 8008642:	461a      	mov	r2, r3
 8008644:	79fb      	ldrb	r3, [r7, #7]
 8008646:	429a      	cmp	r2, r3
 8008648:	d1a3      	bne.n	8008592 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800864a:	2300      	movs	r3, #0
}
 800864c:	4618      	mov	r0, r3
 800864e:	3710      	adds	r7, #16
 8008650:	46bd      	mov	sp, r7
 8008652:	bd80      	pop	{r7, pc}

08008654 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008654:	b580      	push	{r7, lr}
 8008656:	b086      	sub	sp, #24
 8008658:	af02      	add	r7, sp, #8
 800865a:	60f8      	str	r0, [r7, #12]
 800865c:	60b9      	str	r1, [r7, #8]
 800865e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	685b      	ldr	r3, [r3, #4]
 8008664:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008668:	d111      	bne.n	800868e <SPI_EndRxTransaction+0x3a>
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	689b      	ldr	r3, [r3, #8]
 800866e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008672:	d004      	beq.n	800867e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	689b      	ldr	r3, [r3, #8]
 8008678:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800867c:	d107      	bne.n	800868e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	681a      	ldr	r2, [r3, #0]
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800868c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	685b      	ldr	r3, [r3, #4]
 8008692:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008696:	d12a      	bne.n	80086ee <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	689b      	ldr	r3, [r3, #8]
 800869c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80086a0:	d012      	beq.n	80086c8 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	9300      	str	r3, [sp, #0]
 80086a6:	68bb      	ldr	r3, [r7, #8]
 80086a8:	2200      	movs	r2, #0
 80086aa:	2180      	movs	r1, #128	; 0x80
 80086ac:	68f8      	ldr	r0, [r7, #12]
 80086ae:	f7ff ff67 	bl	8008580 <SPI_WaitFlagStateUntilTimeout>
 80086b2:	4603      	mov	r3, r0
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d02d      	beq.n	8008714 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086bc:	f043 0220 	orr.w	r2, r3, #32
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80086c4:	2303      	movs	r3, #3
 80086c6:	e026      	b.n	8008716 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	9300      	str	r3, [sp, #0]
 80086cc:	68bb      	ldr	r3, [r7, #8]
 80086ce:	2200      	movs	r2, #0
 80086d0:	2101      	movs	r1, #1
 80086d2:	68f8      	ldr	r0, [r7, #12]
 80086d4:	f7ff ff54 	bl	8008580 <SPI_WaitFlagStateUntilTimeout>
 80086d8:	4603      	mov	r3, r0
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d01a      	beq.n	8008714 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086e2:	f043 0220 	orr.w	r2, r3, #32
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80086ea:	2303      	movs	r3, #3
 80086ec:	e013      	b.n	8008716 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	9300      	str	r3, [sp, #0]
 80086f2:	68bb      	ldr	r3, [r7, #8]
 80086f4:	2200      	movs	r2, #0
 80086f6:	2101      	movs	r1, #1
 80086f8:	68f8      	ldr	r0, [r7, #12]
 80086fa:	f7ff ff41 	bl	8008580 <SPI_WaitFlagStateUntilTimeout>
 80086fe:	4603      	mov	r3, r0
 8008700:	2b00      	cmp	r3, #0
 8008702:	d007      	beq.n	8008714 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008708:	f043 0220 	orr.w	r2, r3, #32
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008710:	2303      	movs	r3, #3
 8008712:	e000      	b.n	8008716 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8008714:	2300      	movs	r3, #0
}
 8008716:	4618      	mov	r0, r3
 8008718:	3710      	adds	r7, #16
 800871a:	46bd      	mov	sp, r7
 800871c:	bd80      	pop	{r7, pc}
	...

08008720 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008720:	b580      	push	{r7, lr}
 8008722:	b088      	sub	sp, #32
 8008724:	af02      	add	r7, sp, #8
 8008726:	60f8      	str	r0, [r7, #12]
 8008728:	60b9      	str	r1, [r7, #8]
 800872a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800872c:	4b1b      	ldr	r3, [pc, #108]	; (800879c <SPI_EndRxTxTransaction+0x7c>)
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	4a1b      	ldr	r2, [pc, #108]	; (80087a0 <SPI_EndRxTxTransaction+0x80>)
 8008732:	fba2 2303 	umull	r2, r3, r2, r3
 8008736:	0d5b      	lsrs	r3, r3, #21
 8008738:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800873c:	fb02 f303 	mul.w	r3, r2, r3
 8008740:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	685b      	ldr	r3, [r3, #4]
 8008746:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800874a:	d112      	bne.n	8008772 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	9300      	str	r3, [sp, #0]
 8008750:	68bb      	ldr	r3, [r7, #8]
 8008752:	2200      	movs	r2, #0
 8008754:	2180      	movs	r1, #128	; 0x80
 8008756:	68f8      	ldr	r0, [r7, #12]
 8008758:	f7ff ff12 	bl	8008580 <SPI_WaitFlagStateUntilTimeout>
 800875c:	4603      	mov	r3, r0
 800875e:	2b00      	cmp	r3, #0
 8008760:	d016      	beq.n	8008790 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008766:	f043 0220 	orr.w	r2, r3, #32
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800876e:	2303      	movs	r3, #3
 8008770:	e00f      	b.n	8008792 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008772:	697b      	ldr	r3, [r7, #20]
 8008774:	2b00      	cmp	r3, #0
 8008776:	d00a      	beq.n	800878e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8008778:	697b      	ldr	r3, [r7, #20]
 800877a:	3b01      	subs	r3, #1
 800877c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	689b      	ldr	r3, [r3, #8]
 8008784:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008788:	2b80      	cmp	r3, #128	; 0x80
 800878a:	d0f2      	beq.n	8008772 <SPI_EndRxTxTransaction+0x52>
 800878c:	e000      	b.n	8008790 <SPI_EndRxTxTransaction+0x70>
        break;
 800878e:	bf00      	nop
  }

  return HAL_OK;
 8008790:	2300      	movs	r3, #0
}
 8008792:	4618      	mov	r0, r3
 8008794:	3718      	adds	r7, #24
 8008796:	46bd      	mov	sp, r7
 8008798:	bd80      	pop	{r7, pc}
 800879a:	bf00      	nop
 800879c:	200000f8 	.word	0x200000f8
 80087a0:	165e9f81 	.word	0x165e9f81

080087a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80087a4:	b580      	push	{r7, lr}
 80087a6:	b082      	sub	sp, #8
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d101      	bne.n	80087b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80087b2:	2301      	movs	r3, #1
 80087b4:	e01d      	b.n	80087f2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80087bc:	b2db      	uxtb	r3, r3
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d106      	bne.n	80087d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	2200      	movs	r2, #0
 80087c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80087ca:	6878      	ldr	r0, [r7, #4]
 80087cc:	f7f9 facc 	bl	8001d68 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	2202      	movs	r2, #2
 80087d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681a      	ldr	r2, [r3, #0]
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	3304      	adds	r3, #4
 80087e0:	4619      	mov	r1, r3
 80087e2:	4610      	mov	r0, r2
 80087e4:	f000 fa14 	bl	8008c10 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	2201      	movs	r2, #1
 80087ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80087f0:	2300      	movs	r3, #0
}
 80087f2:	4618      	mov	r0, r3
 80087f4:	3708      	adds	r7, #8
 80087f6:	46bd      	mov	sp, r7
 80087f8:	bd80      	pop	{r7, pc}

080087fa <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80087fa:	b480      	push	{r7}
 80087fc:	b085      	sub	sp, #20
 80087fe:	af00      	add	r7, sp, #0
 8008800:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	68da      	ldr	r2, [r3, #12]
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	f042 0201 	orr.w	r2, r2, #1
 8008810:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	689b      	ldr	r3, [r3, #8]
 8008818:	f003 0307 	and.w	r3, r3, #7
 800881c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	2b06      	cmp	r3, #6
 8008822:	d007      	beq.n	8008834 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	681a      	ldr	r2, [r3, #0]
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	f042 0201 	orr.w	r2, r2, #1
 8008832:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008834:	2300      	movs	r3, #0
}
 8008836:	4618      	mov	r0, r3
 8008838:	3714      	adds	r7, #20
 800883a:	46bd      	mov	sp, r7
 800883c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008840:	4770      	bx	lr

08008842 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008842:	b580      	push	{r7, lr}
 8008844:	b082      	sub	sp, #8
 8008846:	af00      	add	r7, sp, #0
 8008848:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	691b      	ldr	r3, [r3, #16]
 8008850:	f003 0302 	and.w	r3, r3, #2
 8008854:	2b02      	cmp	r3, #2
 8008856:	d122      	bne.n	800889e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	68db      	ldr	r3, [r3, #12]
 800885e:	f003 0302 	and.w	r3, r3, #2
 8008862:	2b02      	cmp	r3, #2
 8008864:	d11b      	bne.n	800889e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	f06f 0202 	mvn.w	r2, #2
 800886e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	2201      	movs	r2, #1
 8008874:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	699b      	ldr	r3, [r3, #24]
 800887c:	f003 0303 	and.w	r3, r3, #3
 8008880:	2b00      	cmp	r3, #0
 8008882:	d003      	beq.n	800888c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008884:	6878      	ldr	r0, [r7, #4]
 8008886:	f000 f9a5 	bl	8008bd4 <HAL_TIM_IC_CaptureCallback>
 800888a:	e005      	b.n	8008898 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800888c:	6878      	ldr	r0, [r7, #4]
 800888e:	f000 f997 	bl	8008bc0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008892:	6878      	ldr	r0, [r7, #4]
 8008894:	f000 f9a8 	bl	8008be8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	2200      	movs	r2, #0
 800889c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	691b      	ldr	r3, [r3, #16]
 80088a4:	f003 0304 	and.w	r3, r3, #4
 80088a8:	2b04      	cmp	r3, #4
 80088aa:	d122      	bne.n	80088f2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	68db      	ldr	r3, [r3, #12]
 80088b2:	f003 0304 	and.w	r3, r3, #4
 80088b6:	2b04      	cmp	r3, #4
 80088b8:	d11b      	bne.n	80088f2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	f06f 0204 	mvn.w	r2, #4
 80088c2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	2202      	movs	r2, #2
 80088c8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	699b      	ldr	r3, [r3, #24]
 80088d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d003      	beq.n	80088e0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80088d8:	6878      	ldr	r0, [r7, #4]
 80088da:	f000 f97b 	bl	8008bd4 <HAL_TIM_IC_CaptureCallback>
 80088de:	e005      	b.n	80088ec <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80088e0:	6878      	ldr	r0, [r7, #4]
 80088e2:	f000 f96d 	bl	8008bc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80088e6:	6878      	ldr	r0, [r7, #4]
 80088e8:	f000 f97e 	bl	8008be8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	2200      	movs	r2, #0
 80088f0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	691b      	ldr	r3, [r3, #16]
 80088f8:	f003 0308 	and.w	r3, r3, #8
 80088fc:	2b08      	cmp	r3, #8
 80088fe:	d122      	bne.n	8008946 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	68db      	ldr	r3, [r3, #12]
 8008906:	f003 0308 	and.w	r3, r3, #8
 800890a:	2b08      	cmp	r3, #8
 800890c:	d11b      	bne.n	8008946 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	f06f 0208 	mvn.w	r2, #8
 8008916:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	2204      	movs	r2, #4
 800891c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	69db      	ldr	r3, [r3, #28]
 8008924:	f003 0303 	and.w	r3, r3, #3
 8008928:	2b00      	cmp	r3, #0
 800892a:	d003      	beq.n	8008934 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800892c:	6878      	ldr	r0, [r7, #4]
 800892e:	f000 f951 	bl	8008bd4 <HAL_TIM_IC_CaptureCallback>
 8008932:	e005      	b.n	8008940 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008934:	6878      	ldr	r0, [r7, #4]
 8008936:	f000 f943 	bl	8008bc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800893a:	6878      	ldr	r0, [r7, #4]
 800893c:	f000 f954 	bl	8008be8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	2200      	movs	r2, #0
 8008944:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	691b      	ldr	r3, [r3, #16]
 800894c:	f003 0310 	and.w	r3, r3, #16
 8008950:	2b10      	cmp	r3, #16
 8008952:	d122      	bne.n	800899a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	68db      	ldr	r3, [r3, #12]
 800895a:	f003 0310 	and.w	r3, r3, #16
 800895e:	2b10      	cmp	r3, #16
 8008960:	d11b      	bne.n	800899a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	f06f 0210 	mvn.w	r2, #16
 800896a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	2208      	movs	r2, #8
 8008970:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	69db      	ldr	r3, [r3, #28]
 8008978:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800897c:	2b00      	cmp	r3, #0
 800897e:	d003      	beq.n	8008988 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008980:	6878      	ldr	r0, [r7, #4]
 8008982:	f000 f927 	bl	8008bd4 <HAL_TIM_IC_CaptureCallback>
 8008986:	e005      	b.n	8008994 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008988:	6878      	ldr	r0, [r7, #4]
 800898a:	f000 f919 	bl	8008bc0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800898e:	6878      	ldr	r0, [r7, #4]
 8008990:	f000 f92a 	bl	8008be8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	2200      	movs	r2, #0
 8008998:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	691b      	ldr	r3, [r3, #16]
 80089a0:	f003 0301 	and.w	r3, r3, #1
 80089a4:	2b01      	cmp	r3, #1
 80089a6:	d10e      	bne.n	80089c6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	68db      	ldr	r3, [r3, #12]
 80089ae:	f003 0301 	and.w	r3, r3, #1
 80089b2:	2b01      	cmp	r3, #1
 80089b4:	d107      	bne.n	80089c6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	f06f 0201 	mvn.w	r2, #1
 80089be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80089c0:	6878      	ldr	r0, [r7, #4]
 80089c2:	f7f8 fe2f 	bl	8001624 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	691b      	ldr	r3, [r3, #16]
 80089cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80089d0:	2b80      	cmp	r3, #128	; 0x80
 80089d2:	d10e      	bne.n	80089f2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	68db      	ldr	r3, [r3, #12]
 80089da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80089de:	2b80      	cmp	r3, #128	; 0x80
 80089e0:	d107      	bne.n	80089f2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80089ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80089ec:	6878      	ldr	r0, [r7, #4]
 80089ee:	f000 facf 	bl	8008f90 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	691b      	ldr	r3, [r3, #16]
 80089f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089fc:	2b40      	cmp	r3, #64	; 0x40
 80089fe:	d10e      	bne.n	8008a1e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	68db      	ldr	r3, [r3, #12]
 8008a06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a0a:	2b40      	cmp	r3, #64	; 0x40
 8008a0c:	d107      	bne.n	8008a1e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008a16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008a18:	6878      	ldr	r0, [r7, #4]
 8008a1a:	f000 f8ef 	bl	8008bfc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	691b      	ldr	r3, [r3, #16]
 8008a24:	f003 0320 	and.w	r3, r3, #32
 8008a28:	2b20      	cmp	r3, #32
 8008a2a:	d10e      	bne.n	8008a4a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	68db      	ldr	r3, [r3, #12]
 8008a32:	f003 0320 	and.w	r3, r3, #32
 8008a36:	2b20      	cmp	r3, #32
 8008a38:	d107      	bne.n	8008a4a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	f06f 0220 	mvn.w	r2, #32
 8008a42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008a44:	6878      	ldr	r0, [r7, #4]
 8008a46:	f000 fa99 	bl	8008f7c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008a4a:	bf00      	nop
 8008a4c:	3708      	adds	r7, #8
 8008a4e:	46bd      	mov	sp, r7
 8008a50:	bd80      	pop	{r7, pc}

08008a52 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008a52:	b580      	push	{r7, lr}
 8008a54:	b084      	sub	sp, #16
 8008a56:	af00      	add	r7, sp, #0
 8008a58:	6078      	str	r0, [r7, #4]
 8008a5a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008a62:	2b01      	cmp	r3, #1
 8008a64:	d101      	bne.n	8008a6a <HAL_TIM_ConfigClockSource+0x18>
 8008a66:	2302      	movs	r3, #2
 8008a68:	e0a6      	b.n	8008bb8 <HAL_TIM_ConfigClockSource+0x166>
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	2201      	movs	r2, #1
 8008a6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	2202      	movs	r2, #2
 8008a76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	689b      	ldr	r3, [r3, #8]
 8008a80:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008a88:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008a90:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	68fa      	ldr	r2, [r7, #12]
 8008a98:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008a9a:	683b      	ldr	r3, [r7, #0]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	2b40      	cmp	r3, #64	; 0x40
 8008aa0:	d067      	beq.n	8008b72 <HAL_TIM_ConfigClockSource+0x120>
 8008aa2:	2b40      	cmp	r3, #64	; 0x40
 8008aa4:	d80b      	bhi.n	8008abe <HAL_TIM_ConfigClockSource+0x6c>
 8008aa6:	2b10      	cmp	r3, #16
 8008aa8:	d073      	beq.n	8008b92 <HAL_TIM_ConfigClockSource+0x140>
 8008aaa:	2b10      	cmp	r3, #16
 8008aac:	d802      	bhi.n	8008ab4 <HAL_TIM_ConfigClockSource+0x62>
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d06f      	beq.n	8008b92 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8008ab2:	e078      	b.n	8008ba6 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8008ab4:	2b20      	cmp	r3, #32
 8008ab6:	d06c      	beq.n	8008b92 <HAL_TIM_ConfigClockSource+0x140>
 8008ab8:	2b30      	cmp	r3, #48	; 0x30
 8008aba:	d06a      	beq.n	8008b92 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8008abc:	e073      	b.n	8008ba6 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8008abe:	2b70      	cmp	r3, #112	; 0x70
 8008ac0:	d00d      	beq.n	8008ade <HAL_TIM_ConfigClockSource+0x8c>
 8008ac2:	2b70      	cmp	r3, #112	; 0x70
 8008ac4:	d804      	bhi.n	8008ad0 <HAL_TIM_ConfigClockSource+0x7e>
 8008ac6:	2b50      	cmp	r3, #80	; 0x50
 8008ac8:	d033      	beq.n	8008b32 <HAL_TIM_ConfigClockSource+0xe0>
 8008aca:	2b60      	cmp	r3, #96	; 0x60
 8008acc:	d041      	beq.n	8008b52 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8008ace:	e06a      	b.n	8008ba6 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8008ad0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ad4:	d066      	beq.n	8008ba4 <HAL_TIM_ConfigClockSource+0x152>
 8008ad6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008ada:	d017      	beq.n	8008b0c <HAL_TIM_ConfigClockSource+0xba>
      break;
 8008adc:	e063      	b.n	8008ba6 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	6818      	ldr	r0, [r3, #0]
 8008ae2:	683b      	ldr	r3, [r7, #0]
 8008ae4:	6899      	ldr	r1, [r3, #8]
 8008ae6:	683b      	ldr	r3, [r7, #0]
 8008ae8:	685a      	ldr	r2, [r3, #4]
 8008aea:	683b      	ldr	r3, [r7, #0]
 8008aec:	68db      	ldr	r3, [r3, #12]
 8008aee:	f000 f9a9 	bl	8008e44 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	689b      	ldr	r3, [r3, #8]
 8008af8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008b00:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	68fa      	ldr	r2, [r7, #12]
 8008b08:	609a      	str	r2, [r3, #8]
      break;
 8008b0a:	e04c      	b.n	8008ba6 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	6818      	ldr	r0, [r3, #0]
 8008b10:	683b      	ldr	r3, [r7, #0]
 8008b12:	6899      	ldr	r1, [r3, #8]
 8008b14:	683b      	ldr	r3, [r7, #0]
 8008b16:	685a      	ldr	r2, [r3, #4]
 8008b18:	683b      	ldr	r3, [r7, #0]
 8008b1a:	68db      	ldr	r3, [r3, #12]
 8008b1c:	f000 f992 	bl	8008e44 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	689a      	ldr	r2, [r3, #8]
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008b2e:	609a      	str	r2, [r3, #8]
      break;
 8008b30:	e039      	b.n	8008ba6 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	6818      	ldr	r0, [r3, #0]
 8008b36:	683b      	ldr	r3, [r7, #0]
 8008b38:	6859      	ldr	r1, [r3, #4]
 8008b3a:	683b      	ldr	r3, [r7, #0]
 8008b3c:	68db      	ldr	r3, [r3, #12]
 8008b3e:	461a      	mov	r2, r3
 8008b40:	f000 f906 	bl	8008d50 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	2150      	movs	r1, #80	; 0x50
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	f000 f95f 	bl	8008e0e <TIM_ITRx_SetConfig>
      break;
 8008b50:	e029      	b.n	8008ba6 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	6818      	ldr	r0, [r3, #0]
 8008b56:	683b      	ldr	r3, [r7, #0]
 8008b58:	6859      	ldr	r1, [r3, #4]
 8008b5a:	683b      	ldr	r3, [r7, #0]
 8008b5c:	68db      	ldr	r3, [r3, #12]
 8008b5e:	461a      	mov	r2, r3
 8008b60:	f000 f925 	bl	8008dae <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	2160      	movs	r1, #96	; 0x60
 8008b6a:	4618      	mov	r0, r3
 8008b6c:	f000 f94f 	bl	8008e0e <TIM_ITRx_SetConfig>
      break;
 8008b70:	e019      	b.n	8008ba6 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	6818      	ldr	r0, [r3, #0]
 8008b76:	683b      	ldr	r3, [r7, #0]
 8008b78:	6859      	ldr	r1, [r3, #4]
 8008b7a:	683b      	ldr	r3, [r7, #0]
 8008b7c:	68db      	ldr	r3, [r3, #12]
 8008b7e:	461a      	mov	r2, r3
 8008b80:	f000 f8e6 	bl	8008d50 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	2140      	movs	r1, #64	; 0x40
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	f000 f93f 	bl	8008e0e <TIM_ITRx_SetConfig>
      break;
 8008b90:	e009      	b.n	8008ba6 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681a      	ldr	r2, [r3, #0]
 8008b96:	683b      	ldr	r3, [r7, #0]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	4619      	mov	r1, r3
 8008b9c:	4610      	mov	r0, r2
 8008b9e:	f000 f936 	bl	8008e0e <TIM_ITRx_SetConfig>
      break;
 8008ba2:	e000      	b.n	8008ba6 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8008ba4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	2201      	movs	r2, #1
 8008baa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	2200      	movs	r2, #0
 8008bb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008bb6:	2300      	movs	r3, #0
}
 8008bb8:	4618      	mov	r0, r3
 8008bba:	3710      	adds	r7, #16
 8008bbc:	46bd      	mov	sp, r7
 8008bbe:	bd80      	pop	{r7, pc}

08008bc0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008bc0:	b480      	push	{r7}
 8008bc2:	b083      	sub	sp, #12
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008bc8:	bf00      	nop
 8008bca:	370c      	adds	r7, #12
 8008bcc:	46bd      	mov	sp, r7
 8008bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd2:	4770      	bx	lr

08008bd4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008bd4:	b480      	push	{r7}
 8008bd6:	b083      	sub	sp, #12
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008bdc:	bf00      	nop
 8008bde:	370c      	adds	r7, #12
 8008be0:	46bd      	mov	sp, r7
 8008be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be6:	4770      	bx	lr

08008be8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008be8:	b480      	push	{r7}
 8008bea:	b083      	sub	sp, #12
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008bf0:	bf00      	nop
 8008bf2:	370c      	adds	r7, #12
 8008bf4:	46bd      	mov	sp, r7
 8008bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfa:	4770      	bx	lr

08008bfc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008bfc:	b480      	push	{r7}
 8008bfe:	b083      	sub	sp, #12
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008c04:	bf00      	nop
 8008c06:	370c      	adds	r7, #12
 8008c08:	46bd      	mov	sp, r7
 8008c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0e:	4770      	bx	lr

08008c10 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008c10:	b480      	push	{r7}
 8008c12:	b085      	sub	sp, #20
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
 8008c18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	4a40      	ldr	r2, [pc, #256]	; (8008d24 <TIM_Base_SetConfig+0x114>)
 8008c24:	4293      	cmp	r3, r2
 8008c26:	d013      	beq.n	8008c50 <TIM_Base_SetConfig+0x40>
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c2e:	d00f      	beq.n	8008c50 <TIM_Base_SetConfig+0x40>
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	4a3d      	ldr	r2, [pc, #244]	; (8008d28 <TIM_Base_SetConfig+0x118>)
 8008c34:	4293      	cmp	r3, r2
 8008c36:	d00b      	beq.n	8008c50 <TIM_Base_SetConfig+0x40>
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	4a3c      	ldr	r2, [pc, #240]	; (8008d2c <TIM_Base_SetConfig+0x11c>)
 8008c3c:	4293      	cmp	r3, r2
 8008c3e:	d007      	beq.n	8008c50 <TIM_Base_SetConfig+0x40>
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	4a3b      	ldr	r2, [pc, #236]	; (8008d30 <TIM_Base_SetConfig+0x120>)
 8008c44:	4293      	cmp	r3, r2
 8008c46:	d003      	beq.n	8008c50 <TIM_Base_SetConfig+0x40>
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	4a3a      	ldr	r2, [pc, #232]	; (8008d34 <TIM_Base_SetConfig+0x124>)
 8008c4c:	4293      	cmp	r3, r2
 8008c4e:	d108      	bne.n	8008c62 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c56:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008c58:	683b      	ldr	r3, [r7, #0]
 8008c5a:	685b      	ldr	r3, [r3, #4]
 8008c5c:	68fa      	ldr	r2, [r7, #12]
 8008c5e:	4313      	orrs	r3, r2
 8008c60:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	4a2f      	ldr	r2, [pc, #188]	; (8008d24 <TIM_Base_SetConfig+0x114>)
 8008c66:	4293      	cmp	r3, r2
 8008c68:	d02b      	beq.n	8008cc2 <TIM_Base_SetConfig+0xb2>
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c70:	d027      	beq.n	8008cc2 <TIM_Base_SetConfig+0xb2>
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	4a2c      	ldr	r2, [pc, #176]	; (8008d28 <TIM_Base_SetConfig+0x118>)
 8008c76:	4293      	cmp	r3, r2
 8008c78:	d023      	beq.n	8008cc2 <TIM_Base_SetConfig+0xb2>
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	4a2b      	ldr	r2, [pc, #172]	; (8008d2c <TIM_Base_SetConfig+0x11c>)
 8008c7e:	4293      	cmp	r3, r2
 8008c80:	d01f      	beq.n	8008cc2 <TIM_Base_SetConfig+0xb2>
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	4a2a      	ldr	r2, [pc, #168]	; (8008d30 <TIM_Base_SetConfig+0x120>)
 8008c86:	4293      	cmp	r3, r2
 8008c88:	d01b      	beq.n	8008cc2 <TIM_Base_SetConfig+0xb2>
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	4a29      	ldr	r2, [pc, #164]	; (8008d34 <TIM_Base_SetConfig+0x124>)
 8008c8e:	4293      	cmp	r3, r2
 8008c90:	d017      	beq.n	8008cc2 <TIM_Base_SetConfig+0xb2>
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	4a28      	ldr	r2, [pc, #160]	; (8008d38 <TIM_Base_SetConfig+0x128>)
 8008c96:	4293      	cmp	r3, r2
 8008c98:	d013      	beq.n	8008cc2 <TIM_Base_SetConfig+0xb2>
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	4a27      	ldr	r2, [pc, #156]	; (8008d3c <TIM_Base_SetConfig+0x12c>)
 8008c9e:	4293      	cmp	r3, r2
 8008ca0:	d00f      	beq.n	8008cc2 <TIM_Base_SetConfig+0xb2>
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	4a26      	ldr	r2, [pc, #152]	; (8008d40 <TIM_Base_SetConfig+0x130>)
 8008ca6:	4293      	cmp	r3, r2
 8008ca8:	d00b      	beq.n	8008cc2 <TIM_Base_SetConfig+0xb2>
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	4a25      	ldr	r2, [pc, #148]	; (8008d44 <TIM_Base_SetConfig+0x134>)
 8008cae:	4293      	cmp	r3, r2
 8008cb0:	d007      	beq.n	8008cc2 <TIM_Base_SetConfig+0xb2>
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	4a24      	ldr	r2, [pc, #144]	; (8008d48 <TIM_Base_SetConfig+0x138>)
 8008cb6:	4293      	cmp	r3, r2
 8008cb8:	d003      	beq.n	8008cc2 <TIM_Base_SetConfig+0xb2>
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	4a23      	ldr	r2, [pc, #140]	; (8008d4c <TIM_Base_SetConfig+0x13c>)
 8008cbe:	4293      	cmp	r3, r2
 8008cc0:	d108      	bne.n	8008cd4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008cc8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008cca:	683b      	ldr	r3, [r7, #0]
 8008ccc:	68db      	ldr	r3, [r3, #12]
 8008cce:	68fa      	ldr	r2, [r7, #12]
 8008cd0:	4313      	orrs	r3, r2
 8008cd2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008cda:	683b      	ldr	r3, [r7, #0]
 8008cdc:	695b      	ldr	r3, [r3, #20]
 8008cde:	4313      	orrs	r3, r2
 8008ce0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	68fa      	ldr	r2, [r7, #12]
 8008ce6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008ce8:	683b      	ldr	r3, [r7, #0]
 8008cea:	689a      	ldr	r2, [r3, #8]
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008cf0:	683b      	ldr	r3, [r7, #0]
 8008cf2:	681a      	ldr	r2, [r3, #0]
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	4a0a      	ldr	r2, [pc, #40]	; (8008d24 <TIM_Base_SetConfig+0x114>)
 8008cfc:	4293      	cmp	r3, r2
 8008cfe:	d003      	beq.n	8008d08 <TIM_Base_SetConfig+0xf8>
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	4a0c      	ldr	r2, [pc, #48]	; (8008d34 <TIM_Base_SetConfig+0x124>)
 8008d04:	4293      	cmp	r3, r2
 8008d06:	d103      	bne.n	8008d10 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008d08:	683b      	ldr	r3, [r7, #0]
 8008d0a:	691a      	ldr	r2, [r3, #16]
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	2201      	movs	r2, #1
 8008d14:	615a      	str	r2, [r3, #20]
}
 8008d16:	bf00      	nop
 8008d18:	3714      	adds	r7, #20
 8008d1a:	46bd      	mov	sp, r7
 8008d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d20:	4770      	bx	lr
 8008d22:	bf00      	nop
 8008d24:	40010000 	.word	0x40010000
 8008d28:	40000400 	.word	0x40000400
 8008d2c:	40000800 	.word	0x40000800
 8008d30:	40000c00 	.word	0x40000c00
 8008d34:	40010400 	.word	0x40010400
 8008d38:	40014000 	.word	0x40014000
 8008d3c:	40014400 	.word	0x40014400
 8008d40:	40014800 	.word	0x40014800
 8008d44:	40001800 	.word	0x40001800
 8008d48:	40001c00 	.word	0x40001c00
 8008d4c:	40002000 	.word	0x40002000

08008d50 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008d50:	b480      	push	{r7}
 8008d52:	b087      	sub	sp, #28
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	60f8      	str	r0, [r7, #12]
 8008d58:	60b9      	str	r1, [r7, #8]
 8008d5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	6a1b      	ldr	r3, [r3, #32]
 8008d60:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	6a1b      	ldr	r3, [r3, #32]
 8008d66:	f023 0201 	bic.w	r2, r3, #1
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	699b      	ldr	r3, [r3, #24]
 8008d72:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008d74:	693b      	ldr	r3, [r7, #16]
 8008d76:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008d7a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	011b      	lsls	r3, r3, #4
 8008d80:	693a      	ldr	r2, [r7, #16]
 8008d82:	4313      	orrs	r3, r2
 8008d84:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008d86:	697b      	ldr	r3, [r7, #20]
 8008d88:	f023 030a 	bic.w	r3, r3, #10
 8008d8c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008d8e:	697a      	ldr	r2, [r7, #20]
 8008d90:	68bb      	ldr	r3, [r7, #8]
 8008d92:	4313      	orrs	r3, r2
 8008d94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	693a      	ldr	r2, [r7, #16]
 8008d9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	697a      	ldr	r2, [r7, #20]
 8008da0:	621a      	str	r2, [r3, #32]
}
 8008da2:	bf00      	nop
 8008da4:	371c      	adds	r7, #28
 8008da6:	46bd      	mov	sp, r7
 8008da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dac:	4770      	bx	lr

08008dae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008dae:	b480      	push	{r7}
 8008db0:	b087      	sub	sp, #28
 8008db2:	af00      	add	r7, sp, #0
 8008db4:	60f8      	str	r0, [r7, #12]
 8008db6:	60b9      	str	r1, [r7, #8]
 8008db8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	6a1b      	ldr	r3, [r3, #32]
 8008dbe:	f023 0210 	bic.w	r2, r3, #16
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	699b      	ldr	r3, [r3, #24]
 8008dca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	6a1b      	ldr	r3, [r3, #32]
 8008dd0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008dd2:	697b      	ldr	r3, [r7, #20]
 8008dd4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008dd8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	031b      	lsls	r3, r3, #12
 8008dde:	697a      	ldr	r2, [r7, #20]
 8008de0:	4313      	orrs	r3, r2
 8008de2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008de4:	693b      	ldr	r3, [r7, #16]
 8008de6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008dea:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008dec:	68bb      	ldr	r3, [r7, #8]
 8008dee:	011b      	lsls	r3, r3, #4
 8008df0:	693a      	ldr	r2, [r7, #16]
 8008df2:	4313      	orrs	r3, r2
 8008df4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	697a      	ldr	r2, [r7, #20]
 8008dfa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	693a      	ldr	r2, [r7, #16]
 8008e00:	621a      	str	r2, [r3, #32]
}
 8008e02:	bf00      	nop
 8008e04:	371c      	adds	r7, #28
 8008e06:	46bd      	mov	sp, r7
 8008e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0c:	4770      	bx	lr

08008e0e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008e0e:	b480      	push	{r7}
 8008e10:	b085      	sub	sp, #20
 8008e12:	af00      	add	r7, sp, #0
 8008e14:	6078      	str	r0, [r7, #4]
 8008e16:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	689b      	ldr	r3, [r3, #8]
 8008e1c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e24:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008e26:	683a      	ldr	r2, [r7, #0]
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	4313      	orrs	r3, r2
 8008e2c:	f043 0307 	orr.w	r3, r3, #7
 8008e30:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	68fa      	ldr	r2, [r7, #12]
 8008e36:	609a      	str	r2, [r3, #8]
}
 8008e38:	bf00      	nop
 8008e3a:	3714      	adds	r7, #20
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e42:	4770      	bx	lr

08008e44 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008e44:	b480      	push	{r7}
 8008e46:	b087      	sub	sp, #28
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	60f8      	str	r0, [r7, #12]
 8008e4c:	60b9      	str	r1, [r7, #8]
 8008e4e:	607a      	str	r2, [r7, #4]
 8008e50:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	689b      	ldr	r3, [r3, #8]
 8008e56:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008e58:	697b      	ldr	r3, [r7, #20]
 8008e5a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008e5e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008e60:	683b      	ldr	r3, [r7, #0]
 8008e62:	021a      	lsls	r2, r3, #8
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	431a      	orrs	r2, r3
 8008e68:	68bb      	ldr	r3, [r7, #8]
 8008e6a:	4313      	orrs	r3, r2
 8008e6c:	697a      	ldr	r2, [r7, #20]
 8008e6e:	4313      	orrs	r3, r2
 8008e70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	697a      	ldr	r2, [r7, #20]
 8008e76:	609a      	str	r2, [r3, #8]
}
 8008e78:	bf00      	nop
 8008e7a:	371c      	adds	r7, #28
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e82:	4770      	bx	lr

08008e84 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008e84:	b480      	push	{r7}
 8008e86:	b085      	sub	sp, #20
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	6078      	str	r0, [r7, #4]
 8008e8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008e94:	2b01      	cmp	r3, #1
 8008e96:	d101      	bne.n	8008e9c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008e98:	2302      	movs	r3, #2
 8008e9a:	e05a      	b.n	8008f52 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	2201      	movs	r2, #1
 8008ea0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	2202      	movs	r2, #2
 8008ea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	685b      	ldr	r3, [r3, #4]
 8008eb2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	689b      	ldr	r3, [r3, #8]
 8008eba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ec2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008ec4:	683b      	ldr	r3, [r7, #0]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	68fa      	ldr	r2, [r7, #12]
 8008eca:	4313      	orrs	r3, r2
 8008ecc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	68fa      	ldr	r2, [r7, #12]
 8008ed4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	4a21      	ldr	r2, [pc, #132]	; (8008f60 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008edc:	4293      	cmp	r3, r2
 8008ede:	d022      	beq.n	8008f26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ee8:	d01d      	beq.n	8008f26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	4a1d      	ldr	r2, [pc, #116]	; (8008f64 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008ef0:	4293      	cmp	r3, r2
 8008ef2:	d018      	beq.n	8008f26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	4a1b      	ldr	r2, [pc, #108]	; (8008f68 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008efa:	4293      	cmp	r3, r2
 8008efc:	d013      	beq.n	8008f26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	4a1a      	ldr	r2, [pc, #104]	; (8008f6c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008f04:	4293      	cmp	r3, r2
 8008f06:	d00e      	beq.n	8008f26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	4a18      	ldr	r2, [pc, #96]	; (8008f70 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008f0e:	4293      	cmp	r3, r2
 8008f10:	d009      	beq.n	8008f26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	4a17      	ldr	r2, [pc, #92]	; (8008f74 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008f18:	4293      	cmp	r3, r2
 8008f1a:	d004      	beq.n	8008f26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	4a15      	ldr	r2, [pc, #84]	; (8008f78 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008f22:	4293      	cmp	r3, r2
 8008f24:	d10c      	bne.n	8008f40 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008f26:	68bb      	ldr	r3, [r7, #8]
 8008f28:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008f2c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008f2e:	683b      	ldr	r3, [r7, #0]
 8008f30:	685b      	ldr	r3, [r3, #4]
 8008f32:	68ba      	ldr	r2, [r7, #8]
 8008f34:	4313      	orrs	r3, r2
 8008f36:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	68ba      	ldr	r2, [r7, #8]
 8008f3e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	2201      	movs	r2, #1
 8008f44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	2200      	movs	r2, #0
 8008f4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008f50:	2300      	movs	r3, #0
}
 8008f52:	4618      	mov	r0, r3
 8008f54:	3714      	adds	r7, #20
 8008f56:	46bd      	mov	sp, r7
 8008f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f5c:	4770      	bx	lr
 8008f5e:	bf00      	nop
 8008f60:	40010000 	.word	0x40010000
 8008f64:	40000400 	.word	0x40000400
 8008f68:	40000800 	.word	0x40000800
 8008f6c:	40000c00 	.word	0x40000c00
 8008f70:	40010400 	.word	0x40010400
 8008f74:	40014000 	.word	0x40014000
 8008f78:	40001800 	.word	0x40001800

08008f7c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008f7c:	b480      	push	{r7}
 8008f7e:	b083      	sub	sp, #12
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008f84:	bf00      	nop
 8008f86:	370c      	adds	r7, #12
 8008f88:	46bd      	mov	sp, r7
 8008f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f8e:	4770      	bx	lr

08008f90 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008f90:	b480      	push	{r7}
 8008f92:	b083      	sub	sp, #12
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008f98:	bf00      	nop
 8008f9a:	370c      	adds	r7, #12
 8008f9c:	46bd      	mov	sp, r7
 8008f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa2:	4770      	bx	lr

08008fa4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008fa4:	b580      	push	{r7, lr}
 8008fa6:	b082      	sub	sp, #8
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d101      	bne.n	8008fb6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008fb2:	2301      	movs	r3, #1
 8008fb4:	e03f      	b.n	8009036 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008fbc:	b2db      	uxtb	r3, r3
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d106      	bne.n	8008fd0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	2200      	movs	r2, #0
 8008fc6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008fca:	6878      	ldr	r0, [r7, #4]
 8008fcc:	f7f8 ff18 	bl	8001e00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	2224      	movs	r2, #36	; 0x24
 8008fd4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	68da      	ldr	r2, [r3, #12]
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008fe6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008fe8:	6878      	ldr	r0, [r7, #4]
 8008fea:	f000 f90b 	bl	8009204 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	691a      	ldr	r2, [r3, #16]
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008ffc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	695a      	ldr	r2, [r3, #20]
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800900c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	68da      	ldr	r2, [r3, #12]
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800901c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	2200      	movs	r2, #0
 8009022:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	2220      	movs	r2, #32
 8009028:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	2220      	movs	r2, #32
 8009030:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8009034:	2300      	movs	r3, #0
}
 8009036:	4618      	mov	r0, r3
 8009038:	3708      	adds	r7, #8
 800903a:	46bd      	mov	sp, r7
 800903c:	bd80      	pop	{r7, pc}

0800903e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800903e:	b580      	push	{r7, lr}
 8009040:	b088      	sub	sp, #32
 8009042:	af02      	add	r7, sp, #8
 8009044:	60f8      	str	r0, [r7, #12]
 8009046:	60b9      	str	r1, [r7, #8]
 8009048:	603b      	str	r3, [r7, #0]
 800904a:	4613      	mov	r3, r2
 800904c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800904e:	2300      	movs	r3, #0
 8009050:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8009058:	b2db      	uxtb	r3, r3
 800905a:	2b20      	cmp	r3, #32
 800905c:	f040 8083 	bne.w	8009166 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8009060:	68bb      	ldr	r3, [r7, #8]
 8009062:	2b00      	cmp	r3, #0
 8009064:	d002      	beq.n	800906c <HAL_UART_Transmit+0x2e>
 8009066:	88fb      	ldrh	r3, [r7, #6]
 8009068:	2b00      	cmp	r3, #0
 800906a:	d101      	bne.n	8009070 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800906c:	2301      	movs	r3, #1
 800906e:	e07b      	b.n	8009168 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009076:	2b01      	cmp	r3, #1
 8009078:	d101      	bne.n	800907e <HAL_UART_Transmit+0x40>
 800907a:	2302      	movs	r3, #2
 800907c:	e074      	b.n	8009168 <HAL_UART_Transmit+0x12a>
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	2201      	movs	r2, #1
 8009082:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	2200      	movs	r2, #0
 800908a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	2221      	movs	r2, #33	; 0x21
 8009090:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8009094:	f7fa fe86 	bl	8003da4 <HAL_GetTick>
 8009098:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	88fa      	ldrh	r2, [r7, #6]
 800909e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	88fa      	ldrh	r2, [r7, #6]
 80090a4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	2200      	movs	r2, #0
 80090aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80090ae:	e042      	b.n	8009136 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80090b4:	b29b      	uxth	r3, r3
 80090b6:	3b01      	subs	r3, #1
 80090b8:	b29a      	uxth	r2, r3
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	689b      	ldr	r3, [r3, #8]
 80090c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80090c6:	d122      	bne.n	800910e <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80090c8:	683b      	ldr	r3, [r7, #0]
 80090ca:	9300      	str	r3, [sp, #0]
 80090cc:	697b      	ldr	r3, [r7, #20]
 80090ce:	2200      	movs	r2, #0
 80090d0:	2180      	movs	r1, #128	; 0x80
 80090d2:	68f8      	ldr	r0, [r7, #12]
 80090d4:	f000 f84c 	bl	8009170 <UART_WaitOnFlagUntilTimeout>
 80090d8:	4603      	mov	r3, r0
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d001      	beq.n	80090e2 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80090de:	2303      	movs	r3, #3
 80090e0:	e042      	b.n	8009168 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80090e2:	68bb      	ldr	r3, [r7, #8]
 80090e4:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80090e6:	693b      	ldr	r3, [r7, #16]
 80090e8:	881b      	ldrh	r3, [r3, #0]
 80090ea:	461a      	mov	r2, r3
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80090f4:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	691b      	ldr	r3, [r3, #16]
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d103      	bne.n	8009106 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80090fe:	68bb      	ldr	r3, [r7, #8]
 8009100:	3302      	adds	r3, #2
 8009102:	60bb      	str	r3, [r7, #8]
 8009104:	e017      	b.n	8009136 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8009106:	68bb      	ldr	r3, [r7, #8]
 8009108:	3301      	adds	r3, #1
 800910a:	60bb      	str	r3, [r7, #8]
 800910c:	e013      	b.n	8009136 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800910e:	683b      	ldr	r3, [r7, #0]
 8009110:	9300      	str	r3, [sp, #0]
 8009112:	697b      	ldr	r3, [r7, #20]
 8009114:	2200      	movs	r2, #0
 8009116:	2180      	movs	r1, #128	; 0x80
 8009118:	68f8      	ldr	r0, [r7, #12]
 800911a:	f000 f829 	bl	8009170 <UART_WaitOnFlagUntilTimeout>
 800911e:	4603      	mov	r3, r0
 8009120:	2b00      	cmp	r3, #0
 8009122:	d001      	beq.n	8009128 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8009124:	2303      	movs	r3, #3
 8009126:	e01f      	b.n	8009168 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8009128:	68bb      	ldr	r3, [r7, #8]
 800912a:	1c5a      	adds	r2, r3, #1
 800912c:	60ba      	str	r2, [r7, #8]
 800912e:	781a      	ldrb	r2, [r3, #0]
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800913a:	b29b      	uxth	r3, r3
 800913c:	2b00      	cmp	r3, #0
 800913e:	d1b7      	bne.n	80090b0 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009140:	683b      	ldr	r3, [r7, #0]
 8009142:	9300      	str	r3, [sp, #0]
 8009144:	697b      	ldr	r3, [r7, #20]
 8009146:	2200      	movs	r2, #0
 8009148:	2140      	movs	r1, #64	; 0x40
 800914a:	68f8      	ldr	r0, [r7, #12]
 800914c:	f000 f810 	bl	8009170 <UART_WaitOnFlagUntilTimeout>
 8009150:	4603      	mov	r3, r0
 8009152:	2b00      	cmp	r3, #0
 8009154:	d001      	beq.n	800915a <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8009156:	2303      	movs	r3, #3
 8009158:	e006      	b.n	8009168 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	2220      	movs	r2, #32
 800915e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8009162:	2300      	movs	r3, #0
 8009164:	e000      	b.n	8009168 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8009166:	2302      	movs	r3, #2
  }
}
 8009168:	4618      	mov	r0, r3
 800916a:	3718      	adds	r7, #24
 800916c:	46bd      	mov	sp, r7
 800916e:	bd80      	pop	{r7, pc}

08009170 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8009170:	b580      	push	{r7, lr}
 8009172:	b084      	sub	sp, #16
 8009174:	af00      	add	r7, sp, #0
 8009176:	60f8      	str	r0, [r7, #12]
 8009178:	60b9      	str	r1, [r7, #8]
 800917a:	603b      	str	r3, [r7, #0]
 800917c:	4613      	mov	r3, r2
 800917e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009180:	e02c      	b.n	80091dc <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009182:	69bb      	ldr	r3, [r7, #24]
 8009184:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009188:	d028      	beq.n	80091dc <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800918a:	69bb      	ldr	r3, [r7, #24]
 800918c:	2b00      	cmp	r3, #0
 800918e:	d007      	beq.n	80091a0 <UART_WaitOnFlagUntilTimeout+0x30>
 8009190:	f7fa fe08 	bl	8003da4 <HAL_GetTick>
 8009194:	4602      	mov	r2, r0
 8009196:	683b      	ldr	r3, [r7, #0]
 8009198:	1ad3      	subs	r3, r2, r3
 800919a:	69ba      	ldr	r2, [r7, #24]
 800919c:	429a      	cmp	r2, r3
 800919e:	d21d      	bcs.n	80091dc <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	68da      	ldr	r2, [r3, #12]
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80091ae:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	695a      	ldr	r2, [r3, #20]
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	f022 0201 	bic.w	r2, r2, #1
 80091be:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	2220      	movs	r2, #32
 80091c4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	2220      	movs	r2, #32
 80091cc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	2200      	movs	r2, #0
 80091d4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80091d8:	2303      	movs	r3, #3
 80091da:	e00f      	b.n	80091fc <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	681a      	ldr	r2, [r3, #0]
 80091e2:	68bb      	ldr	r3, [r7, #8]
 80091e4:	4013      	ands	r3, r2
 80091e6:	68ba      	ldr	r2, [r7, #8]
 80091e8:	429a      	cmp	r2, r3
 80091ea:	bf0c      	ite	eq
 80091ec:	2301      	moveq	r3, #1
 80091ee:	2300      	movne	r3, #0
 80091f0:	b2db      	uxtb	r3, r3
 80091f2:	461a      	mov	r2, r3
 80091f4:	79fb      	ldrb	r3, [r7, #7]
 80091f6:	429a      	cmp	r2, r3
 80091f8:	d0c3      	beq.n	8009182 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80091fa:	2300      	movs	r3, #0
}
 80091fc:	4618      	mov	r0, r3
 80091fe:	3710      	adds	r7, #16
 8009200:	46bd      	mov	sp, r7
 8009202:	bd80      	pop	{r7, pc}

08009204 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009204:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009208:	b085      	sub	sp, #20
 800920a:	af00      	add	r7, sp, #0
 800920c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	691b      	ldr	r3, [r3, #16]
 8009214:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	68da      	ldr	r2, [r3, #12]
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	430a      	orrs	r2, r1
 8009222:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	689a      	ldr	r2, [r3, #8]
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	691b      	ldr	r3, [r3, #16]
 800922c:	431a      	orrs	r2, r3
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	695b      	ldr	r3, [r3, #20]
 8009232:	431a      	orrs	r2, r3
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	69db      	ldr	r3, [r3, #28]
 8009238:	4313      	orrs	r3, r2
 800923a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	68db      	ldr	r3, [r3, #12]
 8009242:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8009246:	f023 030c 	bic.w	r3, r3, #12
 800924a:	687a      	ldr	r2, [r7, #4]
 800924c:	6812      	ldr	r2, [r2, #0]
 800924e:	68f9      	ldr	r1, [r7, #12]
 8009250:	430b      	orrs	r3, r1
 8009252:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	695b      	ldr	r3, [r3, #20]
 800925a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	699a      	ldr	r2, [r3, #24]
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	430a      	orrs	r2, r1
 8009268:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	69db      	ldr	r3, [r3, #28]
 800926e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009272:	f040 818b 	bne.w	800958c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	4ac1      	ldr	r2, [pc, #772]	; (8009580 <UART_SetConfig+0x37c>)
 800927c:	4293      	cmp	r3, r2
 800927e:	d005      	beq.n	800928c <UART_SetConfig+0x88>
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	4abf      	ldr	r2, [pc, #764]	; (8009584 <UART_SetConfig+0x380>)
 8009286:	4293      	cmp	r3, r2
 8009288:	f040 80bd 	bne.w	8009406 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800928c:	f7fe fa7c 	bl	8007788 <HAL_RCC_GetPCLK2Freq>
 8009290:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009292:	68bb      	ldr	r3, [r7, #8]
 8009294:	461d      	mov	r5, r3
 8009296:	f04f 0600 	mov.w	r6, #0
 800929a:	46a8      	mov	r8, r5
 800929c:	46b1      	mov	r9, r6
 800929e:	eb18 0308 	adds.w	r3, r8, r8
 80092a2:	eb49 0409 	adc.w	r4, r9, r9
 80092a6:	4698      	mov	r8, r3
 80092a8:	46a1      	mov	r9, r4
 80092aa:	eb18 0805 	adds.w	r8, r8, r5
 80092ae:	eb49 0906 	adc.w	r9, r9, r6
 80092b2:	f04f 0100 	mov.w	r1, #0
 80092b6:	f04f 0200 	mov.w	r2, #0
 80092ba:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80092be:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80092c2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80092c6:	4688      	mov	r8, r1
 80092c8:	4691      	mov	r9, r2
 80092ca:	eb18 0005 	adds.w	r0, r8, r5
 80092ce:	eb49 0106 	adc.w	r1, r9, r6
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	685b      	ldr	r3, [r3, #4]
 80092d6:	461d      	mov	r5, r3
 80092d8:	f04f 0600 	mov.w	r6, #0
 80092dc:	196b      	adds	r3, r5, r5
 80092de:	eb46 0406 	adc.w	r4, r6, r6
 80092e2:	461a      	mov	r2, r3
 80092e4:	4623      	mov	r3, r4
 80092e6:	f7f6 ffd3 	bl	8000290 <__aeabi_uldivmod>
 80092ea:	4603      	mov	r3, r0
 80092ec:	460c      	mov	r4, r1
 80092ee:	461a      	mov	r2, r3
 80092f0:	4ba5      	ldr	r3, [pc, #660]	; (8009588 <UART_SetConfig+0x384>)
 80092f2:	fba3 2302 	umull	r2, r3, r3, r2
 80092f6:	095b      	lsrs	r3, r3, #5
 80092f8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80092fc:	68bb      	ldr	r3, [r7, #8]
 80092fe:	461d      	mov	r5, r3
 8009300:	f04f 0600 	mov.w	r6, #0
 8009304:	46a9      	mov	r9, r5
 8009306:	46b2      	mov	sl, r6
 8009308:	eb19 0309 	adds.w	r3, r9, r9
 800930c:	eb4a 040a 	adc.w	r4, sl, sl
 8009310:	4699      	mov	r9, r3
 8009312:	46a2      	mov	sl, r4
 8009314:	eb19 0905 	adds.w	r9, r9, r5
 8009318:	eb4a 0a06 	adc.w	sl, sl, r6
 800931c:	f04f 0100 	mov.w	r1, #0
 8009320:	f04f 0200 	mov.w	r2, #0
 8009324:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009328:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800932c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009330:	4689      	mov	r9, r1
 8009332:	4692      	mov	sl, r2
 8009334:	eb19 0005 	adds.w	r0, r9, r5
 8009338:	eb4a 0106 	adc.w	r1, sl, r6
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	685b      	ldr	r3, [r3, #4]
 8009340:	461d      	mov	r5, r3
 8009342:	f04f 0600 	mov.w	r6, #0
 8009346:	196b      	adds	r3, r5, r5
 8009348:	eb46 0406 	adc.w	r4, r6, r6
 800934c:	461a      	mov	r2, r3
 800934e:	4623      	mov	r3, r4
 8009350:	f7f6 ff9e 	bl	8000290 <__aeabi_uldivmod>
 8009354:	4603      	mov	r3, r0
 8009356:	460c      	mov	r4, r1
 8009358:	461a      	mov	r2, r3
 800935a:	4b8b      	ldr	r3, [pc, #556]	; (8009588 <UART_SetConfig+0x384>)
 800935c:	fba3 1302 	umull	r1, r3, r3, r2
 8009360:	095b      	lsrs	r3, r3, #5
 8009362:	2164      	movs	r1, #100	; 0x64
 8009364:	fb01 f303 	mul.w	r3, r1, r3
 8009368:	1ad3      	subs	r3, r2, r3
 800936a:	00db      	lsls	r3, r3, #3
 800936c:	3332      	adds	r3, #50	; 0x32
 800936e:	4a86      	ldr	r2, [pc, #536]	; (8009588 <UART_SetConfig+0x384>)
 8009370:	fba2 2303 	umull	r2, r3, r2, r3
 8009374:	095b      	lsrs	r3, r3, #5
 8009376:	005b      	lsls	r3, r3, #1
 8009378:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800937c:	4498      	add	r8, r3
 800937e:	68bb      	ldr	r3, [r7, #8]
 8009380:	461d      	mov	r5, r3
 8009382:	f04f 0600 	mov.w	r6, #0
 8009386:	46a9      	mov	r9, r5
 8009388:	46b2      	mov	sl, r6
 800938a:	eb19 0309 	adds.w	r3, r9, r9
 800938e:	eb4a 040a 	adc.w	r4, sl, sl
 8009392:	4699      	mov	r9, r3
 8009394:	46a2      	mov	sl, r4
 8009396:	eb19 0905 	adds.w	r9, r9, r5
 800939a:	eb4a 0a06 	adc.w	sl, sl, r6
 800939e:	f04f 0100 	mov.w	r1, #0
 80093a2:	f04f 0200 	mov.w	r2, #0
 80093a6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80093aa:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80093ae:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80093b2:	4689      	mov	r9, r1
 80093b4:	4692      	mov	sl, r2
 80093b6:	eb19 0005 	adds.w	r0, r9, r5
 80093ba:	eb4a 0106 	adc.w	r1, sl, r6
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	685b      	ldr	r3, [r3, #4]
 80093c2:	461d      	mov	r5, r3
 80093c4:	f04f 0600 	mov.w	r6, #0
 80093c8:	196b      	adds	r3, r5, r5
 80093ca:	eb46 0406 	adc.w	r4, r6, r6
 80093ce:	461a      	mov	r2, r3
 80093d0:	4623      	mov	r3, r4
 80093d2:	f7f6 ff5d 	bl	8000290 <__aeabi_uldivmod>
 80093d6:	4603      	mov	r3, r0
 80093d8:	460c      	mov	r4, r1
 80093da:	461a      	mov	r2, r3
 80093dc:	4b6a      	ldr	r3, [pc, #424]	; (8009588 <UART_SetConfig+0x384>)
 80093de:	fba3 1302 	umull	r1, r3, r3, r2
 80093e2:	095b      	lsrs	r3, r3, #5
 80093e4:	2164      	movs	r1, #100	; 0x64
 80093e6:	fb01 f303 	mul.w	r3, r1, r3
 80093ea:	1ad3      	subs	r3, r2, r3
 80093ec:	00db      	lsls	r3, r3, #3
 80093ee:	3332      	adds	r3, #50	; 0x32
 80093f0:	4a65      	ldr	r2, [pc, #404]	; (8009588 <UART_SetConfig+0x384>)
 80093f2:	fba2 2303 	umull	r2, r3, r2, r3
 80093f6:	095b      	lsrs	r3, r3, #5
 80093f8:	f003 0207 	and.w	r2, r3, #7
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	4442      	add	r2, r8
 8009402:	609a      	str	r2, [r3, #8]
 8009404:	e26f      	b.n	80098e6 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009406:	f7fe f9ab 	bl	8007760 <HAL_RCC_GetPCLK1Freq>
 800940a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800940c:	68bb      	ldr	r3, [r7, #8]
 800940e:	461d      	mov	r5, r3
 8009410:	f04f 0600 	mov.w	r6, #0
 8009414:	46a8      	mov	r8, r5
 8009416:	46b1      	mov	r9, r6
 8009418:	eb18 0308 	adds.w	r3, r8, r8
 800941c:	eb49 0409 	adc.w	r4, r9, r9
 8009420:	4698      	mov	r8, r3
 8009422:	46a1      	mov	r9, r4
 8009424:	eb18 0805 	adds.w	r8, r8, r5
 8009428:	eb49 0906 	adc.w	r9, r9, r6
 800942c:	f04f 0100 	mov.w	r1, #0
 8009430:	f04f 0200 	mov.w	r2, #0
 8009434:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8009438:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800943c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8009440:	4688      	mov	r8, r1
 8009442:	4691      	mov	r9, r2
 8009444:	eb18 0005 	adds.w	r0, r8, r5
 8009448:	eb49 0106 	adc.w	r1, r9, r6
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	685b      	ldr	r3, [r3, #4]
 8009450:	461d      	mov	r5, r3
 8009452:	f04f 0600 	mov.w	r6, #0
 8009456:	196b      	adds	r3, r5, r5
 8009458:	eb46 0406 	adc.w	r4, r6, r6
 800945c:	461a      	mov	r2, r3
 800945e:	4623      	mov	r3, r4
 8009460:	f7f6 ff16 	bl	8000290 <__aeabi_uldivmod>
 8009464:	4603      	mov	r3, r0
 8009466:	460c      	mov	r4, r1
 8009468:	461a      	mov	r2, r3
 800946a:	4b47      	ldr	r3, [pc, #284]	; (8009588 <UART_SetConfig+0x384>)
 800946c:	fba3 2302 	umull	r2, r3, r3, r2
 8009470:	095b      	lsrs	r3, r3, #5
 8009472:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8009476:	68bb      	ldr	r3, [r7, #8]
 8009478:	461d      	mov	r5, r3
 800947a:	f04f 0600 	mov.w	r6, #0
 800947e:	46a9      	mov	r9, r5
 8009480:	46b2      	mov	sl, r6
 8009482:	eb19 0309 	adds.w	r3, r9, r9
 8009486:	eb4a 040a 	adc.w	r4, sl, sl
 800948a:	4699      	mov	r9, r3
 800948c:	46a2      	mov	sl, r4
 800948e:	eb19 0905 	adds.w	r9, r9, r5
 8009492:	eb4a 0a06 	adc.w	sl, sl, r6
 8009496:	f04f 0100 	mov.w	r1, #0
 800949a:	f04f 0200 	mov.w	r2, #0
 800949e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80094a2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80094a6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80094aa:	4689      	mov	r9, r1
 80094ac:	4692      	mov	sl, r2
 80094ae:	eb19 0005 	adds.w	r0, r9, r5
 80094b2:	eb4a 0106 	adc.w	r1, sl, r6
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	685b      	ldr	r3, [r3, #4]
 80094ba:	461d      	mov	r5, r3
 80094bc:	f04f 0600 	mov.w	r6, #0
 80094c0:	196b      	adds	r3, r5, r5
 80094c2:	eb46 0406 	adc.w	r4, r6, r6
 80094c6:	461a      	mov	r2, r3
 80094c8:	4623      	mov	r3, r4
 80094ca:	f7f6 fee1 	bl	8000290 <__aeabi_uldivmod>
 80094ce:	4603      	mov	r3, r0
 80094d0:	460c      	mov	r4, r1
 80094d2:	461a      	mov	r2, r3
 80094d4:	4b2c      	ldr	r3, [pc, #176]	; (8009588 <UART_SetConfig+0x384>)
 80094d6:	fba3 1302 	umull	r1, r3, r3, r2
 80094da:	095b      	lsrs	r3, r3, #5
 80094dc:	2164      	movs	r1, #100	; 0x64
 80094de:	fb01 f303 	mul.w	r3, r1, r3
 80094e2:	1ad3      	subs	r3, r2, r3
 80094e4:	00db      	lsls	r3, r3, #3
 80094e6:	3332      	adds	r3, #50	; 0x32
 80094e8:	4a27      	ldr	r2, [pc, #156]	; (8009588 <UART_SetConfig+0x384>)
 80094ea:	fba2 2303 	umull	r2, r3, r2, r3
 80094ee:	095b      	lsrs	r3, r3, #5
 80094f0:	005b      	lsls	r3, r3, #1
 80094f2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80094f6:	4498      	add	r8, r3
 80094f8:	68bb      	ldr	r3, [r7, #8]
 80094fa:	461d      	mov	r5, r3
 80094fc:	f04f 0600 	mov.w	r6, #0
 8009500:	46a9      	mov	r9, r5
 8009502:	46b2      	mov	sl, r6
 8009504:	eb19 0309 	adds.w	r3, r9, r9
 8009508:	eb4a 040a 	adc.w	r4, sl, sl
 800950c:	4699      	mov	r9, r3
 800950e:	46a2      	mov	sl, r4
 8009510:	eb19 0905 	adds.w	r9, r9, r5
 8009514:	eb4a 0a06 	adc.w	sl, sl, r6
 8009518:	f04f 0100 	mov.w	r1, #0
 800951c:	f04f 0200 	mov.w	r2, #0
 8009520:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009524:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009528:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800952c:	4689      	mov	r9, r1
 800952e:	4692      	mov	sl, r2
 8009530:	eb19 0005 	adds.w	r0, r9, r5
 8009534:	eb4a 0106 	adc.w	r1, sl, r6
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	685b      	ldr	r3, [r3, #4]
 800953c:	461d      	mov	r5, r3
 800953e:	f04f 0600 	mov.w	r6, #0
 8009542:	196b      	adds	r3, r5, r5
 8009544:	eb46 0406 	adc.w	r4, r6, r6
 8009548:	461a      	mov	r2, r3
 800954a:	4623      	mov	r3, r4
 800954c:	f7f6 fea0 	bl	8000290 <__aeabi_uldivmod>
 8009550:	4603      	mov	r3, r0
 8009552:	460c      	mov	r4, r1
 8009554:	461a      	mov	r2, r3
 8009556:	4b0c      	ldr	r3, [pc, #48]	; (8009588 <UART_SetConfig+0x384>)
 8009558:	fba3 1302 	umull	r1, r3, r3, r2
 800955c:	095b      	lsrs	r3, r3, #5
 800955e:	2164      	movs	r1, #100	; 0x64
 8009560:	fb01 f303 	mul.w	r3, r1, r3
 8009564:	1ad3      	subs	r3, r2, r3
 8009566:	00db      	lsls	r3, r3, #3
 8009568:	3332      	adds	r3, #50	; 0x32
 800956a:	4a07      	ldr	r2, [pc, #28]	; (8009588 <UART_SetConfig+0x384>)
 800956c:	fba2 2303 	umull	r2, r3, r2, r3
 8009570:	095b      	lsrs	r3, r3, #5
 8009572:	f003 0207 	and.w	r2, r3, #7
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	4442      	add	r2, r8
 800957c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800957e:	e1b2      	b.n	80098e6 <UART_SetConfig+0x6e2>
 8009580:	40011000 	.word	0x40011000
 8009584:	40011400 	.word	0x40011400
 8009588:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	4ad7      	ldr	r2, [pc, #860]	; (80098f0 <UART_SetConfig+0x6ec>)
 8009592:	4293      	cmp	r3, r2
 8009594:	d005      	beq.n	80095a2 <UART_SetConfig+0x39e>
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	4ad6      	ldr	r2, [pc, #856]	; (80098f4 <UART_SetConfig+0x6f0>)
 800959c:	4293      	cmp	r3, r2
 800959e:	f040 80d1 	bne.w	8009744 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80095a2:	f7fe f8f1 	bl	8007788 <HAL_RCC_GetPCLK2Freq>
 80095a6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80095a8:	68bb      	ldr	r3, [r7, #8]
 80095aa:	469a      	mov	sl, r3
 80095ac:	f04f 0b00 	mov.w	fp, #0
 80095b0:	46d0      	mov	r8, sl
 80095b2:	46d9      	mov	r9, fp
 80095b4:	eb18 0308 	adds.w	r3, r8, r8
 80095b8:	eb49 0409 	adc.w	r4, r9, r9
 80095bc:	4698      	mov	r8, r3
 80095be:	46a1      	mov	r9, r4
 80095c0:	eb18 080a 	adds.w	r8, r8, sl
 80095c4:	eb49 090b 	adc.w	r9, r9, fp
 80095c8:	f04f 0100 	mov.w	r1, #0
 80095cc:	f04f 0200 	mov.w	r2, #0
 80095d0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80095d4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80095d8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80095dc:	4688      	mov	r8, r1
 80095de:	4691      	mov	r9, r2
 80095e0:	eb1a 0508 	adds.w	r5, sl, r8
 80095e4:	eb4b 0609 	adc.w	r6, fp, r9
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	685b      	ldr	r3, [r3, #4]
 80095ec:	4619      	mov	r1, r3
 80095ee:	f04f 0200 	mov.w	r2, #0
 80095f2:	f04f 0300 	mov.w	r3, #0
 80095f6:	f04f 0400 	mov.w	r4, #0
 80095fa:	0094      	lsls	r4, r2, #2
 80095fc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009600:	008b      	lsls	r3, r1, #2
 8009602:	461a      	mov	r2, r3
 8009604:	4623      	mov	r3, r4
 8009606:	4628      	mov	r0, r5
 8009608:	4631      	mov	r1, r6
 800960a:	f7f6 fe41 	bl	8000290 <__aeabi_uldivmod>
 800960e:	4603      	mov	r3, r0
 8009610:	460c      	mov	r4, r1
 8009612:	461a      	mov	r2, r3
 8009614:	4bb8      	ldr	r3, [pc, #736]	; (80098f8 <UART_SetConfig+0x6f4>)
 8009616:	fba3 2302 	umull	r2, r3, r3, r2
 800961a:	095b      	lsrs	r3, r3, #5
 800961c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8009620:	68bb      	ldr	r3, [r7, #8]
 8009622:	469b      	mov	fp, r3
 8009624:	f04f 0c00 	mov.w	ip, #0
 8009628:	46d9      	mov	r9, fp
 800962a:	46e2      	mov	sl, ip
 800962c:	eb19 0309 	adds.w	r3, r9, r9
 8009630:	eb4a 040a 	adc.w	r4, sl, sl
 8009634:	4699      	mov	r9, r3
 8009636:	46a2      	mov	sl, r4
 8009638:	eb19 090b 	adds.w	r9, r9, fp
 800963c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8009640:	f04f 0100 	mov.w	r1, #0
 8009644:	f04f 0200 	mov.w	r2, #0
 8009648:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800964c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009650:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009654:	4689      	mov	r9, r1
 8009656:	4692      	mov	sl, r2
 8009658:	eb1b 0509 	adds.w	r5, fp, r9
 800965c:	eb4c 060a 	adc.w	r6, ip, sl
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	685b      	ldr	r3, [r3, #4]
 8009664:	4619      	mov	r1, r3
 8009666:	f04f 0200 	mov.w	r2, #0
 800966a:	f04f 0300 	mov.w	r3, #0
 800966e:	f04f 0400 	mov.w	r4, #0
 8009672:	0094      	lsls	r4, r2, #2
 8009674:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009678:	008b      	lsls	r3, r1, #2
 800967a:	461a      	mov	r2, r3
 800967c:	4623      	mov	r3, r4
 800967e:	4628      	mov	r0, r5
 8009680:	4631      	mov	r1, r6
 8009682:	f7f6 fe05 	bl	8000290 <__aeabi_uldivmod>
 8009686:	4603      	mov	r3, r0
 8009688:	460c      	mov	r4, r1
 800968a:	461a      	mov	r2, r3
 800968c:	4b9a      	ldr	r3, [pc, #616]	; (80098f8 <UART_SetConfig+0x6f4>)
 800968e:	fba3 1302 	umull	r1, r3, r3, r2
 8009692:	095b      	lsrs	r3, r3, #5
 8009694:	2164      	movs	r1, #100	; 0x64
 8009696:	fb01 f303 	mul.w	r3, r1, r3
 800969a:	1ad3      	subs	r3, r2, r3
 800969c:	011b      	lsls	r3, r3, #4
 800969e:	3332      	adds	r3, #50	; 0x32
 80096a0:	4a95      	ldr	r2, [pc, #596]	; (80098f8 <UART_SetConfig+0x6f4>)
 80096a2:	fba2 2303 	umull	r2, r3, r2, r3
 80096a6:	095b      	lsrs	r3, r3, #5
 80096a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80096ac:	4498      	add	r8, r3
 80096ae:	68bb      	ldr	r3, [r7, #8]
 80096b0:	469b      	mov	fp, r3
 80096b2:	f04f 0c00 	mov.w	ip, #0
 80096b6:	46d9      	mov	r9, fp
 80096b8:	46e2      	mov	sl, ip
 80096ba:	eb19 0309 	adds.w	r3, r9, r9
 80096be:	eb4a 040a 	adc.w	r4, sl, sl
 80096c2:	4699      	mov	r9, r3
 80096c4:	46a2      	mov	sl, r4
 80096c6:	eb19 090b 	adds.w	r9, r9, fp
 80096ca:	eb4a 0a0c 	adc.w	sl, sl, ip
 80096ce:	f04f 0100 	mov.w	r1, #0
 80096d2:	f04f 0200 	mov.w	r2, #0
 80096d6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80096da:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80096de:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80096e2:	4689      	mov	r9, r1
 80096e4:	4692      	mov	sl, r2
 80096e6:	eb1b 0509 	adds.w	r5, fp, r9
 80096ea:	eb4c 060a 	adc.w	r6, ip, sl
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	685b      	ldr	r3, [r3, #4]
 80096f2:	4619      	mov	r1, r3
 80096f4:	f04f 0200 	mov.w	r2, #0
 80096f8:	f04f 0300 	mov.w	r3, #0
 80096fc:	f04f 0400 	mov.w	r4, #0
 8009700:	0094      	lsls	r4, r2, #2
 8009702:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009706:	008b      	lsls	r3, r1, #2
 8009708:	461a      	mov	r2, r3
 800970a:	4623      	mov	r3, r4
 800970c:	4628      	mov	r0, r5
 800970e:	4631      	mov	r1, r6
 8009710:	f7f6 fdbe 	bl	8000290 <__aeabi_uldivmod>
 8009714:	4603      	mov	r3, r0
 8009716:	460c      	mov	r4, r1
 8009718:	461a      	mov	r2, r3
 800971a:	4b77      	ldr	r3, [pc, #476]	; (80098f8 <UART_SetConfig+0x6f4>)
 800971c:	fba3 1302 	umull	r1, r3, r3, r2
 8009720:	095b      	lsrs	r3, r3, #5
 8009722:	2164      	movs	r1, #100	; 0x64
 8009724:	fb01 f303 	mul.w	r3, r1, r3
 8009728:	1ad3      	subs	r3, r2, r3
 800972a:	011b      	lsls	r3, r3, #4
 800972c:	3332      	adds	r3, #50	; 0x32
 800972e:	4a72      	ldr	r2, [pc, #456]	; (80098f8 <UART_SetConfig+0x6f4>)
 8009730:	fba2 2303 	umull	r2, r3, r2, r3
 8009734:	095b      	lsrs	r3, r3, #5
 8009736:	f003 020f 	and.w	r2, r3, #15
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	4442      	add	r2, r8
 8009740:	609a      	str	r2, [r3, #8]
 8009742:	e0d0      	b.n	80098e6 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8009744:	f7fe f80c 	bl	8007760 <HAL_RCC_GetPCLK1Freq>
 8009748:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800974a:	68bb      	ldr	r3, [r7, #8]
 800974c:	469a      	mov	sl, r3
 800974e:	f04f 0b00 	mov.w	fp, #0
 8009752:	46d0      	mov	r8, sl
 8009754:	46d9      	mov	r9, fp
 8009756:	eb18 0308 	adds.w	r3, r8, r8
 800975a:	eb49 0409 	adc.w	r4, r9, r9
 800975e:	4698      	mov	r8, r3
 8009760:	46a1      	mov	r9, r4
 8009762:	eb18 080a 	adds.w	r8, r8, sl
 8009766:	eb49 090b 	adc.w	r9, r9, fp
 800976a:	f04f 0100 	mov.w	r1, #0
 800976e:	f04f 0200 	mov.w	r2, #0
 8009772:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8009776:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800977a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800977e:	4688      	mov	r8, r1
 8009780:	4691      	mov	r9, r2
 8009782:	eb1a 0508 	adds.w	r5, sl, r8
 8009786:	eb4b 0609 	adc.w	r6, fp, r9
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	685b      	ldr	r3, [r3, #4]
 800978e:	4619      	mov	r1, r3
 8009790:	f04f 0200 	mov.w	r2, #0
 8009794:	f04f 0300 	mov.w	r3, #0
 8009798:	f04f 0400 	mov.w	r4, #0
 800979c:	0094      	lsls	r4, r2, #2
 800979e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80097a2:	008b      	lsls	r3, r1, #2
 80097a4:	461a      	mov	r2, r3
 80097a6:	4623      	mov	r3, r4
 80097a8:	4628      	mov	r0, r5
 80097aa:	4631      	mov	r1, r6
 80097ac:	f7f6 fd70 	bl	8000290 <__aeabi_uldivmod>
 80097b0:	4603      	mov	r3, r0
 80097b2:	460c      	mov	r4, r1
 80097b4:	461a      	mov	r2, r3
 80097b6:	4b50      	ldr	r3, [pc, #320]	; (80098f8 <UART_SetConfig+0x6f4>)
 80097b8:	fba3 2302 	umull	r2, r3, r3, r2
 80097bc:	095b      	lsrs	r3, r3, #5
 80097be:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80097c2:	68bb      	ldr	r3, [r7, #8]
 80097c4:	469b      	mov	fp, r3
 80097c6:	f04f 0c00 	mov.w	ip, #0
 80097ca:	46d9      	mov	r9, fp
 80097cc:	46e2      	mov	sl, ip
 80097ce:	eb19 0309 	adds.w	r3, r9, r9
 80097d2:	eb4a 040a 	adc.w	r4, sl, sl
 80097d6:	4699      	mov	r9, r3
 80097d8:	46a2      	mov	sl, r4
 80097da:	eb19 090b 	adds.w	r9, r9, fp
 80097de:	eb4a 0a0c 	adc.w	sl, sl, ip
 80097e2:	f04f 0100 	mov.w	r1, #0
 80097e6:	f04f 0200 	mov.w	r2, #0
 80097ea:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80097ee:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80097f2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80097f6:	4689      	mov	r9, r1
 80097f8:	4692      	mov	sl, r2
 80097fa:	eb1b 0509 	adds.w	r5, fp, r9
 80097fe:	eb4c 060a 	adc.w	r6, ip, sl
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	685b      	ldr	r3, [r3, #4]
 8009806:	4619      	mov	r1, r3
 8009808:	f04f 0200 	mov.w	r2, #0
 800980c:	f04f 0300 	mov.w	r3, #0
 8009810:	f04f 0400 	mov.w	r4, #0
 8009814:	0094      	lsls	r4, r2, #2
 8009816:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800981a:	008b      	lsls	r3, r1, #2
 800981c:	461a      	mov	r2, r3
 800981e:	4623      	mov	r3, r4
 8009820:	4628      	mov	r0, r5
 8009822:	4631      	mov	r1, r6
 8009824:	f7f6 fd34 	bl	8000290 <__aeabi_uldivmod>
 8009828:	4603      	mov	r3, r0
 800982a:	460c      	mov	r4, r1
 800982c:	461a      	mov	r2, r3
 800982e:	4b32      	ldr	r3, [pc, #200]	; (80098f8 <UART_SetConfig+0x6f4>)
 8009830:	fba3 1302 	umull	r1, r3, r3, r2
 8009834:	095b      	lsrs	r3, r3, #5
 8009836:	2164      	movs	r1, #100	; 0x64
 8009838:	fb01 f303 	mul.w	r3, r1, r3
 800983c:	1ad3      	subs	r3, r2, r3
 800983e:	011b      	lsls	r3, r3, #4
 8009840:	3332      	adds	r3, #50	; 0x32
 8009842:	4a2d      	ldr	r2, [pc, #180]	; (80098f8 <UART_SetConfig+0x6f4>)
 8009844:	fba2 2303 	umull	r2, r3, r2, r3
 8009848:	095b      	lsrs	r3, r3, #5
 800984a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800984e:	4498      	add	r8, r3
 8009850:	68bb      	ldr	r3, [r7, #8]
 8009852:	469b      	mov	fp, r3
 8009854:	f04f 0c00 	mov.w	ip, #0
 8009858:	46d9      	mov	r9, fp
 800985a:	46e2      	mov	sl, ip
 800985c:	eb19 0309 	adds.w	r3, r9, r9
 8009860:	eb4a 040a 	adc.w	r4, sl, sl
 8009864:	4699      	mov	r9, r3
 8009866:	46a2      	mov	sl, r4
 8009868:	eb19 090b 	adds.w	r9, r9, fp
 800986c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8009870:	f04f 0100 	mov.w	r1, #0
 8009874:	f04f 0200 	mov.w	r2, #0
 8009878:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800987c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009880:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009884:	4689      	mov	r9, r1
 8009886:	4692      	mov	sl, r2
 8009888:	eb1b 0509 	adds.w	r5, fp, r9
 800988c:	eb4c 060a 	adc.w	r6, ip, sl
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	685b      	ldr	r3, [r3, #4]
 8009894:	4619      	mov	r1, r3
 8009896:	f04f 0200 	mov.w	r2, #0
 800989a:	f04f 0300 	mov.w	r3, #0
 800989e:	f04f 0400 	mov.w	r4, #0
 80098a2:	0094      	lsls	r4, r2, #2
 80098a4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80098a8:	008b      	lsls	r3, r1, #2
 80098aa:	461a      	mov	r2, r3
 80098ac:	4623      	mov	r3, r4
 80098ae:	4628      	mov	r0, r5
 80098b0:	4631      	mov	r1, r6
 80098b2:	f7f6 fced 	bl	8000290 <__aeabi_uldivmod>
 80098b6:	4603      	mov	r3, r0
 80098b8:	460c      	mov	r4, r1
 80098ba:	461a      	mov	r2, r3
 80098bc:	4b0e      	ldr	r3, [pc, #56]	; (80098f8 <UART_SetConfig+0x6f4>)
 80098be:	fba3 1302 	umull	r1, r3, r3, r2
 80098c2:	095b      	lsrs	r3, r3, #5
 80098c4:	2164      	movs	r1, #100	; 0x64
 80098c6:	fb01 f303 	mul.w	r3, r1, r3
 80098ca:	1ad3      	subs	r3, r2, r3
 80098cc:	011b      	lsls	r3, r3, #4
 80098ce:	3332      	adds	r3, #50	; 0x32
 80098d0:	4a09      	ldr	r2, [pc, #36]	; (80098f8 <UART_SetConfig+0x6f4>)
 80098d2:	fba2 2303 	umull	r2, r3, r2, r3
 80098d6:	095b      	lsrs	r3, r3, #5
 80098d8:	f003 020f 	and.w	r2, r3, #15
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	4442      	add	r2, r8
 80098e2:	609a      	str	r2, [r3, #8]
}
 80098e4:	e7ff      	b.n	80098e6 <UART_SetConfig+0x6e2>
 80098e6:	bf00      	nop
 80098e8:	3714      	adds	r7, #20
 80098ea:	46bd      	mov	sp, r7
 80098ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098f0:	40011000 	.word	0x40011000
 80098f4:	40011400 	.word	0x40011400
 80098f8:	51eb851f 	.word	0x51eb851f

080098fc <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 80098fc:	b480      	push	{r7}
 80098fe:	b085      	sub	sp, #20
 8009900:	af00      	add	r7, sp, #0
 8009902:	6078      	str	r0, [r7, #4]
 8009904:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0U;
 8009906:	2300      	movs	r3, #0
 8009908:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0U;
 800990a:	2300      	movs	r3, #0
 800990c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800990e:	683b      	ldr	r3, [r7, #0]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	2b01      	cmp	r3, #1
 8009914:	d029      	beq.n	800996a <FMC_SDRAM_Init+0x6e>
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8009922:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009926:	60fb      	str	r3, [r7, #12]
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8009928:	683b      	ldr	r3, [r7, #0]
 800992a:	685a      	ldr	r2, [r3, #4]
                                               Init->RowBitsNumber      |\
 800992c:	683b      	ldr	r3, [r7, #0]
 800992e:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8009930:	431a      	orrs	r2, r3
                                               Init->MemoryDataWidth    |\
 8009932:	683b      	ldr	r3, [r7, #0]
 8009934:	68db      	ldr	r3, [r3, #12]
                                               Init->RowBitsNumber      |\
 8009936:	431a      	orrs	r2, r3
                                               Init->InternalBankNumber |\
 8009938:	683b      	ldr	r3, [r7, #0]
 800993a:	691b      	ldr	r3, [r3, #16]
                                               Init->MemoryDataWidth    |\
 800993c:	431a      	orrs	r2, r3
                                               Init->CASLatency         |\
 800993e:	683b      	ldr	r3, [r7, #0]
 8009940:	695b      	ldr	r3, [r3, #20]
                                               Init->InternalBankNumber |\
 8009942:	431a      	orrs	r2, r3
                                               Init->WriteProtection    |\
 8009944:	683b      	ldr	r3, [r7, #0]
 8009946:	699b      	ldr	r3, [r3, #24]
                                               Init->CASLatency         |\
 8009948:	431a      	orrs	r2, r3
                                               Init->SDClockPeriod      |\
 800994a:	683b      	ldr	r3, [r7, #0]
 800994c:	69db      	ldr	r3, [r3, #28]
                                               Init->WriteProtection    |\
 800994e:	431a      	orrs	r2, r3
                                               Init->ReadBurst          |\
 8009950:	683b      	ldr	r3, [r7, #0]
 8009952:	6a1b      	ldr	r3, [r3, #32]
                                               Init->SDClockPeriod      |\
 8009954:	431a      	orrs	r2, r3
                                               Init->ReadPipeDelay
 8009956:	683b      	ldr	r3, [r7, #0]
 8009958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                               Init->ReadBurst          |\
 800995a:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800995c:	68fa      	ldr	r2, [r7, #12]
 800995e:	4313      	orrs	r3, r2
 8009960:	60fb      	str	r3, [r7, #12]
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	68fa      	ldr	r2, [r7, #12]
 8009966:	601a      	str	r2, [r3, #0]
 8009968:	e034      	b.n	80099d4 <FMC_SDRAM_Init+0xd8>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8009976:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8009978:	683b      	ldr	r3, [r7, #0]
 800997a:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 800997c:	683b      	ldr	r3, [r7, #0]
 800997e:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8009980:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);  
 8009982:	683b      	ldr	r3, [r7, #0]
 8009984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8009986:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8009988:	68fa      	ldr	r2, [r7, #12]
 800998a:	4313      	orrs	r3, r2
 800998c:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	685b      	ldr	r3, [r3, #4]
 8009992:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8009994:	68bb      	ldr	r3, [r7, #8]
 8009996:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800999a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800999e:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80099a0:	683b      	ldr	r3, [r7, #0]
 80099a2:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber      |\
 80099a4:	683b      	ldr	r3, [r7, #0]
 80099a6:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80099a8:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth    |\
 80099aa:	683b      	ldr	r3, [r7, #0]
 80099ac:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber      |\
 80099ae:	431a      	orrs	r2, r3
                       Init->InternalBankNumber |\
 80099b0:	683b      	ldr	r3, [r7, #0]
 80099b2:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth    |\
 80099b4:	431a      	orrs	r2, r3
                       Init->CASLatency         |\
 80099b6:	683b      	ldr	r3, [r7, #0]
 80099b8:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber |\
 80099ba:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 80099bc:	683b      	ldr	r3, [r7, #0]
 80099be:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency         |\
 80099c0:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 80099c2:	68ba      	ldr	r2, [r7, #8]
 80099c4:	4313      	orrs	r3, r2
 80099c6:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	68fa      	ldr	r2, [r7, #12]
 80099cc:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	68ba      	ldr	r2, [r7, #8]
 80099d2:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;
 80099d4:	2300      	movs	r3, #0
}
 80099d6:	4618      	mov	r0, r3
 80099d8:	3714      	adds	r7, #20
 80099da:	46bd      	mov	sp, r7
 80099dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e0:	4770      	bx	lr

080099e2 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80099e2:	b480      	push	{r7}
 80099e4:	b087      	sub	sp, #28
 80099e6:	af00      	add	r7, sp, #0
 80099e8:	60f8      	str	r0, [r7, #12]
 80099ea:	60b9      	str	r1, [r7, #8]
 80099ec:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0U;
 80099ee:	2300      	movs	r3, #0
 80099f0:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0U;
 80099f2:	2300      	movs	r3, #0
 80099f4:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	2b01      	cmp	r3, #1
 80099fa:	d02e      	beq.n	8009a5a <FMC_SDRAM_Timing_Init+0x78>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	689b      	ldr	r3, [r3, #8]
 8009a00:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8009a02:	697b      	ldr	r3, [r7, #20]
 8009a04:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8009a08:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8009a0a:	68bb      	ldr	r3, [r7, #8]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8009a10:	68bb      	ldr	r3, [r7, #8]
 8009a12:	685b      	ldr	r3, [r3, #4]
 8009a14:	3b01      	subs	r3, #1
 8009a16:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8009a18:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8009a1a:	68bb      	ldr	r3, [r7, #8]
 8009a1c:	689b      	ldr	r3, [r3, #8]
 8009a1e:	3b01      	subs	r3, #1
 8009a20:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8009a22:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8009a24:	68bb      	ldr	r3, [r7, #8]
 8009a26:	68db      	ldr	r3, [r3, #12]
 8009a28:	3b01      	subs	r3, #1
 8009a2a:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8009a2c:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8009a2e:	68bb      	ldr	r3, [r7, #8]
 8009a30:	691b      	ldr	r3, [r3, #16]
 8009a32:	3b01      	subs	r3, #1
 8009a34:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8009a36:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1U) << 20U)             |\
 8009a38:	68bb      	ldr	r3, [r7, #8]
 8009a3a:	695b      	ldr	r3, [r3, #20]
 8009a3c:	3b01      	subs	r3, #1
 8009a3e:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 8009a40:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U));
 8009a42:	68bb      	ldr	r3, [r7, #8]
 8009a44:	699b      	ldr	r3, [r3, #24]
 8009a46:	3b01      	subs	r3, #1
 8009a48:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8009a4a:	4313      	orrs	r3, r2
 8009a4c:	697a      	ldr	r2, [r7, #20]
 8009a4e:	4313      	orrs	r3, r2
 8009a50:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	697a      	ldr	r2, [r7, #20]
 8009a56:	609a      	str	r2, [r3, #8]
 8009a58:	e03b      	b.n	8009ad2 <FMC_SDRAM_Timing_Init+0xf0>
  }
   else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	689b      	ldr	r3, [r3, #8]
 8009a5e:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 8009a60:	697b      	ldr	r3, [r7, #20]
 8009a62:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009a66:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009a6a:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8009a6c:	68bb      	ldr	r3, [r7, #8]
 8009a6e:	68db      	ldr	r3, [r3, #12]
 8009a70:	3b01      	subs	r3, #1
 8009a72:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 8009a74:	68bb      	ldr	r3, [r7, #8]
 8009a76:	695b      	ldr	r3, [r3, #20]
 8009a78:	3b01      	subs	r3, #1
 8009a7a:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 8009a7c:	4313      	orrs	r3, r2
 8009a7e:	697a      	ldr	r2, [r7, #20]
 8009a80:	4313      	orrs	r3, r2
 8009a82:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	68db      	ldr	r3, [r3, #12]
 8009a88:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8009a8a:	693b      	ldr	r3, [r7, #16]
 8009a8c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8009a90:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8009a92:	68bb      	ldr	r3, [r7, #8]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8009a98:	68bb      	ldr	r3, [r7, #8]
 8009a9a:	685b      	ldr	r3, [r3, #4]
 8009a9c:	3b01      	subs	r3, #1
 8009a9e:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8009aa0:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8009aa2:	68bb      	ldr	r3, [r7, #8]
 8009aa4:	689b      	ldr	r3, [r3, #8]
 8009aa6:	3b01      	subs	r3, #1
 8009aa8:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 8009aaa:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 8009aac:	68bb      	ldr	r3, [r7, #8]
 8009aae:	691b      	ldr	r3, [r3, #16]
 8009ab0:	3b01      	subs	r3, #1
 8009ab2:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 8009ab4:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1U) << 24U)));   
 8009ab6:	68bb      	ldr	r3, [r7, #8]
 8009ab8:	699b      	ldr	r3, [r3, #24]
 8009aba:	3b01      	subs	r3, #1
 8009abc:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8009abe:	4313      	orrs	r3, r2
 8009ac0:	693a      	ldr	r2, [r7, #16]
 8009ac2:	4313      	orrs	r3, r2
 8009ac4:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	697a      	ldr	r2, [r7, #20]
 8009aca:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	693a      	ldr	r2, [r7, #16]
 8009ad0:	60da      	str	r2, [r3, #12]
  }
  return HAL_OK;
 8009ad2:	2300      	movs	r3, #0
}
 8009ad4:	4618      	mov	r0, r3
 8009ad6:	371c      	adds	r7, #28
 8009ad8:	46bd      	mov	sp, r7
 8009ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ade:	4770      	bx	lr

08009ae0 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8009ae0:	b580      	push	{r7, lr}
 8009ae2:	b086      	sub	sp, #24
 8009ae4:	af00      	add	r7, sp, #0
 8009ae6:	60f8      	str	r0, [r7, #12]
 8009ae8:	60b9      	str	r1, [r7, #8]
 8009aea:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0U;
 8009aec:	2300      	movs	r3, #0
 8009aee:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = 0U;
 8009af0:	2300      	movs	r3, #0
 8009af2:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8009af4:	68bb      	ldr	r3, [r7, #8]
 8009af6:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 8009af8:	68bb      	ldr	r3, [r7, #8]
 8009afa:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8009afc:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1U) << 5U) |\
 8009afe:	68bb      	ldr	r3, [r7, #8]
 8009b00:	689b      	ldr	r3, [r3, #8]
 8009b02:	3b01      	subs	r3, #1
 8009b04:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 8009b06:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9U)
 8009b08:	68bb      	ldr	r3, [r7, #8]
 8009b0a:	68db      	ldr	r3, [r3, #12]
 8009b0c:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8009b0e:	4313      	orrs	r3, r2
 8009b10:	613b      	str	r3, [r7, #16]
                    );
    
  Device->SDCMR = tmpr;
 8009b12:	693a      	ldr	r2, [r7, #16]
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	611a      	str	r2, [r3, #16]

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8009b18:	f7fa f944 	bl	8003da4 <HAL_GetTick>
 8009b1c:	6178      	str	r0, [r7, #20]

  /* Wait until command is send */
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8009b1e:	e010      	b.n	8009b42 <FMC_SDRAM_SendCommand+0x62>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b26:	d00c      	beq.n	8009b42 <FMC_SDRAM_SendCommand+0x62>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d007      	beq.n	8009b3e <FMC_SDRAM_SendCommand+0x5e>
 8009b2e:	f7fa f939 	bl	8003da4 <HAL_GetTick>
 8009b32:	4602      	mov	r2, r0
 8009b34:	697b      	ldr	r3, [r7, #20]
 8009b36:	1ad3      	subs	r3, r2, r3
 8009b38:	687a      	ldr	r2, [r7, #4]
 8009b3a:	429a      	cmp	r2, r3
 8009b3c:	d201      	bcs.n	8009b42 <FMC_SDRAM_SendCommand+0x62>
      {
        return HAL_TIMEOUT;
 8009b3e:	2303      	movs	r3, #3
 8009b40:	e006      	b.n	8009b50 <FMC_SDRAM_SendCommand+0x70>
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	699b      	ldr	r3, [r3, #24]
 8009b46:	f003 0320 	and.w	r3, r3, #32
 8009b4a:	2b20      	cmp	r3, #32
 8009b4c:	d0e8      	beq.n	8009b20 <FMC_SDRAM_SendCommand+0x40>
      }
    }
  }

  return HAL_OK;
 8009b4e:	2300      	movs	r3, #0
}
 8009b50:	4618      	mov	r0, r3
 8009b52:	3718      	adds	r7, #24
 8009b54:	46bd      	mov	sp, r7
 8009b56:	bd80      	pop	{r7, pc}

08009b58 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8009b58:	b480      	push	{r7}
 8009b5a:	b083      	sub	sp, #12
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	6078      	str	r0, [r7, #4]
 8009b60:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1U);
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	695a      	ldr	r2, [r3, #20]
 8009b66:	683b      	ldr	r3, [r7, #0]
 8009b68:	005b      	lsls	r3, r3, #1
 8009b6a:	431a      	orrs	r2, r3
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 8009b70:	2300      	movs	r3, #0
}
 8009b72:	4618      	mov	r0, r3
 8009b74:	370c      	adds	r7, #12
 8009b76:	46bd      	mov	sp, r7
 8009b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b7c:	4770      	bx	lr
	...

08009b80 <__errno>:
 8009b80:	4b01      	ldr	r3, [pc, #4]	; (8009b88 <__errno+0x8>)
 8009b82:	6818      	ldr	r0, [r3, #0]
 8009b84:	4770      	bx	lr
 8009b86:	bf00      	nop
 8009b88:	20000188 	.word	0x20000188

08009b8c <__libc_init_array>:
 8009b8c:	b570      	push	{r4, r5, r6, lr}
 8009b8e:	4e0d      	ldr	r6, [pc, #52]	; (8009bc4 <__libc_init_array+0x38>)
 8009b90:	4c0d      	ldr	r4, [pc, #52]	; (8009bc8 <__libc_init_array+0x3c>)
 8009b92:	1ba4      	subs	r4, r4, r6
 8009b94:	10a4      	asrs	r4, r4, #2
 8009b96:	2500      	movs	r5, #0
 8009b98:	42a5      	cmp	r5, r4
 8009b9a:	d109      	bne.n	8009bb0 <__libc_init_array+0x24>
 8009b9c:	4e0b      	ldr	r6, [pc, #44]	; (8009bcc <__libc_init_array+0x40>)
 8009b9e:	4c0c      	ldr	r4, [pc, #48]	; (8009bd0 <__libc_init_array+0x44>)
 8009ba0:	f000 fc3a 	bl	800a418 <_init>
 8009ba4:	1ba4      	subs	r4, r4, r6
 8009ba6:	10a4      	asrs	r4, r4, #2
 8009ba8:	2500      	movs	r5, #0
 8009baa:	42a5      	cmp	r5, r4
 8009bac:	d105      	bne.n	8009bba <__libc_init_array+0x2e>
 8009bae:	bd70      	pop	{r4, r5, r6, pc}
 8009bb0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009bb4:	4798      	blx	r3
 8009bb6:	3501      	adds	r5, #1
 8009bb8:	e7ee      	b.n	8009b98 <__libc_init_array+0xc>
 8009bba:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009bbe:	4798      	blx	r3
 8009bc0:	3501      	adds	r5, #1
 8009bc2:	e7f2      	b.n	8009baa <__libc_init_array+0x1e>
 8009bc4:	0800cfe0 	.word	0x0800cfe0
 8009bc8:	0800cfe0 	.word	0x0800cfe0
 8009bcc:	0800cfe0 	.word	0x0800cfe0
 8009bd0:	0800cfe4 	.word	0x0800cfe4

08009bd4 <memset>:
 8009bd4:	4402      	add	r2, r0
 8009bd6:	4603      	mov	r3, r0
 8009bd8:	4293      	cmp	r3, r2
 8009bda:	d100      	bne.n	8009bde <memset+0xa>
 8009bdc:	4770      	bx	lr
 8009bde:	f803 1b01 	strb.w	r1, [r3], #1
 8009be2:	e7f9      	b.n	8009bd8 <memset+0x4>

08009be4 <sniprintf>:
 8009be4:	b40c      	push	{r2, r3}
 8009be6:	b530      	push	{r4, r5, lr}
 8009be8:	4b17      	ldr	r3, [pc, #92]	; (8009c48 <sniprintf+0x64>)
 8009bea:	1e0c      	subs	r4, r1, #0
 8009bec:	b09d      	sub	sp, #116	; 0x74
 8009bee:	681d      	ldr	r5, [r3, #0]
 8009bf0:	da08      	bge.n	8009c04 <sniprintf+0x20>
 8009bf2:	238b      	movs	r3, #139	; 0x8b
 8009bf4:	602b      	str	r3, [r5, #0]
 8009bf6:	f04f 30ff 	mov.w	r0, #4294967295
 8009bfa:	b01d      	add	sp, #116	; 0x74
 8009bfc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009c00:	b002      	add	sp, #8
 8009c02:	4770      	bx	lr
 8009c04:	f44f 7302 	mov.w	r3, #520	; 0x208
 8009c08:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009c0c:	bf14      	ite	ne
 8009c0e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8009c12:	4623      	moveq	r3, r4
 8009c14:	9304      	str	r3, [sp, #16]
 8009c16:	9307      	str	r3, [sp, #28]
 8009c18:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009c1c:	9002      	str	r0, [sp, #8]
 8009c1e:	9006      	str	r0, [sp, #24]
 8009c20:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009c24:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009c26:	ab21      	add	r3, sp, #132	; 0x84
 8009c28:	a902      	add	r1, sp, #8
 8009c2a:	4628      	mov	r0, r5
 8009c2c:	9301      	str	r3, [sp, #4]
 8009c2e:	f000 f867 	bl	8009d00 <_svfiprintf_r>
 8009c32:	1c43      	adds	r3, r0, #1
 8009c34:	bfbc      	itt	lt
 8009c36:	238b      	movlt	r3, #139	; 0x8b
 8009c38:	602b      	strlt	r3, [r5, #0]
 8009c3a:	2c00      	cmp	r4, #0
 8009c3c:	d0dd      	beq.n	8009bfa <sniprintf+0x16>
 8009c3e:	9b02      	ldr	r3, [sp, #8]
 8009c40:	2200      	movs	r2, #0
 8009c42:	701a      	strb	r2, [r3, #0]
 8009c44:	e7d9      	b.n	8009bfa <sniprintf+0x16>
 8009c46:	bf00      	nop
 8009c48:	20000188 	.word	0x20000188

08009c4c <__ssputs_r>:
 8009c4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c50:	688e      	ldr	r6, [r1, #8]
 8009c52:	429e      	cmp	r6, r3
 8009c54:	4682      	mov	sl, r0
 8009c56:	460c      	mov	r4, r1
 8009c58:	4690      	mov	r8, r2
 8009c5a:	4699      	mov	r9, r3
 8009c5c:	d837      	bhi.n	8009cce <__ssputs_r+0x82>
 8009c5e:	898a      	ldrh	r2, [r1, #12]
 8009c60:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009c64:	d031      	beq.n	8009cca <__ssputs_r+0x7e>
 8009c66:	6825      	ldr	r5, [r4, #0]
 8009c68:	6909      	ldr	r1, [r1, #16]
 8009c6a:	1a6f      	subs	r7, r5, r1
 8009c6c:	6965      	ldr	r5, [r4, #20]
 8009c6e:	2302      	movs	r3, #2
 8009c70:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009c74:	fb95 f5f3 	sdiv	r5, r5, r3
 8009c78:	f109 0301 	add.w	r3, r9, #1
 8009c7c:	443b      	add	r3, r7
 8009c7e:	429d      	cmp	r5, r3
 8009c80:	bf38      	it	cc
 8009c82:	461d      	movcc	r5, r3
 8009c84:	0553      	lsls	r3, r2, #21
 8009c86:	d530      	bpl.n	8009cea <__ssputs_r+0x9e>
 8009c88:	4629      	mov	r1, r5
 8009c8a:	f000 fb2b 	bl	800a2e4 <_malloc_r>
 8009c8e:	4606      	mov	r6, r0
 8009c90:	b950      	cbnz	r0, 8009ca8 <__ssputs_r+0x5c>
 8009c92:	230c      	movs	r3, #12
 8009c94:	f8ca 3000 	str.w	r3, [sl]
 8009c98:	89a3      	ldrh	r3, [r4, #12]
 8009c9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009c9e:	81a3      	strh	r3, [r4, #12]
 8009ca0:	f04f 30ff 	mov.w	r0, #4294967295
 8009ca4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ca8:	463a      	mov	r2, r7
 8009caa:	6921      	ldr	r1, [r4, #16]
 8009cac:	f000 faa8 	bl	800a200 <memcpy>
 8009cb0:	89a3      	ldrh	r3, [r4, #12]
 8009cb2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009cb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009cba:	81a3      	strh	r3, [r4, #12]
 8009cbc:	6126      	str	r6, [r4, #16]
 8009cbe:	6165      	str	r5, [r4, #20]
 8009cc0:	443e      	add	r6, r7
 8009cc2:	1bed      	subs	r5, r5, r7
 8009cc4:	6026      	str	r6, [r4, #0]
 8009cc6:	60a5      	str	r5, [r4, #8]
 8009cc8:	464e      	mov	r6, r9
 8009cca:	454e      	cmp	r6, r9
 8009ccc:	d900      	bls.n	8009cd0 <__ssputs_r+0x84>
 8009cce:	464e      	mov	r6, r9
 8009cd0:	4632      	mov	r2, r6
 8009cd2:	4641      	mov	r1, r8
 8009cd4:	6820      	ldr	r0, [r4, #0]
 8009cd6:	f000 fa9e 	bl	800a216 <memmove>
 8009cda:	68a3      	ldr	r3, [r4, #8]
 8009cdc:	1b9b      	subs	r3, r3, r6
 8009cde:	60a3      	str	r3, [r4, #8]
 8009ce0:	6823      	ldr	r3, [r4, #0]
 8009ce2:	441e      	add	r6, r3
 8009ce4:	6026      	str	r6, [r4, #0]
 8009ce6:	2000      	movs	r0, #0
 8009ce8:	e7dc      	b.n	8009ca4 <__ssputs_r+0x58>
 8009cea:	462a      	mov	r2, r5
 8009cec:	f000 fb54 	bl	800a398 <_realloc_r>
 8009cf0:	4606      	mov	r6, r0
 8009cf2:	2800      	cmp	r0, #0
 8009cf4:	d1e2      	bne.n	8009cbc <__ssputs_r+0x70>
 8009cf6:	6921      	ldr	r1, [r4, #16]
 8009cf8:	4650      	mov	r0, sl
 8009cfa:	f000 faa5 	bl	800a248 <_free_r>
 8009cfe:	e7c8      	b.n	8009c92 <__ssputs_r+0x46>

08009d00 <_svfiprintf_r>:
 8009d00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d04:	461d      	mov	r5, r3
 8009d06:	898b      	ldrh	r3, [r1, #12]
 8009d08:	061f      	lsls	r7, r3, #24
 8009d0a:	b09d      	sub	sp, #116	; 0x74
 8009d0c:	4680      	mov	r8, r0
 8009d0e:	460c      	mov	r4, r1
 8009d10:	4616      	mov	r6, r2
 8009d12:	d50f      	bpl.n	8009d34 <_svfiprintf_r+0x34>
 8009d14:	690b      	ldr	r3, [r1, #16]
 8009d16:	b96b      	cbnz	r3, 8009d34 <_svfiprintf_r+0x34>
 8009d18:	2140      	movs	r1, #64	; 0x40
 8009d1a:	f000 fae3 	bl	800a2e4 <_malloc_r>
 8009d1e:	6020      	str	r0, [r4, #0]
 8009d20:	6120      	str	r0, [r4, #16]
 8009d22:	b928      	cbnz	r0, 8009d30 <_svfiprintf_r+0x30>
 8009d24:	230c      	movs	r3, #12
 8009d26:	f8c8 3000 	str.w	r3, [r8]
 8009d2a:	f04f 30ff 	mov.w	r0, #4294967295
 8009d2e:	e0c8      	b.n	8009ec2 <_svfiprintf_r+0x1c2>
 8009d30:	2340      	movs	r3, #64	; 0x40
 8009d32:	6163      	str	r3, [r4, #20]
 8009d34:	2300      	movs	r3, #0
 8009d36:	9309      	str	r3, [sp, #36]	; 0x24
 8009d38:	2320      	movs	r3, #32
 8009d3a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009d3e:	2330      	movs	r3, #48	; 0x30
 8009d40:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009d44:	9503      	str	r5, [sp, #12]
 8009d46:	f04f 0b01 	mov.w	fp, #1
 8009d4a:	4637      	mov	r7, r6
 8009d4c:	463d      	mov	r5, r7
 8009d4e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009d52:	b10b      	cbz	r3, 8009d58 <_svfiprintf_r+0x58>
 8009d54:	2b25      	cmp	r3, #37	; 0x25
 8009d56:	d13e      	bne.n	8009dd6 <_svfiprintf_r+0xd6>
 8009d58:	ebb7 0a06 	subs.w	sl, r7, r6
 8009d5c:	d00b      	beq.n	8009d76 <_svfiprintf_r+0x76>
 8009d5e:	4653      	mov	r3, sl
 8009d60:	4632      	mov	r2, r6
 8009d62:	4621      	mov	r1, r4
 8009d64:	4640      	mov	r0, r8
 8009d66:	f7ff ff71 	bl	8009c4c <__ssputs_r>
 8009d6a:	3001      	adds	r0, #1
 8009d6c:	f000 80a4 	beq.w	8009eb8 <_svfiprintf_r+0x1b8>
 8009d70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d72:	4453      	add	r3, sl
 8009d74:	9309      	str	r3, [sp, #36]	; 0x24
 8009d76:	783b      	ldrb	r3, [r7, #0]
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	f000 809d 	beq.w	8009eb8 <_svfiprintf_r+0x1b8>
 8009d7e:	2300      	movs	r3, #0
 8009d80:	f04f 32ff 	mov.w	r2, #4294967295
 8009d84:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009d88:	9304      	str	r3, [sp, #16]
 8009d8a:	9307      	str	r3, [sp, #28]
 8009d8c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009d90:	931a      	str	r3, [sp, #104]	; 0x68
 8009d92:	462f      	mov	r7, r5
 8009d94:	2205      	movs	r2, #5
 8009d96:	f817 1b01 	ldrb.w	r1, [r7], #1
 8009d9a:	4850      	ldr	r0, [pc, #320]	; (8009edc <_svfiprintf_r+0x1dc>)
 8009d9c:	f7f6 fa28 	bl	80001f0 <memchr>
 8009da0:	9b04      	ldr	r3, [sp, #16]
 8009da2:	b9d0      	cbnz	r0, 8009dda <_svfiprintf_r+0xda>
 8009da4:	06d9      	lsls	r1, r3, #27
 8009da6:	bf44      	itt	mi
 8009da8:	2220      	movmi	r2, #32
 8009daa:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009dae:	071a      	lsls	r2, r3, #28
 8009db0:	bf44      	itt	mi
 8009db2:	222b      	movmi	r2, #43	; 0x2b
 8009db4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009db8:	782a      	ldrb	r2, [r5, #0]
 8009dba:	2a2a      	cmp	r2, #42	; 0x2a
 8009dbc:	d015      	beq.n	8009dea <_svfiprintf_r+0xea>
 8009dbe:	9a07      	ldr	r2, [sp, #28]
 8009dc0:	462f      	mov	r7, r5
 8009dc2:	2000      	movs	r0, #0
 8009dc4:	250a      	movs	r5, #10
 8009dc6:	4639      	mov	r1, r7
 8009dc8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009dcc:	3b30      	subs	r3, #48	; 0x30
 8009dce:	2b09      	cmp	r3, #9
 8009dd0:	d94d      	bls.n	8009e6e <_svfiprintf_r+0x16e>
 8009dd2:	b1b8      	cbz	r0, 8009e04 <_svfiprintf_r+0x104>
 8009dd4:	e00f      	b.n	8009df6 <_svfiprintf_r+0xf6>
 8009dd6:	462f      	mov	r7, r5
 8009dd8:	e7b8      	b.n	8009d4c <_svfiprintf_r+0x4c>
 8009dda:	4a40      	ldr	r2, [pc, #256]	; (8009edc <_svfiprintf_r+0x1dc>)
 8009ddc:	1a80      	subs	r0, r0, r2
 8009dde:	fa0b f000 	lsl.w	r0, fp, r0
 8009de2:	4318      	orrs	r0, r3
 8009de4:	9004      	str	r0, [sp, #16]
 8009de6:	463d      	mov	r5, r7
 8009de8:	e7d3      	b.n	8009d92 <_svfiprintf_r+0x92>
 8009dea:	9a03      	ldr	r2, [sp, #12]
 8009dec:	1d11      	adds	r1, r2, #4
 8009dee:	6812      	ldr	r2, [r2, #0]
 8009df0:	9103      	str	r1, [sp, #12]
 8009df2:	2a00      	cmp	r2, #0
 8009df4:	db01      	blt.n	8009dfa <_svfiprintf_r+0xfa>
 8009df6:	9207      	str	r2, [sp, #28]
 8009df8:	e004      	b.n	8009e04 <_svfiprintf_r+0x104>
 8009dfa:	4252      	negs	r2, r2
 8009dfc:	f043 0302 	orr.w	r3, r3, #2
 8009e00:	9207      	str	r2, [sp, #28]
 8009e02:	9304      	str	r3, [sp, #16]
 8009e04:	783b      	ldrb	r3, [r7, #0]
 8009e06:	2b2e      	cmp	r3, #46	; 0x2e
 8009e08:	d10c      	bne.n	8009e24 <_svfiprintf_r+0x124>
 8009e0a:	787b      	ldrb	r3, [r7, #1]
 8009e0c:	2b2a      	cmp	r3, #42	; 0x2a
 8009e0e:	d133      	bne.n	8009e78 <_svfiprintf_r+0x178>
 8009e10:	9b03      	ldr	r3, [sp, #12]
 8009e12:	1d1a      	adds	r2, r3, #4
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	9203      	str	r2, [sp, #12]
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	bfb8      	it	lt
 8009e1c:	f04f 33ff 	movlt.w	r3, #4294967295
 8009e20:	3702      	adds	r7, #2
 8009e22:	9305      	str	r3, [sp, #20]
 8009e24:	4d2e      	ldr	r5, [pc, #184]	; (8009ee0 <_svfiprintf_r+0x1e0>)
 8009e26:	7839      	ldrb	r1, [r7, #0]
 8009e28:	2203      	movs	r2, #3
 8009e2a:	4628      	mov	r0, r5
 8009e2c:	f7f6 f9e0 	bl	80001f0 <memchr>
 8009e30:	b138      	cbz	r0, 8009e42 <_svfiprintf_r+0x142>
 8009e32:	2340      	movs	r3, #64	; 0x40
 8009e34:	1b40      	subs	r0, r0, r5
 8009e36:	fa03 f000 	lsl.w	r0, r3, r0
 8009e3a:	9b04      	ldr	r3, [sp, #16]
 8009e3c:	4303      	orrs	r3, r0
 8009e3e:	3701      	adds	r7, #1
 8009e40:	9304      	str	r3, [sp, #16]
 8009e42:	7839      	ldrb	r1, [r7, #0]
 8009e44:	4827      	ldr	r0, [pc, #156]	; (8009ee4 <_svfiprintf_r+0x1e4>)
 8009e46:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009e4a:	2206      	movs	r2, #6
 8009e4c:	1c7e      	adds	r6, r7, #1
 8009e4e:	f7f6 f9cf 	bl	80001f0 <memchr>
 8009e52:	2800      	cmp	r0, #0
 8009e54:	d038      	beq.n	8009ec8 <_svfiprintf_r+0x1c8>
 8009e56:	4b24      	ldr	r3, [pc, #144]	; (8009ee8 <_svfiprintf_r+0x1e8>)
 8009e58:	bb13      	cbnz	r3, 8009ea0 <_svfiprintf_r+0x1a0>
 8009e5a:	9b03      	ldr	r3, [sp, #12]
 8009e5c:	3307      	adds	r3, #7
 8009e5e:	f023 0307 	bic.w	r3, r3, #7
 8009e62:	3308      	adds	r3, #8
 8009e64:	9303      	str	r3, [sp, #12]
 8009e66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e68:	444b      	add	r3, r9
 8009e6a:	9309      	str	r3, [sp, #36]	; 0x24
 8009e6c:	e76d      	b.n	8009d4a <_svfiprintf_r+0x4a>
 8009e6e:	fb05 3202 	mla	r2, r5, r2, r3
 8009e72:	2001      	movs	r0, #1
 8009e74:	460f      	mov	r7, r1
 8009e76:	e7a6      	b.n	8009dc6 <_svfiprintf_r+0xc6>
 8009e78:	2300      	movs	r3, #0
 8009e7a:	3701      	adds	r7, #1
 8009e7c:	9305      	str	r3, [sp, #20]
 8009e7e:	4619      	mov	r1, r3
 8009e80:	250a      	movs	r5, #10
 8009e82:	4638      	mov	r0, r7
 8009e84:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009e88:	3a30      	subs	r2, #48	; 0x30
 8009e8a:	2a09      	cmp	r2, #9
 8009e8c:	d903      	bls.n	8009e96 <_svfiprintf_r+0x196>
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d0c8      	beq.n	8009e24 <_svfiprintf_r+0x124>
 8009e92:	9105      	str	r1, [sp, #20]
 8009e94:	e7c6      	b.n	8009e24 <_svfiprintf_r+0x124>
 8009e96:	fb05 2101 	mla	r1, r5, r1, r2
 8009e9a:	2301      	movs	r3, #1
 8009e9c:	4607      	mov	r7, r0
 8009e9e:	e7f0      	b.n	8009e82 <_svfiprintf_r+0x182>
 8009ea0:	ab03      	add	r3, sp, #12
 8009ea2:	9300      	str	r3, [sp, #0]
 8009ea4:	4622      	mov	r2, r4
 8009ea6:	4b11      	ldr	r3, [pc, #68]	; (8009eec <_svfiprintf_r+0x1ec>)
 8009ea8:	a904      	add	r1, sp, #16
 8009eaa:	4640      	mov	r0, r8
 8009eac:	f3af 8000 	nop.w
 8009eb0:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009eb4:	4681      	mov	r9, r0
 8009eb6:	d1d6      	bne.n	8009e66 <_svfiprintf_r+0x166>
 8009eb8:	89a3      	ldrh	r3, [r4, #12]
 8009eba:	065b      	lsls	r3, r3, #25
 8009ebc:	f53f af35 	bmi.w	8009d2a <_svfiprintf_r+0x2a>
 8009ec0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009ec2:	b01d      	add	sp, #116	; 0x74
 8009ec4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ec8:	ab03      	add	r3, sp, #12
 8009eca:	9300      	str	r3, [sp, #0]
 8009ecc:	4622      	mov	r2, r4
 8009ece:	4b07      	ldr	r3, [pc, #28]	; (8009eec <_svfiprintf_r+0x1ec>)
 8009ed0:	a904      	add	r1, sp, #16
 8009ed2:	4640      	mov	r0, r8
 8009ed4:	f000 f882 	bl	8009fdc <_printf_i>
 8009ed8:	e7ea      	b.n	8009eb0 <_svfiprintf_r+0x1b0>
 8009eda:	bf00      	nop
 8009edc:	0800cfa4 	.word	0x0800cfa4
 8009ee0:	0800cfaa 	.word	0x0800cfaa
 8009ee4:	0800cfae 	.word	0x0800cfae
 8009ee8:	00000000 	.word	0x00000000
 8009eec:	08009c4d 	.word	0x08009c4d

08009ef0 <_printf_common>:
 8009ef0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ef4:	4691      	mov	r9, r2
 8009ef6:	461f      	mov	r7, r3
 8009ef8:	688a      	ldr	r2, [r1, #8]
 8009efa:	690b      	ldr	r3, [r1, #16]
 8009efc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009f00:	4293      	cmp	r3, r2
 8009f02:	bfb8      	it	lt
 8009f04:	4613      	movlt	r3, r2
 8009f06:	f8c9 3000 	str.w	r3, [r9]
 8009f0a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009f0e:	4606      	mov	r6, r0
 8009f10:	460c      	mov	r4, r1
 8009f12:	b112      	cbz	r2, 8009f1a <_printf_common+0x2a>
 8009f14:	3301      	adds	r3, #1
 8009f16:	f8c9 3000 	str.w	r3, [r9]
 8009f1a:	6823      	ldr	r3, [r4, #0]
 8009f1c:	0699      	lsls	r1, r3, #26
 8009f1e:	bf42      	ittt	mi
 8009f20:	f8d9 3000 	ldrmi.w	r3, [r9]
 8009f24:	3302      	addmi	r3, #2
 8009f26:	f8c9 3000 	strmi.w	r3, [r9]
 8009f2a:	6825      	ldr	r5, [r4, #0]
 8009f2c:	f015 0506 	ands.w	r5, r5, #6
 8009f30:	d107      	bne.n	8009f42 <_printf_common+0x52>
 8009f32:	f104 0a19 	add.w	sl, r4, #25
 8009f36:	68e3      	ldr	r3, [r4, #12]
 8009f38:	f8d9 2000 	ldr.w	r2, [r9]
 8009f3c:	1a9b      	subs	r3, r3, r2
 8009f3e:	42ab      	cmp	r3, r5
 8009f40:	dc28      	bgt.n	8009f94 <_printf_common+0xa4>
 8009f42:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8009f46:	6822      	ldr	r2, [r4, #0]
 8009f48:	3300      	adds	r3, #0
 8009f4a:	bf18      	it	ne
 8009f4c:	2301      	movne	r3, #1
 8009f4e:	0692      	lsls	r2, r2, #26
 8009f50:	d42d      	bmi.n	8009fae <_printf_common+0xbe>
 8009f52:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009f56:	4639      	mov	r1, r7
 8009f58:	4630      	mov	r0, r6
 8009f5a:	47c0      	blx	r8
 8009f5c:	3001      	adds	r0, #1
 8009f5e:	d020      	beq.n	8009fa2 <_printf_common+0xb2>
 8009f60:	6823      	ldr	r3, [r4, #0]
 8009f62:	68e5      	ldr	r5, [r4, #12]
 8009f64:	f8d9 2000 	ldr.w	r2, [r9]
 8009f68:	f003 0306 	and.w	r3, r3, #6
 8009f6c:	2b04      	cmp	r3, #4
 8009f6e:	bf08      	it	eq
 8009f70:	1aad      	subeq	r5, r5, r2
 8009f72:	68a3      	ldr	r3, [r4, #8]
 8009f74:	6922      	ldr	r2, [r4, #16]
 8009f76:	bf0c      	ite	eq
 8009f78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009f7c:	2500      	movne	r5, #0
 8009f7e:	4293      	cmp	r3, r2
 8009f80:	bfc4      	itt	gt
 8009f82:	1a9b      	subgt	r3, r3, r2
 8009f84:	18ed      	addgt	r5, r5, r3
 8009f86:	f04f 0900 	mov.w	r9, #0
 8009f8a:	341a      	adds	r4, #26
 8009f8c:	454d      	cmp	r5, r9
 8009f8e:	d11a      	bne.n	8009fc6 <_printf_common+0xd6>
 8009f90:	2000      	movs	r0, #0
 8009f92:	e008      	b.n	8009fa6 <_printf_common+0xb6>
 8009f94:	2301      	movs	r3, #1
 8009f96:	4652      	mov	r2, sl
 8009f98:	4639      	mov	r1, r7
 8009f9a:	4630      	mov	r0, r6
 8009f9c:	47c0      	blx	r8
 8009f9e:	3001      	adds	r0, #1
 8009fa0:	d103      	bne.n	8009faa <_printf_common+0xba>
 8009fa2:	f04f 30ff 	mov.w	r0, #4294967295
 8009fa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009faa:	3501      	adds	r5, #1
 8009fac:	e7c3      	b.n	8009f36 <_printf_common+0x46>
 8009fae:	18e1      	adds	r1, r4, r3
 8009fb0:	1c5a      	adds	r2, r3, #1
 8009fb2:	2030      	movs	r0, #48	; 0x30
 8009fb4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009fb8:	4422      	add	r2, r4
 8009fba:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009fbe:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009fc2:	3302      	adds	r3, #2
 8009fc4:	e7c5      	b.n	8009f52 <_printf_common+0x62>
 8009fc6:	2301      	movs	r3, #1
 8009fc8:	4622      	mov	r2, r4
 8009fca:	4639      	mov	r1, r7
 8009fcc:	4630      	mov	r0, r6
 8009fce:	47c0      	blx	r8
 8009fd0:	3001      	adds	r0, #1
 8009fd2:	d0e6      	beq.n	8009fa2 <_printf_common+0xb2>
 8009fd4:	f109 0901 	add.w	r9, r9, #1
 8009fd8:	e7d8      	b.n	8009f8c <_printf_common+0x9c>
	...

08009fdc <_printf_i>:
 8009fdc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009fe0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8009fe4:	460c      	mov	r4, r1
 8009fe6:	7e09      	ldrb	r1, [r1, #24]
 8009fe8:	b085      	sub	sp, #20
 8009fea:	296e      	cmp	r1, #110	; 0x6e
 8009fec:	4617      	mov	r7, r2
 8009fee:	4606      	mov	r6, r0
 8009ff0:	4698      	mov	r8, r3
 8009ff2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009ff4:	f000 80b3 	beq.w	800a15e <_printf_i+0x182>
 8009ff8:	d822      	bhi.n	800a040 <_printf_i+0x64>
 8009ffa:	2963      	cmp	r1, #99	; 0x63
 8009ffc:	d036      	beq.n	800a06c <_printf_i+0x90>
 8009ffe:	d80a      	bhi.n	800a016 <_printf_i+0x3a>
 800a000:	2900      	cmp	r1, #0
 800a002:	f000 80b9 	beq.w	800a178 <_printf_i+0x19c>
 800a006:	2958      	cmp	r1, #88	; 0x58
 800a008:	f000 8083 	beq.w	800a112 <_printf_i+0x136>
 800a00c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a010:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800a014:	e032      	b.n	800a07c <_printf_i+0xa0>
 800a016:	2964      	cmp	r1, #100	; 0x64
 800a018:	d001      	beq.n	800a01e <_printf_i+0x42>
 800a01a:	2969      	cmp	r1, #105	; 0x69
 800a01c:	d1f6      	bne.n	800a00c <_printf_i+0x30>
 800a01e:	6820      	ldr	r0, [r4, #0]
 800a020:	6813      	ldr	r3, [r2, #0]
 800a022:	0605      	lsls	r5, r0, #24
 800a024:	f103 0104 	add.w	r1, r3, #4
 800a028:	d52a      	bpl.n	800a080 <_printf_i+0xa4>
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	6011      	str	r1, [r2, #0]
 800a02e:	2b00      	cmp	r3, #0
 800a030:	da03      	bge.n	800a03a <_printf_i+0x5e>
 800a032:	222d      	movs	r2, #45	; 0x2d
 800a034:	425b      	negs	r3, r3
 800a036:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800a03a:	486f      	ldr	r0, [pc, #444]	; (800a1f8 <_printf_i+0x21c>)
 800a03c:	220a      	movs	r2, #10
 800a03e:	e039      	b.n	800a0b4 <_printf_i+0xd8>
 800a040:	2973      	cmp	r1, #115	; 0x73
 800a042:	f000 809d 	beq.w	800a180 <_printf_i+0x1a4>
 800a046:	d808      	bhi.n	800a05a <_printf_i+0x7e>
 800a048:	296f      	cmp	r1, #111	; 0x6f
 800a04a:	d020      	beq.n	800a08e <_printf_i+0xb2>
 800a04c:	2970      	cmp	r1, #112	; 0x70
 800a04e:	d1dd      	bne.n	800a00c <_printf_i+0x30>
 800a050:	6823      	ldr	r3, [r4, #0]
 800a052:	f043 0320 	orr.w	r3, r3, #32
 800a056:	6023      	str	r3, [r4, #0]
 800a058:	e003      	b.n	800a062 <_printf_i+0x86>
 800a05a:	2975      	cmp	r1, #117	; 0x75
 800a05c:	d017      	beq.n	800a08e <_printf_i+0xb2>
 800a05e:	2978      	cmp	r1, #120	; 0x78
 800a060:	d1d4      	bne.n	800a00c <_printf_i+0x30>
 800a062:	2378      	movs	r3, #120	; 0x78
 800a064:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a068:	4864      	ldr	r0, [pc, #400]	; (800a1fc <_printf_i+0x220>)
 800a06a:	e055      	b.n	800a118 <_printf_i+0x13c>
 800a06c:	6813      	ldr	r3, [r2, #0]
 800a06e:	1d19      	adds	r1, r3, #4
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	6011      	str	r1, [r2, #0]
 800a074:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a078:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a07c:	2301      	movs	r3, #1
 800a07e:	e08c      	b.n	800a19a <_printf_i+0x1be>
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	6011      	str	r1, [r2, #0]
 800a084:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a088:	bf18      	it	ne
 800a08a:	b21b      	sxthne	r3, r3
 800a08c:	e7cf      	b.n	800a02e <_printf_i+0x52>
 800a08e:	6813      	ldr	r3, [r2, #0]
 800a090:	6825      	ldr	r5, [r4, #0]
 800a092:	1d18      	adds	r0, r3, #4
 800a094:	6010      	str	r0, [r2, #0]
 800a096:	0628      	lsls	r0, r5, #24
 800a098:	d501      	bpl.n	800a09e <_printf_i+0xc2>
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	e002      	b.n	800a0a4 <_printf_i+0xc8>
 800a09e:	0668      	lsls	r0, r5, #25
 800a0a0:	d5fb      	bpl.n	800a09a <_printf_i+0xbe>
 800a0a2:	881b      	ldrh	r3, [r3, #0]
 800a0a4:	4854      	ldr	r0, [pc, #336]	; (800a1f8 <_printf_i+0x21c>)
 800a0a6:	296f      	cmp	r1, #111	; 0x6f
 800a0a8:	bf14      	ite	ne
 800a0aa:	220a      	movne	r2, #10
 800a0ac:	2208      	moveq	r2, #8
 800a0ae:	2100      	movs	r1, #0
 800a0b0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a0b4:	6865      	ldr	r5, [r4, #4]
 800a0b6:	60a5      	str	r5, [r4, #8]
 800a0b8:	2d00      	cmp	r5, #0
 800a0ba:	f2c0 8095 	blt.w	800a1e8 <_printf_i+0x20c>
 800a0be:	6821      	ldr	r1, [r4, #0]
 800a0c0:	f021 0104 	bic.w	r1, r1, #4
 800a0c4:	6021      	str	r1, [r4, #0]
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d13d      	bne.n	800a146 <_printf_i+0x16a>
 800a0ca:	2d00      	cmp	r5, #0
 800a0cc:	f040 808e 	bne.w	800a1ec <_printf_i+0x210>
 800a0d0:	4665      	mov	r5, ip
 800a0d2:	2a08      	cmp	r2, #8
 800a0d4:	d10b      	bne.n	800a0ee <_printf_i+0x112>
 800a0d6:	6823      	ldr	r3, [r4, #0]
 800a0d8:	07db      	lsls	r3, r3, #31
 800a0da:	d508      	bpl.n	800a0ee <_printf_i+0x112>
 800a0dc:	6923      	ldr	r3, [r4, #16]
 800a0de:	6862      	ldr	r2, [r4, #4]
 800a0e0:	429a      	cmp	r2, r3
 800a0e2:	bfde      	ittt	le
 800a0e4:	2330      	movle	r3, #48	; 0x30
 800a0e6:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a0ea:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a0ee:	ebac 0305 	sub.w	r3, ip, r5
 800a0f2:	6123      	str	r3, [r4, #16]
 800a0f4:	f8cd 8000 	str.w	r8, [sp]
 800a0f8:	463b      	mov	r3, r7
 800a0fa:	aa03      	add	r2, sp, #12
 800a0fc:	4621      	mov	r1, r4
 800a0fe:	4630      	mov	r0, r6
 800a100:	f7ff fef6 	bl	8009ef0 <_printf_common>
 800a104:	3001      	adds	r0, #1
 800a106:	d14d      	bne.n	800a1a4 <_printf_i+0x1c8>
 800a108:	f04f 30ff 	mov.w	r0, #4294967295
 800a10c:	b005      	add	sp, #20
 800a10e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a112:	4839      	ldr	r0, [pc, #228]	; (800a1f8 <_printf_i+0x21c>)
 800a114:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800a118:	6813      	ldr	r3, [r2, #0]
 800a11a:	6821      	ldr	r1, [r4, #0]
 800a11c:	1d1d      	adds	r5, r3, #4
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	6015      	str	r5, [r2, #0]
 800a122:	060a      	lsls	r2, r1, #24
 800a124:	d50b      	bpl.n	800a13e <_printf_i+0x162>
 800a126:	07ca      	lsls	r2, r1, #31
 800a128:	bf44      	itt	mi
 800a12a:	f041 0120 	orrmi.w	r1, r1, #32
 800a12e:	6021      	strmi	r1, [r4, #0]
 800a130:	b91b      	cbnz	r3, 800a13a <_printf_i+0x15e>
 800a132:	6822      	ldr	r2, [r4, #0]
 800a134:	f022 0220 	bic.w	r2, r2, #32
 800a138:	6022      	str	r2, [r4, #0]
 800a13a:	2210      	movs	r2, #16
 800a13c:	e7b7      	b.n	800a0ae <_printf_i+0xd2>
 800a13e:	064d      	lsls	r5, r1, #25
 800a140:	bf48      	it	mi
 800a142:	b29b      	uxthmi	r3, r3
 800a144:	e7ef      	b.n	800a126 <_printf_i+0x14a>
 800a146:	4665      	mov	r5, ip
 800a148:	fbb3 f1f2 	udiv	r1, r3, r2
 800a14c:	fb02 3311 	mls	r3, r2, r1, r3
 800a150:	5cc3      	ldrb	r3, [r0, r3]
 800a152:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800a156:	460b      	mov	r3, r1
 800a158:	2900      	cmp	r1, #0
 800a15a:	d1f5      	bne.n	800a148 <_printf_i+0x16c>
 800a15c:	e7b9      	b.n	800a0d2 <_printf_i+0xf6>
 800a15e:	6813      	ldr	r3, [r2, #0]
 800a160:	6825      	ldr	r5, [r4, #0]
 800a162:	6961      	ldr	r1, [r4, #20]
 800a164:	1d18      	adds	r0, r3, #4
 800a166:	6010      	str	r0, [r2, #0]
 800a168:	0628      	lsls	r0, r5, #24
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	d501      	bpl.n	800a172 <_printf_i+0x196>
 800a16e:	6019      	str	r1, [r3, #0]
 800a170:	e002      	b.n	800a178 <_printf_i+0x19c>
 800a172:	066a      	lsls	r2, r5, #25
 800a174:	d5fb      	bpl.n	800a16e <_printf_i+0x192>
 800a176:	8019      	strh	r1, [r3, #0]
 800a178:	2300      	movs	r3, #0
 800a17a:	6123      	str	r3, [r4, #16]
 800a17c:	4665      	mov	r5, ip
 800a17e:	e7b9      	b.n	800a0f4 <_printf_i+0x118>
 800a180:	6813      	ldr	r3, [r2, #0]
 800a182:	1d19      	adds	r1, r3, #4
 800a184:	6011      	str	r1, [r2, #0]
 800a186:	681d      	ldr	r5, [r3, #0]
 800a188:	6862      	ldr	r2, [r4, #4]
 800a18a:	2100      	movs	r1, #0
 800a18c:	4628      	mov	r0, r5
 800a18e:	f7f6 f82f 	bl	80001f0 <memchr>
 800a192:	b108      	cbz	r0, 800a198 <_printf_i+0x1bc>
 800a194:	1b40      	subs	r0, r0, r5
 800a196:	6060      	str	r0, [r4, #4]
 800a198:	6863      	ldr	r3, [r4, #4]
 800a19a:	6123      	str	r3, [r4, #16]
 800a19c:	2300      	movs	r3, #0
 800a19e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a1a2:	e7a7      	b.n	800a0f4 <_printf_i+0x118>
 800a1a4:	6923      	ldr	r3, [r4, #16]
 800a1a6:	462a      	mov	r2, r5
 800a1a8:	4639      	mov	r1, r7
 800a1aa:	4630      	mov	r0, r6
 800a1ac:	47c0      	blx	r8
 800a1ae:	3001      	adds	r0, #1
 800a1b0:	d0aa      	beq.n	800a108 <_printf_i+0x12c>
 800a1b2:	6823      	ldr	r3, [r4, #0]
 800a1b4:	079b      	lsls	r3, r3, #30
 800a1b6:	d413      	bmi.n	800a1e0 <_printf_i+0x204>
 800a1b8:	68e0      	ldr	r0, [r4, #12]
 800a1ba:	9b03      	ldr	r3, [sp, #12]
 800a1bc:	4298      	cmp	r0, r3
 800a1be:	bfb8      	it	lt
 800a1c0:	4618      	movlt	r0, r3
 800a1c2:	e7a3      	b.n	800a10c <_printf_i+0x130>
 800a1c4:	2301      	movs	r3, #1
 800a1c6:	464a      	mov	r2, r9
 800a1c8:	4639      	mov	r1, r7
 800a1ca:	4630      	mov	r0, r6
 800a1cc:	47c0      	blx	r8
 800a1ce:	3001      	adds	r0, #1
 800a1d0:	d09a      	beq.n	800a108 <_printf_i+0x12c>
 800a1d2:	3501      	adds	r5, #1
 800a1d4:	68e3      	ldr	r3, [r4, #12]
 800a1d6:	9a03      	ldr	r2, [sp, #12]
 800a1d8:	1a9b      	subs	r3, r3, r2
 800a1da:	42ab      	cmp	r3, r5
 800a1dc:	dcf2      	bgt.n	800a1c4 <_printf_i+0x1e8>
 800a1de:	e7eb      	b.n	800a1b8 <_printf_i+0x1dc>
 800a1e0:	2500      	movs	r5, #0
 800a1e2:	f104 0919 	add.w	r9, r4, #25
 800a1e6:	e7f5      	b.n	800a1d4 <_printf_i+0x1f8>
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d1ac      	bne.n	800a146 <_printf_i+0x16a>
 800a1ec:	7803      	ldrb	r3, [r0, #0]
 800a1ee:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a1f2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a1f6:	e76c      	b.n	800a0d2 <_printf_i+0xf6>
 800a1f8:	0800cfb5 	.word	0x0800cfb5
 800a1fc:	0800cfc6 	.word	0x0800cfc6

0800a200 <memcpy>:
 800a200:	b510      	push	{r4, lr}
 800a202:	1e43      	subs	r3, r0, #1
 800a204:	440a      	add	r2, r1
 800a206:	4291      	cmp	r1, r2
 800a208:	d100      	bne.n	800a20c <memcpy+0xc>
 800a20a:	bd10      	pop	{r4, pc}
 800a20c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a210:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a214:	e7f7      	b.n	800a206 <memcpy+0x6>

0800a216 <memmove>:
 800a216:	4288      	cmp	r0, r1
 800a218:	b510      	push	{r4, lr}
 800a21a:	eb01 0302 	add.w	r3, r1, r2
 800a21e:	d807      	bhi.n	800a230 <memmove+0x1a>
 800a220:	1e42      	subs	r2, r0, #1
 800a222:	4299      	cmp	r1, r3
 800a224:	d00a      	beq.n	800a23c <memmove+0x26>
 800a226:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a22a:	f802 4f01 	strb.w	r4, [r2, #1]!
 800a22e:	e7f8      	b.n	800a222 <memmove+0xc>
 800a230:	4283      	cmp	r3, r0
 800a232:	d9f5      	bls.n	800a220 <memmove+0xa>
 800a234:	1881      	adds	r1, r0, r2
 800a236:	1ad2      	subs	r2, r2, r3
 800a238:	42d3      	cmn	r3, r2
 800a23a:	d100      	bne.n	800a23e <memmove+0x28>
 800a23c:	bd10      	pop	{r4, pc}
 800a23e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a242:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800a246:	e7f7      	b.n	800a238 <memmove+0x22>

0800a248 <_free_r>:
 800a248:	b538      	push	{r3, r4, r5, lr}
 800a24a:	4605      	mov	r5, r0
 800a24c:	2900      	cmp	r1, #0
 800a24e:	d045      	beq.n	800a2dc <_free_r+0x94>
 800a250:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a254:	1f0c      	subs	r4, r1, #4
 800a256:	2b00      	cmp	r3, #0
 800a258:	bfb8      	it	lt
 800a25a:	18e4      	addlt	r4, r4, r3
 800a25c:	f000 f8d2 	bl	800a404 <__malloc_lock>
 800a260:	4a1f      	ldr	r2, [pc, #124]	; (800a2e0 <_free_r+0x98>)
 800a262:	6813      	ldr	r3, [r2, #0]
 800a264:	4610      	mov	r0, r2
 800a266:	b933      	cbnz	r3, 800a276 <_free_r+0x2e>
 800a268:	6063      	str	r3, [r4, #4]
 800a26a:	6014      	str	r4, [r2, #0]
 800a26c:	4628      	mov	r0, r5
 800a26e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a272:	f000 b8c8 	b.w	800a406 <__malloc_unlock>
 800a276:	42a3      	cmp	r3, r4
 800a278:	d90c      	bls.n	800a294 <_free_r+0x4c>
 800a27a:	6821      	ldr	r1, [r4, #0]
 800a27c:	1862      	adds	r2, r4, r1
 800a27e:	4293      	cmp	r3, r2
 800a280:	bf04      	itt	eq
 800a282:	681a      	ldreq	r2, [r3, #0]
 800a284:	685b      	ldreq	r3, [r3, #4]
 800a286:	6063      	str	r3, [r4, #4]
 800a288:	bf04      	itt	eq
 800a28a:	1852      	addeq	r2, r2, r1
 800a28c:	6022      	streq	r2, [r4, #0]
 800a28e:	6004      	str	r4, [r0, #0]
 800a290:	e7ec      	b.n	800a26c <_free_r+0x24>
 800a292:	4613      	mov	r3, r2
 800a294:	685a      	ldr	r2, [r3, #4]
 800a296:	b10a      	cbz	r2, 800a29c <_free_r+0x54>
 800a298:	42a2      	cmp	r2, r4
 800a29a:	d9fa      	bls.n	800a292 <_free_r+0x4a>
 800a29c:	6819      	ldr	r1, [r3, #0]
 800a29e:	1858      	adds	r0, r3, r1
 800a2a0:	42a0      	cmp	r0, r4
 800a2a2:	d10b      	bne.n	800a2bc <_free_r+0x74>
 800a2a4:	6820      	ldr	r0, [r4, #0]
 800a2a6:	4401      	add	r1, r0
 800a2a8:	1858      	adds	r0, r3, r1
 800a2aa:	4282      	cmp	r2, r0
 800a2ac:	6019      	str	r1, [r3, #0]
 800a2ae:	d1dd      	bne.n	800a26c <_free_r+0x24>
 800a2b0:	6810      	ldr	r0, [r2, #0]
 800a2b2:	6852      	ldr	r2, [r2, #4]
 800a2b4:	605a      	str	r2, [r3, #4]
 800a2b6:	4401      	add	r1, r0
 800a2b8:	6019      	str	r1, [r3, #0]
 800a2ba:	e7d7      	b.n	800a26c <_free_r+0x24>
 800a2bc:	d902      	bls.n	800a2c4 <_free_r+0x7c>
 800a2be:	230c      	movs	r3, #12
 800a2c0:	602b      	str	r3, [r5, #0]
 800a2c2:	e7d3      	b.n	800a26c <_free_r+0x24>
 800a2c4:	6820      	ldr	r0, [r4, #0]
 800a2c6:	1821      	adds	r1, r4, r0
 800a2c8:	428a      	cmp	r2, r1
 800a2ca:	bf04      	itt	eq
 800a2cc:	6811      	ldreq	r1, [r2, #0]
 800a2ce:	6852      	ldreq	r2, [r2, #4]
 800a2d0:	6062      	str	r2, [r4, #4]
 800a2d2:	bf04      	itt	eq
 800a2d4:	1809      	addeq	r1, r1, r0
 800a2d6:	6021      	streq	r1, [r4, #0]
 800a2d8:	605c      	str	r4, [r3, #4]
 800a2da:	e7c7      	b.n	800a26c <_free_r+0x24>
 800a2dc:	bd38      	pop	{r3, r4, r5, pc}
 800a2de:	bf00      	nop
 800a2e0:	200003d4 	.word	0x200003d4

0800a2e4 <_malloc_r>:
 800a2e4:	b570      	push	{r4, r5, r6, lr}
 800a2e6:	1ccd      	adds	r5, r1, #3
 800a2e8:	f025 0503 	bic.w	r5, r5, #3
 800a2ec:	3508      	adds	r5, #8
 800a2ee:	2d0c      	cmp	r5, #12
 800a2f0:	bf38      	it	cc
 800a2f2:	250c      	movcc	r5, #12
 800a2f4:	2d00      	cmp	r5, #0
 800a2f6:	4606      	mov	r6, r0
 800a2f8:	db01      	blt.n	800a2fe <_malloc_r+0x1a>
 800a2fa:	42a9      	cmp	r1, r5
 800a2fc:	d903      	bls.n	800a306 <_malloc_r+0x22>
 800a2fe:	230c      	movs	r3, #12
 800a300:	6033      	str	r3, [r6, #0]
 800a302:	2000      	movs	r0, #0
 800a304:	bd70      	pop	{r4, r5, r6, pc}
 800a306:	f000 f87d 	bl	800a404 <__malloc_lock>
 800a30a:	4a21      	ldr	r2, [pc, #132]	; (800a390 <_malloc_r+0xac>)
 800a30c:	6814      	ldr	r4, [r2, #0]
 800a30e:	4621      	mov	r1, r4
 800a310:	b991      	cbnz	r1, 800a338 <_malloc_r+0x54>
 800a312:	4c20      	ldr	r4, [pc, #128]	; (800a394 <_malloc_r+0xb0>)
 800a314:	6823      	ldr	r3, [r4, #0]
 800a316:	b91b      	cbnz	r3, 800a320 <_malloc_r+0x3c>
 800a318:	4630      	mov	r0, r6
 800a31a:	f000 f863 	bl	800a3e4 <_sbrk_r>
 800a31e:	6020      	str	r0, [r4, #0]
 800a320:	4629      	mov	r1, r5
 800a322:	4630      	mov	r0, r6
 800a324:	f000 f85e 	bl	800a3e4 <_sbrk_r>
 800a328:	1c43      	adds	r3, r0, #1
 800a32a:	d124      	bne.n	800a376 <_malloc_r+0x92>
 800a32c:	230c      	movs	r3, #12
 800a32e:	6033      	str	r3, [r6, #0]
 800a330:	4630      	mov	r0, r6
 800a332:	f000 f868 	bl	800a406 <__malloc_unlock>
 800a336:	e7e4      	b.n	800a302 <_malloc_r+0x1e>
 800a338:	680b      	ldr	r3, [r1, #0]
 800a33a:	1b5b      	subs	r3, r3, r5
 800a33c:	d418      	bmi.n	800a370 <_malloc_r+0x8c>
 800a33e:	2b0b      	cmp	r3, #11
 800a340:	d90f      	bls.n	800a362 <_malloc_r+0x7e>
 800a342:	600b      	str	r3, [r1, #0]
 800a344:	50cd      	str	r5, [r1, r3]
 800a346:	18cc      	adds	r4, r1, r3
 800a348:	4630      	mov	r0, r6
 800a34a:	f000 f85c 	bl	800a406 <__malloc_unlock>
 800a34e:	f104 000b 	add.w	r0, r4, #11
 800a352:	1d23      	adds	r3, r4, #4
 800a354:	f020 0007 	bic.w	r0, r0, #7
 800a358:	1ac3      	subs	r3, r0, r3
 800a35a:	d0d3      	beq.n	800a304 <_malloc_r+0x20>
 800a35c:	425a      	negs	r2, r3
 800a35e:	50e2      	str	r2, [r4, r3]
 800a360:	e7d0      	b.n	800a304 <_malloc_r+0x20>
 800a362:	428c      	cmp	r4, r1
 800a364:	684b      	ldr	r3, [r1, #4]
 800a366:	bf16      	itet	ne
 800a368:	6063      	strne	r3, [r4, #4]
 800a36a:	6013      	streq	r3, [r2, #0]
 800a36c:	460c      	movne	r4, r1
 800a36e:	e7eb      	b.n	800a348 <_malloc_r+0x64>
 800a370:	460c      	mov	r4, r1
 800a372:	6849      	ldr	r1, [r1, #4]
 800a374:	e7cc      	b.n	800a310 <_malloc_r+0x2c>
 800a376:	1cc4      	adds	r4, r0, #3
 800a378:	f024 0403 	bic.w	r4, r4, #3
 800a37c:	42a0      	cmp	r0, r4
 800a37e:	d005      	beq.n	800a38c <_malloc_r+0xa8>
 800a380:	1a21      	subs	r1, r4, r0
 800a382:	4630      	mov	r0, r6
 800a384:	f000 f82e 	bl	800a3e4 <_sbrk_r>
 800a388:	3001      	adds	r0, #1
 800a38a:	d0cf      	beq.n	800a32c <_malloc_r+0x48>
 800a38c:	6025      	str	r5, [r4, #0]
 800a38e:	e7db      	b.n	800a348 <_malloc_r+0x64>
 800a390:	200003d4 	.word	0x200003d4
 800a394:	200003d8 	.word	0x200003d8

0800a398 <_realloc_r>:
 800a398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a39a:	4607      	mov	r7, r0
 800a39c:	4614      	mov	r4, r2
 800a39e:	460e      	mov	r6, r1
 800a3a0:	b921      	cbnz	r1, 800a3ac <_realloc_r+0x14>
 800a3a2:	4611      	mov	r1, r2
 800a3a4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a3a8:	f7ff bf9c 	b.w	800a2e4 <_malloc_r>
 800a3ac:	b922      	cbnz	r2, 800a3b8 <_realloc_r+0x20>
 800a3ae:	f7ff ff4b 	bl	800a248 <_free_r>
 800a3b2:	4625      	mov	r5, r4
 800a3b4:	4628      	mov	r0, r5
 800a3b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a3b8:	f000 f826 	bl	800a408 <_malloc_usable_size_r>
 800a3bc:	42a0      	cmp	r0, r4
 800a3be:	d20f      	bcs.n	800a3e0 <_realloc_r+0x48>
 800a3c0:	4621      	mov	r1, r4
 800a3c2:	4638      	mov	r0, r7
 800a3c4:	f7ff ff8e 	bl	800a2e4 <_malloc_r>
 800a3c8:	4605      	mov	r5, r0
 800a3ca:	2800      	cmp	r0, #0
 800a3cc:	d0f2      	beq.n	800a3b4 <_realloc_r+0x1c>
 800a3ce:	4631      	mov	r1, r6
 800a3d0:	4622      	mov	r2, r4
 800a3d2:	f7ff ff15 	bl	800a200 <memcpy>
 800a3d6:	4631      	mov	r1, r6
 800a3d8:	4638      	mov	r0, r7
 800a3da:	f7ff ff35 	bl	800a248 <_free_r>
 800a3de:	e7e9      	b.n	800a3b4 <_realloc_r+0x1c>
 800a3e0:	4635      	mov	r5, r6
 800a3e2:	e7e7      	b.n	800a3b4 <_realloc_r+0x1c>

0800a3e4 <_sbrk_r>:
 800a3e4:	b538      	push	{r3, r4, r5, lr}
 800a3e6:	4c06      	ldr	r4, [pc, #24]	; (800a400 <_sbrk_r+0x1c>)
 800a3e8:	2300      	movs	r3, #0
 800a3ea:	4605      	mov	r5, r0
 800a3ec:	4608      	mov	r0, r1
 800a3ee:	6023      	str	r3, [r4, #0]
 800a3f0:	f7f7 fc1e 	bl	8001c30 <_sbrk>
 800a3f4:	1c43      	adds	r3, r0, #1
 800a3f6:	d102      	bne.n	800a3fe <_sbrk_r+0x1a>
 800a3f8:	6823      	ldr	r3, [r4, #0]
 800a3fa:	b103      	cbz	r3, 800a3fe <_sbrk_r+0x1a>
 800a3fc:	602b      	str	r3, [r5, #0]
 800a3fe:	bd38      	pop	{r3, r4, r5, pc}
 800a400:	20000800 	.word	0x20000800

0800a404 <__malloc_lock>:
 800a404:	4770      	bx	lr

0800a406 <__malloc_unlock>:
 800a406:	4770      	bx	lr

0800a408 <_malloc_usable_size_r>:
 800a408:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a40c:	1f18      	subs	r0, r3, #4
 800a40e:	2b00      	cmp	r3, #0
 800a410:	bfbc      	itt	lt
 800a412:	580b      	ldrlt	r3, [r1, r0]
 800a414:	18c0      	addlt	r0, r0, r3
 800a416:	4770      	bx	lr

0800a418 <_init>:
 800a418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a41a:	bf00      	nop
 800a41c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a41e:	bc08      	pop	{r3}
 800a420:	469e      	mov	lr, r3
 800a422:	4770      	bx	lr

0800a424 <_fini>:
 800a424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a426:	bf00      	nop
 800a428:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a42a:	bc08      	pop	{r3}
 800a42c:	469e      	mov	lr, r3
 800a42e:	4770      	bx	lr
